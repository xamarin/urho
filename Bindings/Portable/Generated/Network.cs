// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Generated using `sharpie urho`
// 
// Network.cs
// 
// Copyright 2015 Xamarin Inc. All rights reserved.

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho.Network
{
	/// <summary>
	/// %Network subsystem. Manages client-server communications using the UDP protocol.
	/// </summary>
	public unsafe partial class Network : UrhoObject
	{
		public Network (IntPtr handle) : base (handle)
		{
		}

		protected Network (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Network_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (Network_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Network_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (Network_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Network_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(Network));
			return new StringHash (Network_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Network_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(Network));
			return Marshal.PtrToStringAnsi (Network_GetTypeNameStatic ());
		}

		public Network () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Network_Network (IntPtr context);

		public Network (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(Network));
			handle = Network_Network ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Network_Disconnect (IntPtr handle, int waitMSec);

		/// <summary>
		/// Disconnect the connection to the server. If wait time is non-zero, will block while waiting for disconnect to finish.
		/// </summary>
		public void Disconnect (int waitMSec)
		{
			Runtime.ValidateRefCounted (this);
			Network_Disconnect (handle, waitMSec);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Network_StartServer (IntPtr handle, ushort port);

		/// <summary>
		/// Start a server on a port using UDP protocol. Return true if successful.
		/// </summary>
		public bool StartServer (ushort port)
		{
			Runtime.ValidateRefCounted (this);
			return Network_StartServer (handle, port);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Network_StopServer (IntPtr handle);

		/// <summary>
		/// Stop the server.
		/// </summary>
		public void StopServer ()
		{
			Runtime.ValidateRefCounted (this);
			Network_StopServer (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Network_BroadcastMessage (IntPtr handle, int msgID, bool reliable, bool inOrder, byte* data, uint numBytes, uint contentID);

		/// <summary>
		/// Broadcast a message with content ID to all client connections.
		/// </summary>
		public void BroadcastMessage (int msgID, bool reliable, bool inOrder, byte* data, uint numBytes, uint contentID)
		{
			Runtime.ValidateRefCounted (this);
			Network_BroadcastMessage (handle, msgID, reliable, inOrder, data, numBytes, contentID);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Network_SetUpdateFps (IntPtr handle, int fps);

		/// <summary>
		/// Set network update FPS.
		/// </summary>
		private void SetUpdateFps (int fps)
		{
			Runtime.ValidateRefCounted (this);
			Network_SetUpdateFps (handle, fps);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Network_SetSimulatedLatency (IntPtr handle, int ms);

		/// <summary>
		/// Set simulated latency in milliseconds. This adds a fixed delay before sending each packet.
		/// </summary>
		private void SetSimulatedLatency (int ms)
		{
			Runtime.ValidateRefCounted (this);
			Network_SetSimulatedLatency (handle, ms);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Network_SetSimulatedPacketLoss (IntPtr handle, float probability);

		/// <summary>
		/// Set simulated packet loss probability between 0.0 - 1.0.
		/// </summary>
		private void SetSimulatedPacketLoss (float probability)
		{
			Runtime.ValidateRefCounted (this);
			Network_SetSimulatedPacketLoss (handle, probability);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Network_RegisterRemoteEvent (IntPtr handle, int eventType);

		/// <summary>
		/// Register a remote event as allowed to be received. There is also a fixed blacklist of events that can not be allowed in any case, such as ConsoleCommand.
		/// </summary>
		public void RegisterRemoteEvent (StringHash eventType)
		{
			Runtime.ValidateRefCounted (this);
			Network_RegisterRemoteEvent (handle, eventType.Code);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Network_UnregisterRemoteEvent (IntPtr handle, int eventType);

		/// <summary>
		/// Unregister a remote event as allowed to received.
		/// </summary>
		public void UnregisterRemoteEvent (StringHash eventType)
		{
			Runtime.ValidateRefCounted (this);
			Network_UnregisterRemoteEvent (handle, eventType.Code);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Network_UnregisterAllRemoteEvents (IntPtr handle);

		/// <summary>
		/// Unregister all remote events.
		/// </summary>
		public void UnregisterAllRemoteEvents ()
		{
			Runtime.ValidateRefCounted (this);
			Network_UnregisterAllRemoteEvents (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Network_SetPackageCacheDir (IntPtr handle, string path);

		/// <summary>
		/// Set the package download cache directory.
		/// </summary>
		private void SetPackageCacheDir (string path)
		{
			Runtime.ValidateRefCounted (this);
			Network_SetPackageCacheDir (handle, path);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Network_SendPackageToClients (IntPtr handle, IntPtr scene, IntPtr package);

		/// <summary>
		/// Trigger all client connections in the specified scene to download a package file from the server. Can be used to download additional resource packages when clients are already joined in the scene. The package must have been added as a requirement to the scene, or else the eventual download will fail.
		/// </summary>
		public void SendPackageToClients (Scene scene, PackageFile package)
		{
			Runtime.ValidateRefCounted (this);
			Network_SendPackageToClients (handle, (object)scene == null ? IntPtr.Zero : scene.Handle, (object)package == null ? IntPtr.Zero : package.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Network_GetUpdateFps (IntPtr handle);

		/// <summary>
		/// Return network update FPS.
		/// </summary>
		private int GetUpdateFps ()
		{
			Runtime.ValidateRefCounted (this);
			return Network_GetUpdateFps (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Network_GetSimulatedLatency (IntPtr handle);

		/// <summary>
		/// Return simulated latency in milliseconds.
		/// </summary>
		private int GetSimulatedLatency ()
		{
			Runtime.ValidateRefCounted (this);
			return Network_GetSimulatedLatency (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float Network_GetSimulatedPacketLoss (IntPtr handle);

		/// <summary>
		/// Return simulated packet loss probability.
		/// </summary>
		private float GetSimulatedPacketLoss ()
		{
			Runtime.ValidateRefCounted (this);
			return Network_GetSimulatedPacketLoss (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Network_GetServerConnection (IntPtr handle);

		/// <summary>
		/// Return the connection to the server. Null if not connected.
		/// </summary>
		private Connection GetServerConnection ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<Connection> (Network_GetServerConnection (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Network_IsServerRunning (IntPtr handle);

		/// <summary>
		/// Return whether the server is running.
		/// </summary>
		private bool IsServerRunning ()
		{
			Runtime.ValidateRefCounted (this);
			return Network_IsServerRunning (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Network_CheckRemoteEvent (IntPtr handle, int eventType);

		/// <summary>
		/// Return whether a remote event is allowed to be received.
		/// </summary>
		public bool CheckRemoteEvent (StringHash eventType)
		{
			Runtime.ValidateRefCounted (this);
			return Network_CheckRemoteEvent (handle, eventType.Code);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Network_GetPackageCacheDir (IntPtr handle);

		/// <summary>
		/// Return the package download cache directory.
		/// </summary>
		private string GetPackageCacheDir ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (Network_GetPackageCacheDir (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Network_Update (IntPtr handle, float timeStep);

		/// <summary>
		/// Process incoming messages from connections. Called by HandleBeginFrame.
		/// </summary>
		public void Update (float timeStep)
		{
			Runtime.ValidateRefCounted (this);
			Network_Update (handle, timeStep);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Network_PostUpdate (IntPtr handle, float timeStep);

		/// <summary>
		/// Send outgoing messages after frame logic. Called by HandleRenderUpdate.
		/// </summary>
		public void PostUpdate (float timeStep)
		{
			Runtime.ValidateRefCounted (this);
			Network_PostUpdate (handle, timeStep);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		public static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Return network update FPS.
		/// Or
		/// Set network update FPS.
		/// </summary>
		public int UpdateFps {
			get {
				return GetUpdateFps ();
			}
			set {
				SetUpdateFps (value);
			}
		}

		/// <summary>
		/// Return simulated latency in milliseconds.
		/// Or
		/// Set simulated latency in milliseconds. This adds a fixed delay before sending each packet.
		/// </summary>
		public int SimulatedLatency {
			get {
				return GetSimulatedLatency ();
			}
			set {
				SetSimulatedLatency (value);
			}
		}

		/// <summary>
		/// Return simulated packet loss probability.
		/// Or
		/// Set simulated packet loss probability between 0.0 - 1.0.
		/// </summary>
		public float SimulatedPacketLoss {
			get {
				return GetSimulatedPacketLoss ();
			}
			set {
				SetSimulatedPacketLoss (value);
			}
		}

		/// <summary>
		/// Return the package download cache directory.
		/// Or
		/// Set the package download cache directory.
		/// </summary>
		public string PackageCacheDir {
			get {
				return GetPackageCacheDir ();
			}
			set {
				SetPackageCacheDir (value);
			}
		}

		/// <summary>
		/// Return the connection to the server. Null if not connected.
		/// </summary>
		public Connection ServerConnection {
			get {
				return GetServerConnection ();
			}
		}

		/// <summary>
		/// Return whether the server is running.
		/// </summary>
		public bool ServerRunning {
			get {
				return IsServerRunning ();
			}
		}
	}
}
