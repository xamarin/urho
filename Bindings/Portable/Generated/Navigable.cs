// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Generated using `sharpie urho`
// 
// Navigable.cs
// 
// Copyright 2015 Xamarin Inc. All rights reserved.

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho.Navigation
{
	/// <summary>
	/// Component which tags geometry for inclusion in the navigation mesh. Optionally auto-includes geometry from child nodes.
	/// </summary>
	public unsafe partial class Navigable : Component
	{
		public Navigable (IntPtr handle) : base (handle)
		{
		}

		protected Navigable (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Navigable_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (Navigable_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Navigable_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (Navigable_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Navigable_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(Navigable));
			return new StringHash (Navigable_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Navigable_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(Navigable));
			return Marshal.PtrToStringAnsi (Navigable_GetTypeNameStatic ());
		}

		public Navigable () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Navigable_Navigable (IntPtr context);

		public Navigable (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(Navigable));
			handle = Navigable_Navigable ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Navigable_RegisterObject (IntPtr context);

		/// <summary>
		/// Register object factory.
		/// </summary>
		public new static void RegisterObject (Context context)
		{
			Runtime.Validate (typeof(Navigable));
			Navigable_RegisterObject ((object)context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Navigable_SetRecursive (IntPtr handle, bool enable);

		/// <summary>
		/// Set whether geometry is automatically collected from child nodes. Default true.
		/// </summary>
		private void SetRecursive (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			Navigable_SetRecursive (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Navigable_IsRecursive (IntPtr handle);

		/// <summary>
		/// Return whether geometry is automatically collected from child nodes.
		/// </summary>
		private bool IsRecursive ()
		{
			Runtime.ValidateRefCounted (this);
			return Navigable_IsRecursive (handle);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		public new static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public new static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Return whether geometry is automatically collected from child nodes.
		/// Or
		/// Set whether geometry is automatically collected from child nodes. Default true.
		/// </summary>
		public bool Recursive {
			get {
				return IsRecursive ();
			}
			set {
				SetRecursive (value);
			}
		}
	}
}
