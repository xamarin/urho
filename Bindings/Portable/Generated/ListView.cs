// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Generated using `sharpie urho`
// 
// ListView.cs
// 
// Copyright 2015 Xamarin Inc. All rights reserved.

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho.Gui
{
	/// <summary>
	/// Scrollable list %UI element.
	/// </summary>
	public unsafe partial class ListView : ScrollView
	{
		public ListView (IntPtr handle) : base (handle)
		{
		}

		protected ListView (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int ListView_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (ListView_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr ListView_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (ListView_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int ListView_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(ListView));
			return new StringHash (ListView_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr ListView_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(ListView));
			return Marshal.PtrToStringAnsi (ListView_GetTypeNameStatic ());
		}

		public ListView () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr ListView_ListView (IntPtr context);

		public ListView (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(ListView));
			handle = ListView_ListView ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_RegisterObject (IntPtr context);

		/// <summary>
		/// Register object factory.
		/// </summary>
		public new static void RegisterObject (Context context)
		{
			Runtime.Validate (typeof(ListView));
			ListView_RegisterObject ((object)context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_OnKey (IntPtr handle, int key, int buttons, int qualifiers);

		/// <summary>
		/// React to a key press.
		/// </summary>
		public override void OnKey (int key, int buttons, int qualifiers)
		{
			Runtime.ValidateRefCounted (this);
			ListView_OnKey (handle, key, buttons, qualifiers);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_OnResize (IntPtr handle, ref Urho.IntVector2 newSize, ref Urho.IntVector2 delta);

		/// <summary>
		/// React to resize.
		/// </summary>
		public override void OnResize (Urho.IntVector2 newSize, Urho.IntVector2 delta)
		{
			Runtime.ValidateRefCounted (this);
			ListView_OnResize (handle, ref newSize, ref delta);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_AddItem (IntPtr handle, IntPtr item);

		/// <summary>
		/// Add item to the end of the list.
		/// </summary>
		public void AddItem (UIElement item)
		{
			Runtime.ValidateRefCounted (this);
			ListView_AddItem (handle, (object)item == null ? IntPtr.Zero : item.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_InsertItem (IntPtr handle, uint index, IntPtr item, IntPtr parentItem);

		/// <summary>
		/// 
		/// Insert item at a specific index. In hierarchy mode, the optional parameter will be used to determine the child's indent level in respect to its parent.
		/// If index is greater than the total items then the new item is inserted at the end of the list.
		/// In hierarchy mode, if index is greater than the index of last children of the specified parent item then the new item is inserted next to the last children.
		/// And if the index is lesser than the index of the parent item itself then the new item is inserted before the first child item.
		/// </summary>
		public void InsertItem (uint index, UIElement item, UIElement parentItem)
		{
			Runtime.ValidateRefCounted (this);
			ListView_InsertItem (handle, index, (object)item == null ? IntPtr.Zero : item.Handle, (object)parentItem == null ? IntPtr.Zero : parentItem.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_RemoveItem (IntPtr handle, IntPtr item, uint index);

		/// <summary>
		/// Remove specific item, starting search at the specified index if provided. In hierarchy mode will also remove any children.
		/// </summary>
		public void RemoveItem (UIElement item, uint index)
		{
			Runtime.ValidateRefCounted (this);
			ListView_RemoveItem (handle, (object)item == null ? IntPtr.Zero : item.Handle, index);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_RemoveItem0 (IntPtr handle, uint index);

		/// <summary>
		/// Remove item at index. In hierarchy mode will also remove any children.
		/// </summary>
		public void RemoveItem (uint index)
		{
			Runtime.ValidateRefCounted (this);
			ListView_RemoveItem0 (handle, index);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_RemoveAllItems (IntPtr handle);

		/// <summary>
		/// Remove all items.
		/// </summary>
		public void RemoveAllItems ()
		{
			Runtime.ValidateRefCounted (this);
			ListView_RemoveAllItems (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_SetSelection (IntPtr handle, uint index);

		/// <summary>
		/// Set selection.
		/// </summary>
		private void SetSelection (uint index)
		{
			Runtime.ValidateRefCounted (this);
			ListView_SetSelection (handle, index);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_AddSelection (IntPtr handle, uint index);

		/// <summary>
		/// Add item to the selection, multiselect mode only.
		/// </summary>
		public void AddSelection (uint index)
		{
			Runtime.ValidateRefCounted (this);
			ListView_AddSelection (handle, index);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_RemoveSelection (IntPtr handle, uint index);

		/// <summary>
		/// Remove item from the selection.
		/// </summary>
		public void RemoveSelection (uint index)
		{
			Runtime.ValidateRefCounted (this);
			ListView_RemoveSelection (handle, index);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_ToggleSelection (IntPtr handle, uint index);

		/// <summary>
		/// Toggle selection of an item.
		/// </summary>
		public void ToggleSelection (uint index)
		{
			Runtime.ValidateRefCounted (this);
			ListView_ToggleSelection (handle, index);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_ChangeSelection (IntPtr handle, int delta, bool additive);

		/// <summary>
		/// Move selection by a delta and clamp at list ends. If additive (multiselect only), will add to the existing selection.
		/// </summary>
		public void ChangeSelection (int delta, bool additive)
		{
			Runtime.ValidateRefCounted (this);
			ListView_ChangeSelection (handle, delta, additive);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_ClearSelection (IntPtr handle);

		/// <summary>
		/// Clear selection.
		/// </summary>
		public void ClearSelection ()
		{
			Runtime.ValidateRefCounted (this);
			ListView_ClearSelection (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_SetHighlightMode (IntPtr handle, HighlightMode mode);

		/// <summary>
		/// Set selected items' highlight mode.
		/// </summary>
		private void SetHighlightMode (HighlightMode mode)
		{
			Runtime.ValidateRefCounted (this);
			ListView_SetHighlightMode (handle, mode);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_SetMultiselect (IntPtr handle, bool enable);

		/// <summary>
		/// Enable multiselect.
		/// </summary>
		private void SetMultiselect (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			ListView_SetMultiselect (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_SetHierarchyMode (IntPtr handle, bool enable);

		/// <summary>
		/// 
		/// Enable hierarchy mode. Allows items to have parent-child relationship at different indent level and the ability to expand/collapse child items.
		/// All items in the list will be lost during mode change.
		/// </summary>
		private void SetHierarchyMode (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			ListView_SetHierarchyMode (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_SetBaseIndent (IntPtr handle, int baseIndent);

		/// <summary>
		/// Set base indent, i.e. the indent level of the ultimate parent item.
		/// </summary>
		private void SetBaseIndent (int baseIndent)
		{
			Runtime.ValidateRefCounted (this);
			ListView_SetBaseIndent (handle, baseIndent);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_SetClearSelectionOnDefocus (IntPtr handle, bool enable);

		/// <summary>
		/// Enable clearing of selection on defocus.
		/// </summary>
		private void SetClearSelectionOnDefocus (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			ListView_SetClearSelectionOnDefocus (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_SetSelectOnClickEnd (IntPtr handle, bool enable);

		/// <summary>
		/// Enable reacting to click end instead of click start for item selection. Default false.
		/// </summary>
		private void SetSelectOnClickEnd (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			ListView_SetSelectOnClickEnd (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_Expand (IntPtr handle, uint index, bool enable, bool recursive);

		/// <summary>
		/// Expand item at index. Only has effect in hierarchy mode.
		/// </summary>
		public void Expand (uint index, bool enable, bool recursive)
		{
			Runtime.ValidateRefCounted (this);
			ListView_Expand (handle, index, enable, recursive);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_ToggleExpand (IntPtr handle, uint index, bool recursive);

		/// <summary>
		/// Toggle item's expanded flag at index. Only has effect in hierarchy mode.
		/// </summary>
		public void ToggleExpand (uint index, bool recursive)
		{
			Runtime.ValidateRefCounted (this);
			ListView_ToggleExpand (handle, index, recursive);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint ListView_GetNumItems (IntPtr handle);

		/// <summary>
		/// Return number of items.
		/// </summary>
		private uint GetNumItems ()
		{
			Runtime.ValidateRefCounted (this);
			return ListView_GetNumItems (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr ListView_GetItem (IntPtr handle, uint index);

		/// <summary>
		/// Return item at index.
		/// </summary>
		public UIElement GetItem (uint index)
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<UIElement> (ListView_GetItem (handle, index));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint ListView_FindItem (IntPtr handle, IntPtr item);

		/// <summary>
		/// Return index of item, or M_MAX_UNSIGNED If not found.
		/// </summary>
		public uint FindItem (UIElement item)
		{
			Runtime.ValidateRefCounted (this);
			return ListView_FindItem (handle, (object)item == null ? IntPtr.Zero : item.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint ListView_GetSelection (IntPtr handle);

		/// <summary>
		/// Return first selected index, or M_MAX_UNSIGNED if none selected.
		/// </summary>
		private uint GetSelection ()
		{
			Runtime.ValidateRefCounted (this);
			return ListView_GetSelection (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_CopySelectedItemsToClipboard (IntPtr handle);

		/// <summary>
		/// Copy selected items to system clipboard. Currently only applicable to Text items.
		/// </summary>
		public void CopySelectedItemsToClipboard ()
		{
			Runtime.ValidateRefCounted (this);
			ListView_CopySelectedItemsToClipboard (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr ListView_GetSelectedItem (IntPtr handle);

		/// <summary>
		/// Return first selected item, or null if none selected.
		/// </summary>
		private UIElement GetSelectedItem ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<UIElement> (ListView_GetSelectedItem (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ListView_IsSelected (IntPtr handle, uint index);

		/// <summary>
		/// Return whether an item at index is seleccted.
		/// </summary>
		public bool IsSelected (uint index)
		{
			Runtime.ValidateRefCounted (this);
			return ListView_IsSelected (handle, index);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ListView_IsExpanded (IntPtr handle, uint index);

		/// <summary>
		/// Return whether an item at index has its children expanded (in hierachy mode only).
		/// </summary>
		public bool IsExpanded (uint index)
		{
			Runtime.ValidateRefCounted (this);
			return ListView_IsExpanded (handle, index);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern HighlightMode ListView_GetHighlightMode (IntPtr handle);

		/// <summary>
		/// Return highlight mode.
		/// </summary>
		private HighlightMode GetHighlightMode ()
		{
			Runtime.ValidateRefCounted (this);
			return ListView_GetHighlightMode (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ListView_GetMultiselect (IntPtr handle);

		/// <summary>
		/// Return whether multiselect enabled.
		/// </summary>
		private bool GetMultiselect ()
		{
			Runtime.ValidateRefCounted (this);
			return ListView_GetMultiselect (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ListView_GetClearSelectionOnDefocus (IntPtr handle);

		/// <summary>
		/// Return whether selection is cleared on defocus.
		/// </summary>
		private bool GetClearSelectionOnDefocus ()
		{
			Runtime.ValidateRefCounted (this);
			return ListView_GetClearSelectionOnDefocus (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ListView_GetSelectOnClickEnd (IntPtr handle);

		/// <summary>
		/// Return whether reacts to click end instead of click start for item selection.
		/// </summary>
		private bool GetSelectOnClickEnd ()
		{
			Runtime.ValidateRefCounted (this);
			return ListView_GetSelectOnClickEnd (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ListView_GetHierarchyMode (IntPtr handle);

		/// <summary>
		/// Return whether hierarchy mode enabled.
		/// </summary>
		private bool GetHierarchyMode ()
		{
			Runtime.ValidateRefCounted (this);
			return ListView_GetHierarchyMode (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int ListView_GetBaseIndent (IntPtr handle);

		/// <summary>
		/// Return base indent.
		/// </summary>
		private int GetBaseIndent ()
		{
			Runtime.ValidateRefCounted (this);
			return ListView_GetBaseIndent (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_EnsureItemVisibility (IntPtr handle, uint index);

		/// <summary>
		/// Ensure full visibility of the item.
		/// </summary>
		public void EnsureItemVisibility (uint index)
		{
			Runtime.ValidateRefCounted (this);
			ListView_EnsureItemVisibility (handle, index);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ListView_EnsureItemVisibility1 (IntPtr handle, IntPtr item);

		/// <summary>
		/// Ensure full visibility of the item.
		/// </summary>
		public void EnsureItemVisibility (UIElement item)
		{
			Runtime.ValidateRefCounted (this);
			ListView_EnsureItemVisibility1 (handle, (object)item == null ? IntPtr.Zero : item.Handle);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		public new static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public new static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Return first selected index, or M_MAX_UNSIGNED if none selected.
		/// Or
		/// Set selection.
		/// </summary>
		public uint Selection {
			get {
				return GetSelection ();
			}
			set {
				SetSelection (value);
			}
		}

		/// <summary>
		/// Return highlight mode.
		/// Or
		/// Set selected items' highlight mode.
		/// </summary>
		public HighlightMode HighlightMode {
			get {
				return GetHighlightMode ();
			}
			set {
				SetHighlightMode (value);
			}
		}

		/// <summary>
		/// Return whether multiselect enabled.
		/// Or
		/// Enable multiselect.
		/// </summary>
		public bool Multiselect {
			get {
				return GetMultiselect ();
			}
			set {
				SetMultiselect (value);
			}
		}

		/// <summary>
		/// Return whether hierarchy mode enabled.
		/// Or
		/// 
		/// Enable hierarchy mode. Allows items to have parent-child relationship at different indent level and the ability to expand/collapse child items.
		/// All items in the list will be lost during mode change.
		/// </summary>
		public bool HierarchyMode {
			get {
				return GetHierarchyMode ();
			}
			set {
				SetHierarchyMode (value);
			}
		}

		/// <summary>
		/// Return base indent.
		/// Or
		/// Set base indent, i.e. the indent level of the ultimate parent item.
		/// </summary>
		public int BaseIndent {
			get {
				return GetBaseIndent ();
			}
			set {
				SetBaseIndent (value);
			}
		}

		/// <summary>
		/// Return whether selection is cleared on defocus.
		/// Or
		/// Enable clearing of selection on defocus.
		/// </summary>
		public bool ClearSelectionOnDefocus {
			get {
				return GetClearSelectionOnDefocus ();
			}
			set {
				SetClearSelectionOnDefocus (value);
			}
		}

		/// <summary>
		/// Return whether reacts to click end instead of click start for item selection.
		/// Or
		/// Enable reacting to click end instead of click start for item selection. Default false.
		/// </summary>
		public bool SelectOnClickEnd {
			get {
				return GetSelectOnClickEnd ();
			}
			set {
				SetSelectOnClickEnd (value);
			}
		}

		/// <summary>
		/// Return number of items.
		/// </summary>
		public uint NumItems {
			get {
				return GetNumItems ();
			}
		}

		/// <summary>
		/// Return first selected item, or null if none selected.
		/// </summary>
		public UIElement SelectedItem {
			get {
				return GetSelectedItem ();
			}
		}
	}
}
