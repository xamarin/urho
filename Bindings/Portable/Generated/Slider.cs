// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Generated using `sharpie urho`
// 
// Slider.cs
// 
// Copyright 2015 Xamarin Inc. All rights reserved.

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho.Gui
{
	/// <summary>
	/// %Slider bar %UI element.
	/// </summary>
	public unsafe partial class Slider : BorderImage
	{
		public Slider (IntPtr handle) : base (handle)
		{
		}

		protected Slider (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Slider_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (Slider_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Slider_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (Slider_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Slider_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(Slider));
			return new StringHash (Slider_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Slider_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(Slider));
			return Marshal.PtrToStringAnsi (Slider_GetTypeNameStatic ());
		}

		public Slider () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Slider_Slider (IntPtr context);

		public Slider (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(Slider));
			handle = Slider_Slider ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Slider_RegisterObject (IntPtr context);

		/// <summary>
		/// Register object factory.
		/// </summary>
		public new static void RegisterObject (Context context)
		{
			Runtime.Validate (typeof(Slider));
			Slider_RegisterObject ((object)context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Slider_Update (IntPtr handle, float timeStep);

		/// <summary>
		/// Perform UI element update.
		/// </summary>
		public override void Update (float timeStep)
		{
			Runtime.ValidateRefCounted (this);
			Slider_Update (handle, timeStep);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Slider_OnHover (IntPtr handle, ref Urho.IntVector2 position, ref Urho.IntVector2 screenPosition, int buttons, int qualifiers, IntPtr cursor);

		/// <summary>
		/// React to mouse hover.
		/// </summary>
		public override void OnHover (Urho.IntVector2 position, Urho.IntVector2 screenPosition, int buttons, int qualifiers, Cursor cursor)
		{
			Runtime.ValidateRefCounted (this);
			Slider_OnHover (handle, ref position, ref screenPosition, buttons, qualifiers, (object)cursor == null ? IntPtr.Zero : cursor.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Slider_OnClickBegin (IntPtr handle, ref Urho.IntVector2 position, ref Urho.IntVector2 screenPosition, int button, int buttons, int qualifiers, IntPtr cursor);

		/// <summary>
		/// React to mouse click begin.
		/// </summary>
		public override void OnClickBegin (Urho.IntVector2 position, Urho.IntVector2 screenPosition, int button, int buttons, int qualifiers, Cursor cursor)
		{
			Runtime.ValidateRefCounted (this);
			Slider_OnClickBegin (handle, ref position, ref screenPosition, button, buttons, qualifiers, (object)cursor == null ? IntPtr.Zero : cursor.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Slider_OnClickEnd (IntPtr handle, ref Urho.IntVector2 position, ref Urho.IntVector2 screenPosition, int button, int buttons, int qualifiers, IntPtr cursor, IntPtr beginElement);

		/// <summary>
		/// React to mouse click end.
		/// </summary>
		public override void OnClickEnd (Urho.IntVector2 position, Urho.IntVector2 screenPosition, int button, int buttons, int qualifiers, Cursor cursor, UIElement beginElement)
		{
			Runtime.ValidateRefCounted (this);
			Slider_OnClickEnd (handle, ref position, ref screenPosition, button, buttons, qualifiers, (object)cursor == null ? IntPtr.Zero : cursor.Handle, (object)beginElement == null ? IntPtr.Zero : beginElement.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Slider_OnResize (IntPtr handle, ref Urho.IntVector2 newSize, ref Urho.IntVector2 delta);

		/// <summary>
		/// React to resize.
		/// </summary>
		public override void OnResize (Urho.IntVector2 newSize, Urho.IntVector2 delta)
		{
			Runtime.ValidateRefCounted (this);
			Slider_OnResize (handle, ref newSize, ref delta);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Slider_SetOrientation (IntPtr handle, Orientation orientation);

		/// <summary>
		/// Set orientation type.
		/// </summary>
		private void SetOrientation (Orientation orientation)
		{
			Runtime.ValidateRefCounted (this);
			Slider_SetOrientation (handle, orientation);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Slider_SetRange (IntPtr handle, float range);

		/// <summary>
		/// Set slider range maximum value (minimum value is always 0.)
		/// </summary>
		private void SetRange (float range)
		{
			Runtime.ValidateRefCounted (this);
			Slider_SetRange (handle, range);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Slider_SetValue (IntPtr handle, float value);

		/// <summary>
		/// Set slider current value.
		/// </summary>
		private void SetValue (float value)
		{
			Runtime.ValidateRefCounted (this);
			Slider_SetValue (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Slider_ChangeValue (IntPtr handle, float delta);

		/// <summary>
		/// Change value by a delta.
		/// </summary>
		public void ChangeValue (float delta)
		{
			Runtime.ValidateRefCounted (this);
			Slider_ChangeValue (handle, delta);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Slider_SetRepeatRate (IntPtr handle, float rate);

		/// <summary>
		/// Set paging minimum repeat rate (number of events per second).
		/// </summary>
		private void SetRepeatRate (float rate)
		{
			Runtime.ValidateRefCounted (this);
			Slider_SetRepeatRate (handle, rate);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Orientation Slider_GetOrientation (IntPtr handle);

		/// <summary>
		/// Return orientation type.
		/// </summary>
		private Orientation GetOrientation ()
		{
			Runtime.ValidateRefCounted (this);
			return Slider_GetOrientation (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float Slider_GetRange (IntPtr handle);

		/// <summary>
		/// Return slider range.
		/// </summary>
		private float GetRange ()
		{
			Runtime.ValidateRefCounted (this);
			return Slider_GetRange (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float Slider_GetValue (IntPtr handle);

		/// <summary>
		/// Return slider current value.
		/// </summary>
		private float GetValue ()
		{
			Runtime.ValidateRefCounted (this);
			return Slider_GetValue (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Slider_GetKnob (IntPtr handle);

		/// <summary>
		/// Return knob element.
		/// </summary>
		private BorderImage GetKnob ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<BorderImage> (Slider_GetKnob (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float Slider_GetRepeatRate (IntPtr handle);

		/// <summary>
		/// Return paging minimum repeat rate (number of events per second).
		/// </summary>
		private float GetRepeatRate ()
		{
			Runtime.ValidateRefCounted (this);
			return Slider_GetRepeatRate (handle);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		public new static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public new static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Return orientation type.
		/// Or
		/// Set orientation type.
		/// </summary>
		public Orientation Orientation {
			get {
				return GetOrientation ();
			}
			set {
				SetOrientation (value);
			}
		}

		/// <summary>
		/// Return slider range.
		/// Or
		/// Set slider range maximum value (minimum value is always 0.)
		/// </summary>
		public float Range {
			get {
				return GetRange ();
			}
			set {
				SetRange (value);
			}
		}

		/// <summary>
		/// Return slider current value.
		/// Or
		/// Set slider current value.
		/// </summary>
		public float Value {
			get {
				return GetValue ();
			}
			set {
				SetValue (value);
			}
		}

		/// <summary>
		/// Return paging minimum repeat rate (number of events per second).
		/// Or
		/// Set paging minimum repeat rate (number of events per second).
		/// </summary>
		public float RepeatRate {
			get {
				return GetRepeatRate ();
			}
			set {
				SetRepeatRate (value);
			}
		}

		/// <summary>
		/// Return knob element.
		/// </summary>
		public BorderImage Knob {
			get {
				return GetKnob ();
			}
		}
	}
}
