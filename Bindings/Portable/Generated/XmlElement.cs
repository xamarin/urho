// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Generated using `sharpie urho`
// 
// XmlElement.cs
// 
// Copyright 2015 Xamarin Inc. All rights reserved.

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho.Resources
{
	/// <summary>
	/// Element in an XML file.
	/// </summary>
	public unsafe partial class XmlElement
	{
		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_XMLElement ();

		public XmlElement ()
		{
			Runtime.Validate (typeof(XmlElement));
			handle = XmlElement_XMLElement ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_XMLElement0 (ref Urho.Resources.XmlElement rhs);

		public XmlElement (Urho.Resources.XmlElement rhs)
		{
			Runtime.Validate (typeof(XmlElement));
			handle = XmlElement_XMLElement0 (ref rhs);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_RemoveChild (IntPtr handle, ref Urho.Resources.XmlElement element);

		/// <summary>
		/// Remove a child element. Return true if successful.
		/// </summary>
		public bool RemoveChild (Urho.Resources.XmlElement element)
		{
			Runtime.ValidateObject (this);
			return XmlElement_RemoveChild (handle, ref element);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_RemoveChild1 (IntPtr handle, string name);

		/// <summary>
		/// Remove a child element by name. Return true if successful.
		/// </summary>
		public bool RemoveChild (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_RemoveChild1 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_RemoveChildren (IntPtr handle, string name);

		/// <summary>
		/// Remove child elements of certain name, or all child elements if name is empty. Return true if successful.
		/// </summary>
		public bool RemoveChildren (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_RemoveChildren (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_RemoveAttribute (IntPtr handle, string name);

		/// <summary>
		/// Remove an attribute by name. Return true if successful.
		/// </summary>
		public bool RemoveAttribute (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_RemoveAttribute (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetValue (IntPtr handle, string value);

		/// <summary>
		/// Set the value for an inner node in the following format
		/// <node
		/// >value
		/// </node
		/// >.
		/// </summary>
		public bool SetValue (string value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetValue (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetAttribute (IntPtr handle, string name, string value);

		/// <summary>
		/// Set an attribute.
		/// </summary>
		public bool SetAttribute (string name, string value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetAttribute (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetAttribute2 (IntPtr handle, string value);

		/// <summary>
		/// Set an attribute. Only valid if it is an attribute only XPath query result.
		/// </summary>
		public bool SetAttribute (string value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetAttribute2 (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetBool (IntPtr handle, string name, bool value);

		/// <summary>
		/// Set a bool attribute.
		/// </summary>
		public bool SetBool (string name, bool value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetBool (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetBoundingBox (IntPtr handle, ref Urho.BoundingBox value);

		/// <summary>
		/// Set a BoundingBox attribute.
		/// </summary>
		public bool SetBoundingBox (Urho.BoundingBox value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetBoundingBox (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetBuffer (IntPtr handle, string name, void* data, uint size);

		/// <summary>
		/// Set a buffer attribute.
		/// </summary>
		public bool SetBuffer (string name, void* data, uint size)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetBuffer (handle, name, data, size);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetColor (IntPtr handle, string name, ref Urho.Color value);

		/// <summary>
		/// Set a color attribute.
		/// </summary>
		public bool SetColor (string name, Urho.Color value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetColor (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetFloat (IntPtr handle, string name, float value);

		/// <summary>
		/// Set a float attribute.
		/// </summary>
		public bool SetFloat (string name, float value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetFloat (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetDouble (IntPtr handle, string name, double value);

		/// <summary>
		/// Set a double attribute.
		/// </summary>
		public bool SetDouble (string name, double value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetDouble (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetUInt (IntPtr handle, string name, uint value);

		/// <summary>
		/// Set an unsigned integer attribute.
		/// </summary>
		public bool SetUInt (string name, uint value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetUInt (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetInt (IntPtr handle, string name, int value);

		/// <summary>
		/// Set an integer attribute.
		/// </summary>
		public bool SetInt (string name, int value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetInt (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetIntRect (IntPtr handle, string name, ref Urho.IntRect value);

		/// <summary>
		/// Set an IntRect attribute.
		/// </summary>
		public bool SetIntRect (string name, Urho.IntRect value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetIntRect (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetIntVector2 (IntPtr handle, string name, ref Urho.IntVector2 value);

		/// <summary>
		/// Set an IntVector2 attribute.
		/// </summary>
		public bool SetIntVector2 (string name, Urho.IntVector2 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetIntVector2 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetQuaternion (IntPtr handle, string name, ref Urho.Quaternion value);

		/// <summary>
		/// Set a quaternion attribute.
		/// </summary>
		public bool SetQuaternion (string name, Urho.Quaternion value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetQuaternion (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetString (IntPtr handle, string name, string value);

		/// <summary>
		/// Set a string attribute.
		/// </summary>
		public bool SetString (string name, string value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetString (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant0 (IntPtr handle, ref Vector3 value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (Vector3 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant0 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant1 (IntPtr handle, ref IntRect value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (IntRect value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant1 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant2 (IntPtr handle, ref Color value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (Color value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant2 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant3 (IntPtr handle, ref Vector2 value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (Vector2 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant3 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant4 (IntPtr handle, ref Vector4 value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (Vector4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant4 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant5 (IntPtr handle, ref IntVector2 value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (IntVector2 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant5 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant6 (IntPtr handle, ref Quaternion value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (Quaternion value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant6 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant7 (IntPtr handle, ref Matrix4 value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (Matrix4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant7 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant8 (IntPtr handle, ref Matrix3x4 value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (Matrix3x4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant8 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant9 (IntPtr handle, int value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (int value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant9 (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant10 (IntPtr handle, float value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (float value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant10 (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant11 (IntPtr handle, string value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (string value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant11 (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue0 (IntPtr handle, ref Vector3 value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (Vector3 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue0 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue1 (IntPtr handle, ref IntRect value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (IntRect value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue1 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue2 (IntPtr handle, ref Color value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (Color value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue2 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue3 (IntPtr handle, ref Vector2 value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (Vector2 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue3 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue4 (IntPtr handle, ref Vector4 value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (Vector4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue4 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue5 (IntPtr handle, ref IntVector2 value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (IntVector2 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue5 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue6 (IntPtr handle, ref Quaternion value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (Quaternion value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue6 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue7 (IntPtr handle, ref Matrix4 value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (Matrix4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue7 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue8 (IntPtr handle, ref Matrix3x4 value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (Matrix3x4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue8 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue9 (IntPtr handle, int value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (int value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue9 (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue10 (IntPtr handle, float value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (float value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue10 (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue11 (IntPtr handle, string value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (string value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue11 (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVector2 (IntPtr handle, string name, ref Urho.Vector2 value);

		/// <summary>
		/// Set a Vector2 attribute.
		/// </summary>
		public bool SetVector2 (string name, Urho.Vector2 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVector2 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVector3 (IntPtr handle, string name, ref Urho.Vector3 value);

		/// <summary>
		/// Set a Vector3 attribute.
		/// </summary>
		public bool SetVector3 (string name, Urho.Vector3 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVector3 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVector4 (IntPtr handle, string name, ref Urho.Vector4 value);

		/// <summary>
		/// Set a Vector4 attribute.
		/// </summary>
		public bool SetVector4 (string name, Urho.Vector4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVector4 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant0 (IntPtr handle, string name, ref Vector3 value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, Vector3 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant0 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant1 (IntPtr handle, string name, ref IntRect value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, IntRect value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant1 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant2 (IntPtr handle, string name, ref Color value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, Color value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant2 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant3 (IntPtr handle, string name, ref Vector2 value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, Vector2 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant3 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant4 (IntPtr handle, string name, ref Vector4 value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, Vector4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant4 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant5 (IntPtr handle, string name, ref IntVector2 value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, IntVector2 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant5 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant6 (IntPtr handle, string name, ref Quaternion value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, Quaternion value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant6 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant7 (IntPtr handle, string name, ref Matrix4 value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, Matrix4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant7 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant8 (IntPtr handle, string name, ref Matrix3x4 value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, Matrix3x4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant8 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant9 (IntPtr handle, string name, int value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, int value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant9 (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant10 (IntPtr handle, string name, float value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, float value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant10 (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant11 (IntPtr handle, string name, string value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, string value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant11 (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetMatrix3x4 (IntPtr handle, string name, ref Urho.Matrix3x4 value);

		/// <summary>
		/// Set a Matrix3x4 attribute.
		/// </summary>
		public bool SetMatrix3x4 (string name, Urho.Matrix3x4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetMatrix3x4 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetMatrix4 (IntPtr handle, string name, ref Urho.Matrix4 value);

		/// <summary>
		/// Set a Matrix4 attribute.
		/// </summary>
		public bool SetMatrix4 (string name, Urho.Matrix4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetMatrix4 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_IsNull (IntPtr handle);

		/// <summary>
		/// Return whether does not refer to an element or an XPath node.
		/// </summary>
		private bool IsNull ()
		{
			Runtime.ValidateObject (this);
			return XmlElement_IsNull (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_NotNull (IntPtr handle);

		/// <summary>
		/// Return whether refers to an element or an XPath node.
		/// </summary>
		public bool NotNull ()
		{
			Runtime.ValidateObject (this);
			return XmlElement_NotNull (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_GetName (IntPtr handle);

		/// <summary>
		/// Return element name (or attribute name if it is an attribute only XPath query result).
		/// </summary>
		private string GetName ()
		{
			Runtime.ValidateObject (this);
			return Marshal.PtrToStringAnsi (XmlElement_GetName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_HasChild (IntPtr handle, string name);

		/// <summary>
		/// Return whether has a child element.
		/// </summary>
		public bool HasChild (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_HasChild (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint XmlElement_GetNumAttributes (IntPtr handle);

		/// <summary>
		/// Return number of attributes.
		/// </summary>
		private uint GetNumAttributes ()
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetNumAttributes (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_HasAttribute (IntPtr handle, string name);

		/// <summary>
		/// Return whether has an attribute.
		/// </summary>
		public bool HasAttribute (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_HasAttribute (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_GetValue (IntPtr handle);

		/// <summary>
		/// Return inner value, or empty if missing for nodes like
		/// <node
		/// >value
		/// </node
		/// >
		/// </summary>
		private string GetValue ()
		{
			Runtime.ValidateObject (this);
			return Marshal.PtrToStringAnsi (XmlElement_GetValue (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_GetAttribute (IntPtr handle, string name);

		/// <summary>
		/// Return attribute, or empty if missing.
		/// </summary>
		public string GetAttribute (string name)
		{
			Runtime.ValidateObject (this);
			return Marshal.PtrToStringAnsi (XmlElement_GetAttribute (handle, name));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_GetAttributeLower (IntPtr handle, string name);

		/// <summary>
		/// Return attribute in lowercase, or empty if missing.
		/// </summary>
		public string GetAttributeLower (string name)
		{
			Runtime.ValidateObject (this);
			return Marshal.PtrToStringAnsi (XmlElement_GetAttributeLower (handle, name));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_GetAttributeUpper (IntPtr handle, string name);

		/// <summary>
		/// Return attribute in lowercase, or empty if missing.
		/// </summary>
		public string GetAttributeUpper (string name)
		{
			Runtime.ValidateObject (this);
			return Marshal.PtrToStringAnsi (XmlElement_GetAttributeUpper (handle, name));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_GetBool (IntPtr handle, string name);

		/// <summary>
		/// Return bool attribute, or false if missing.
		/// </summary>
		public bool GetBool (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetBool (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_GetBuffer (IntPtr handle, string name, IntPtr dest, uint size);

		/// <summary>
		/// Copy buffer attribute into a supplied buffer. Return true if buffer was large enough.
		/// </summary>
		public bool GetBuffer (string name, IntPtr dest, uint size)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetBuffer (handle, name, dest, size);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern BoundingBox XmlElement_GetBoundingBox (IntPtr handle);

		/// <summary>
		/// Return bounding box attribute, or empty if missing.
		/// </summary>
		private BoundingBox GetBoundingBox ()
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetBoundingBox (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Color XmlElement_GetColor (IntPtr handle, string name);

		/// <summary>
		/// Return a color attribute, or default if missing.
		/// </summary>
		public Color GetColor (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetColor (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float XmlElement_GetFloat (IntPtr handle, string name);

		/// <summary>
		/// Return a float attribute, or zero if missing.
		/// </summary>
		public float GetFloat (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetFloat (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern double XmlElement_GetDouble (IntPtr handle, string name);

		/// <summary>
		/// Return a double attribute, or zero if missing.
		/// </summary>
		public double GetDouble (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetDouble (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint XmlElement_GetUInt (IntPtr handle, string name);

		/// <summary>
		/// Return an unsigned integer attribute, or zero if missing.
		/// </summary>
		public uint GetUInt (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetUInt (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int XmlElement_GetInt (IntPtr handle, string name);

		/// <summary>
		/// Return an integer attribute, or zero if missing.
		/// </summary>
		public int GetInt (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetInt (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntRect XmlElement_GetIntRect (IntPtr handle, string name);

		/// <summary>
		/// Return an IntRect attribute, or default if missing.
		/// </summary>
		public IntRect GetIntRect (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetIntRect (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntVector2 XmlElement_GetIntVector2 (IntPtr handle, string name);

		/// <summary>
		/// Return an IntVector2 attribute, or default if missing.
		/// </summary>
		public IntVector2 GetIntVector2 (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetIntVector2 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Rect XmlElement_GetRect (IntPtr handle, string name);

		/// <summary>
		/// Return a Rect attribute, or default if missing.
		/// </summary>
		public Rect GetRect (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetRect (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Quaternion XmlElement_GetQuaternion (IntPtr handle, string name);

		/// <summary>
		/// Return a quaternion attribute, or default if missing.
		/// </summary>
		public Quaternion GetQuaternion (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetQuaternion (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Variant XmlElement_GetVariant (IntPtr handle);

		/// <summary>
		/// Return a variant attribute, or empty if missing.
		/// </summary>
		private Variant GetVariant ()
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetVariant (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Variant XmlElement_GetVariantValue (IntPtr handle, VariantType type);

		/// <summary>
		/// Return a variant attribute with static type.
		/// </summary>
		public Variant GetVariantValue (VariantType type)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetVariantValue (handle, type);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern ResourceRef XmlElement_GetResourceRef (IntPtr handle);

		/// <summary>
		/// Return a resource reference attribute, or empty if missing.
		/// </summary>
		private ResourceRef GetResourceRef ()
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetResourceRef (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern ResourceRefList XmlElement_GetResourceRefList (IntPtr handle);

		/// <summary>
		/// Return a resource reference list attribute, or empty if missing.
		/// </summary>
		private ResourceRefList GetResourceRefList ()
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetResourceRefList (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Vector2 XmlElement_GetVector2 (IntPtr handle, string name);

		/// <summary>
		/// Return a Vector2 attribute, or zero vector if missing.
		/// </summary>
		public Vector2 GetVector2 (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetVector2 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Vector3 XmlElement_GetVector3 (IntPtr handle, string name);

		/// <summary>
		/// Return a Vector3 attribute, or zero vector if missing.
		/// </summary>
		public Vector3 GetVector3 (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetVector3 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Vector4 XmlElement_GetVector4 (IntPtr handle, string name);

		/// <summary>
		/// Return a Vector4 attribute, or zero vector if missing.
		/// </summary>
		public Vector4 GetVector4 (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetVector4 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Vector4 XmlElement_GetVector (IntPtr handle, string name);

		/// <summary>
		/// Return any Vector attribute as Vector4. Missing coordinates will be zero.
		/// </summary>
		public Vector4 GetVector (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetVector (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Variant XmlElement_GetVectorVariant (IntPtr handle, string name);

		/// <summary>
		/// Return a float, Vector or Matrix attribute as Variant.
		/// </summary>
		public Variant GetVectorVariant (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetVectorVariant (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Matrix3 XmlElement_GetMatrix3 (IntPtr handle, string name);

		/// <summary>
		/// Return a Matrix3 attribute, or zero matrix if missing.
		/// </summary>
		public Matrix3 GetMatrix3 (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetMatrix3 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Matrix3x4 XmlElement_GetMatrix3x4 (IntPtr handle, string name);

		/// <summary>
		/// Return a Matrix3x4 attribute, or zero matrix if missing.
		/// </summary>
		public Matrix3x4 GetMatrix3x4 (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetMatrix3x4 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Matrix4 XmlElement_GetMatrix4 (IntPtr handle, string name);

		/// <summary>
		/// Return a Matrix4 attribute, or zero matrix if missing.
		/// </summary>
		public Matrix4 GetMatrix4 (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetMatrix4 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_GetFile (IntPtr handle);

		/// <summary>
		/// Return XML file.
		/// </summary>
		private Urho.Resources.XmlFile GetFile ()
		{
			Runtime.ValidateObject (this);
			return Runtime.LookupObject<Urho.Resources.XmlFile> (XmlElement_GetFile (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern XPathResultSet* XmlElement_GetXPathResultSet (IntPtr handle);

		/// <summary>
		/// Return XPath query result set.
		/// </summary>
		private XPathResultSet* GetXPathResultSet ()
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetXPathResultSet (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint XmlElement_GetXPathResultIndex (IntPtr handle);

		/// <summary>
		/// Return current result index.
		/// </summary>
		private uint GetXPathResultIndex ()
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetXPathResultIndex (handle);
		}

		/// <summary>
		/// Return whether does not refer to an element or an XPath node.
		/// </summary>
		public bool Null {
			get {
				return IsNull ();
			}
		}

		/// <summary>
		/// Return element name (or attribute name if it is an attribute only XPath query result).
		/// </summary>
		public string Name {
			get {
				return GetName ();
			}
		}

		/// <summary>
		/// Return number of attributes.
		/// </summary>
		public uint NumAttributes {
			get {
				return GetNumAttributes ();
			}
		}

		/// <summary>
		/// Return inner value, or empty if missing for nodes like
		/// <node
		/// >value
		/// </node
		/// >
		/// </summary>
		public string Value {
			get {
				return GetValue ();
			}
		}

		/// <summary>
		/// Return bounding box attribute, or empty if missing.
		/// </summary>
		public BoundingBox BoundingBox {
			get {
				return GetBoundingBox ();
			}
		}

		/// <summary>
		/// Return a variant attribute, or empty if missing.
		/// </summary>
		public Variant Variant {
			get {
				return GetVariant ();
			}
		}

		/// <summary>
		/// Return a resource reference attribute, or empty if missing.
		/// </summary>
		public ResourceRef ResourceRef {
			get {
				return GetResourceRef ();
			}
		}

		/// <summary>
		/// Return a resource reference list attribute, or empty if missing.
		/// </summary>
		public ResourceRefList ResourceRefList {
			get {
				return GetResourceRefList ();
			}
		}

		/// <summary>
		/// Return XML file.
		/// </summary>
		public Urho.Resources.XmlFile File {
			get {
				return GetFile ();
			}
		}

		/// <summary>
		/// Return XPath query result set.
		/// </summary>
		public XPathResultSet* XPathResultSet {
			get {
				return GetXPathResultSet ();
			}
		}

		/// <summary>
		/// Return current result index.
		/// </summary>
		public uint XPathResultIndex {
			get {
				return GetXPathResultIndex ();
			}
		}
	}
}
