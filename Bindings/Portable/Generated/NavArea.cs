// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Generated using `sharpie urho`
// 
// NavArea.cs
// 
// Copyright 2015 Xamarin Inc. All rights reserved.

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho.Navigation
{
	/// <summary>
	/// Construct.
	/// </summary>
	public unsafe partial class NavArea : Component
	{
		public NavArea (IntPtr handle) : base (handle)
		{
		}

		protected NavArea (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int NavArea_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (NavArea_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr NavArea_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (NavArea_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int NavArea_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(NavArea));
			return new StringHash (NavArea_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr NavArea_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(NavArea));
			return Marshal.PtrToStringAnsi (NavArea_GetTypeNameStatic ());
		}

		public NavArea () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr NavArea_NavArea (IntPtr param1);

		public NavArea (Context param1) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(NavArea));
			handle = NavArea_NavArea ((object)param1 == null ? IntPtr.Zero : param1.Handle);
			Runtime.RegisterObject (this);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void NavArea_RegisterObject (IntPtr param1);

		/// <summary>
		/// Register object factory and attributes.
		/// </summary>
		public new static void RegisterObject (Context param1)
		{
			Runtime.Validate (typeof(NavArea));
			NavArea_RegisterObject ((object)param1 == null ? IntPtr.Zero : param1.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void NavArea_DrawDebugGeometry (IntPtr handle, IntPtr debug, bool depthTest);

		/// <summary>
		/// Render debug geometry for the bounds.
		/// </summary>
		public override void DrawDebugGeometry (DebugRenderer debug, bool depthTest)
		{
			Runtime.ValidateRefCounted (this);
			NavArea_DrawDebugGeometry (handle, (object)debug == null ? IntPtr.Zero : debug.Handle, depthTest);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint NavArea_GetAreaID (IntPtr handle);

		/// <summary>
		/// Get the area id for this volume.
		/// </summary>
		private uint GetAreaID ()
		{
			Runtime.ValidateRefCounted (this);
			return NavArea_GetAreaID (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void NavArea_SetAreaID (IntPtr handle, uint newID);

		/// <summary>
		/// Set the area id for this volume.
		/// </summary>
		private void SetAreaID (uint newID)
		{
			Runtime.ValidateRefCounted (this);
			NavArea_SetAreaID (handle, newID);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern BoundingBox NavArea_GetBoundingBox (IntPtr handle);

		/// <summary>
		/// Get the bounding box of this navigation area, in local space.
		/// </summary>
		private BoundingBox GetBoundingBox ()
		{
			Runtime.ValidateRefCounted (this);
			return NavArea_GetBoundingBox (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void NavArea_SetBoundingBox (IntPtr handle, ref Urho.BoundingBox bnds);

		/// <summary>
		/// Set the bounding box of this area, in local space.
		/// </summary>
		public void SetBoundingBox (Urho.BoundingBox bnds)
		{
			Runtime.ValidateRefCounted (this);
			NavArea_SetBoundingBox (handle, ref bnds);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern BoundingBox NavArea_GetWorldBoundingBox (IntPtr handle);

		/// <summary>
		/// Get the bounds of this navigation area in world space.
		/// </summary>
		private BoundingBox GetWorldBoundingBox ()
		{
			Runtime.ValidateRefCounted (this);
			return NavArea_GetWorldBoundingBox (handle);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		public new static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public new static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Get the area id for this volume.
		/// Or
		/// Set the area id for this volume.
		/// </summary>
		public uint AreaID {
			get {
				return GetAreaID ();
			}
			set {
				SetAreaID (value);
			}
		}

		/// <summary>
		/// Get the bounding box of this navigation area, in local space.
		/// </summary>
		public BoundingBox BoundingBox {
			get {
				return GetBoundingBox ();
			}
		}

		/// <summary>
		/// Get the bounds of this navigation area in world space.
		/// </summary>
		public BoundingBox WorldBoundingBox {
			get {
				return GetWorldBoundingBox ();
			}
		}
	}
}
