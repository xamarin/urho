// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Generated using `sharpie urho`
// 
// BillboardSet.cs
// 
// Copyright 2015 Xamarin Inc. All rights reserved.

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho
{
	/// <summary>
	/// %Billboard component.
	/// </summary>
	public unsafe partial class BillboardSet : Drawable
	{
		public BillboardSet (IntPtr handle) : base (handle)
		{
		}

		protected BillboardSet (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int BillboardSet_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (BillboardSet_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr BillboardSet_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (BillboardSet_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int BillboardSet_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(BillboardSet));
			return new StringHash (BillboardSet_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr BillboardSet_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(BillboardSet));
			return Marshal.PtrToStringAnsi (BillboardSet_GetTypeNameStatic ());
		}

		public BillboardSet () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr BillboardSet_BillboardSet (IntPtr context);

		public BillboardSet (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(BillboardSet));
			handle = BillboardSet_BillboardSet ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void BillboardSet_RegisterObject (IntPtr context);

		/// <summary>
		/// Register object factory.
		/// </summary>
		public new static void RegisterObject (Context context)
		{
			Runtime.Validate (typeof(BillboardSet));
			BillboardSet_RegisterObject ((object)context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern UpdateGeometryType BillboardSet_GetUpdateGeometryType (IntPtr handle);

		/// <summary>
		/// Return whether a geometry update is necessary, and if it can happen in a worker thread.
		/// </summary>
		private UpdateGeometryType GetUpdateGeometryType ()
		{
			Runtime.ValidateRefCounted (this);
			return BillboardSet_GetUpdateGeometryType (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void BillboardSet_SetMaterial (IntPtr handle, IntPtr material);

		/// <summary>
		/// Set material.
		/// </summary>
		private void SetMaterial (Material material)
		{
			Runtime.ValidateRefCounted (this);
			BillboardSet_SetMaterial (handle, (object)material == null ? IntPtr.Zero : material.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void BillboardSet_SetNumBillboards (IntPtr handle, uint num);

		/// <summary>
		/// Set number of billboards.
		/// </summary>
		private void SetNumBillboards (uint num)
		{
			Runtime.ValidateRefCounted (this);
			BillboardSet_SetNumBillboards (handle, num);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void BillboardSet_SetRelative (IntPtr handle, bool enable);

		/// <summary>
		/// Set whether billboards are relative to the scene node. Default true.
		/// </summary>
		private void SetRelative (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			BillboardSet_SetRelative (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void BillboardSet_SetScaled (IntPtr handle, bool enable);

		/// <summary>
		/// Set whether scene node scale affects billboards' size. Default true.
		/// </summary>
		private void SetScaled (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			BillboardSet_SetScaled (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void BillboardSet_SetSorted (IntPtr handle, bool enable);

		/// <summary>
		/// Set whether billboards are sorted by distance. Default false.
		/// </summary>
		private void SetSorted (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			BillboardSet_SetSorted (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void BillboardSet_SetFixedScreenSize (IntPtr handle, bool enable);

		/// <summary>
		/// Set whether billboards have fixed size on screen (measured in pixels) regardless of distance to camera. Default false.
		/// </summary>
		private void SetFixedScreenSize (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			BillboardSet_SetFixedScreenSize (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void BillboardSet_SetFaceCameraMode (IntPtr handle, FaceCameraMode mode);

		/// <summary>
		/// Set how the billboards should rotate in relation to the camera. Default is to follow camera rotation on all axes (FC_ROTATE_XYZ.)
		/// </summary>
		private void SetFaceCameraMode (FaceCameraMode mode)
		{
			Runtime.ValidateRefCounted (this);
			BillboardSet_SetFaceCameraMode (handle, mode);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void BillboardSet_SetMinAngle (IntPtr handle, float angle);

		/// <summary>
		/// Set minimal angle between billboard normal and look-at direction.
		/// </summary>
		private void SetMinAngle (float angle)
		{
			Runtime.ValidateRefCounted (this);
			BillboardSet_SetMinAngle (handle, angle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void BillboardSet_SetAnimationLodBias (IntPtr handle, float bias);

		/// <summary>
		/// Set animation LOD bias.
		/// </summary>
		private void SetAnimationLodBias (float bias)
		{
			Runtime.ValidateRefCounted (this);
			BillboardSet_SetAnimationLodBias (handle, bias);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void BillboardSet_Commit (IntPtr handle);

		/// <summary>
		/// Mark for bounding box and vertex buffer update. Call after modifying the billboards.
		/// </summary>
		public void Commit ()
		{
			Runtime.ValidateRefCounted (this);
			BillboardSet_Commit (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr BillboardSet_GetMaterial (IntPtr handle);

		/// <summary>
		/// Return material.
		/// </summary>
		private Material GetMaterial ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<Material> (BillboardSet_GetMaterial (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint BillboardSet_GetNumBillboards (IntPtr handle);

		/// <summary>
		/// Return number of billboards.
		/// </summary>
		private uint GetNumBillboards ()
		{
			Runtime.ValidateRefCounted (this);
			return BillboardSet_GetNumBillboards (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Billboard* BillboardSet_GetBillboard (IntPtr handle, uint index);

		/// <summary>
		/// Return billboard by index.
		/// </summary>
		public Billboard* GetBillboard (uint index)
		{
			Runtime.ValidateRefCounted (this);
			return BillboardSet_GetBillboard (handle, index);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool BillboardSet_IsRelative (IntPtr handle);

		/// <summary>
		/// Return whether billboards are relative to the scene node.
		/// </summary>
		private bool IsRelative ()
		{
			Runtime.ValidateRefCounted (this);
			return BillboardSet_IsRelative (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool BillboardSet_IsScaled (IntPtr handle);

		/// <summary>
		/// Return whether scene node scale affects billboards' size.
		/// </summary>
		private bool IsScaled ()
		{
			Runtime.ValidateRefCounted (this);
			return BillboardSet_IsScaled (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool BillboardSet_IsSorted (IntPtr handle);

		/// <summary>
		/// Return whether billboards are sorted.
		/// </summary>
		private bool IsSorted ()
		{
			Runtime.ValidateRefCounted (this);
			return BillboardSet_IsSorted (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool BillboardSet_IsFixedScreenSize (IntPtr handle);

		/// <summary>
		/// Return whether billboards are fixed screen size.
		/// </summary>
		private bool IsFixedScreenSize ()
		{
			Runtime.ValidateRefCounted (this);
			return BillboardSet_IsFixedScreenSize (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern FaceCameraMode BillboardSet_GetFaceCameraMode (IntPtr handle);

		/// <summary>
		/// Return how the billboards rotate in relation to the camera.
		/// </summary>
		private FaceCameraMode GetFaceCameraMode ()
		{
			Runtime.ValidateRefCounted (this);
			return BillboardSet_GetFaceCameraMode (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float BillboardSet_GetMinAngle (IntPtr handle);

		/// <summary>
		/// Return minimal angle between billboard normal and look-at direction.
		/// </summary>
		private float GetMinAngle ()
		{
			Runtime.ValidateRefCounted (this);
			return BillboardSet_GetMinAngle (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float BillboardSet_GetAnimationLodBias (IntPtr handle);

		/// <summary>
		/// Return animation LOD bias.
		/// </summary>
		private float GetAnimationLodBias ()
		{
			Runtime.ValidateRefCounted (this);
			return BillboardSet_GetAnimationLodBias (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern ResourceRef BillboardSet_GetMaterialAttr (IntPtr handle);

		/// <summary>
		/// Return material attribute.
		/// </summary>
		private ResourceRef GetMaterialAttr ()
		{
			Runtime.ValidateRefCounted (this);
			return BillboardSet_GetMaterialAttr (handle);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		public new static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public new static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Return whether a geometry update is necessary, and if it can happen in a worker thread.
		/// </summary>
		public override UpdateGeometryType UpdateGeometryType {
			get {
				return GetUpdateGeometryType ();
			}
		}

		/// <summary>
		/// Return material.
		/// Or
		/// Set material.
		/// </summary>
		public Material Material {
			get {
				return GetMaterial ();
			}
			set {
				SetMaterial (value);
			}
		}

		/// <summary>
		/// Return number of billboards.
		/// Or
		/// Set number of billboards.
		/// </summary>
		public uint NumBillboards {
			get {
				return GetNumBillboards ();
			}
			set {
				SetNumBillboards (value);
			}
		}

		/// <summary>
		/// Return whether billboards are relative to the scene node.
		/// Or
		/// Set whether billboards are relative to the scene node. Default true.
		/// </summary>
		public bool Relative {
			get {
				return IsRelative ();
			}
			set {
				SetRelative (value);
			}
		}

		/// <summary>
		/// Return whether scene node scale affects billboards' size.
		/// Or
		/// Set whether scene node scale affects billboards' size. Default true.
		/// </summary>
		public bool Scaled {
			get {
				return IsScaled ();
			}
			set {
				SetScaled (value);
			}
		}

		/// <summary>
		/// Return whether billboards are sorted.
		/// Or
		/// Set whether billboards are sorted by distance. Default false.
		/// </summary>
		public bool Sorted {
			get {
				return IsSorted ();
			}
			set {
				SetSorted (value);
			}
		}

		/// <summary>
		/// Return whether billboards are fixed screen size.
		/// Or
		/// Set whether billboards have fixed size on screen (measured in pixels) regardless of distance to camera. Default false.
		/// </summary>
		public bool FixedScreenSize {
			get {
				return IsFixedScreenSize ();
			}
			set {
				SetFixedScreenSize (value);
			}
		}

		/// <summary>
		/// Return how the billboards rotate in relation to the camera.
		/// Or
		/// Set how the billboards should rotate in relation to the camera. Default is to follow camera rotation on all axes (FC_ROTATE_XYZ.)
		/// </summary>
		public FaceCameraMode FaceCameraMode {
			get {
				return GetFaceCameraMode ();
			}
			set {
				SetFaceCameraMode (value);
			}
		}

		/// <summary>
		/// Return minimal angle between billboard normal and look-at direction.
		/// Or
		/// Set minimal angle between billboard normal and look-at direction.
		/// </summary>
		public float MinAngle {
			get {
				return GetMinAngle ();
			}
			set {
				SetMinAngle (value);
			}
		}

		/// <summary>
		/// Return animation LOD bias.
		/// Or
		/// Set animation LOD bias.
		/// </summary>
		public float AnimationLodBias {
			get {
				return GetAnimationLodBias ();
			}
			set {
				SetAnimationLodBias (value);
			}
		}

		/// <summary>
		/// Return material attribute.
		/// </summary>
		public ResourceRef MaterialAttr {
			get {
				return GetMaterialAttr ();
			}
		}
	}
}
