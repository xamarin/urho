// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Generated using `sharpie urho`
// 
// Animation.cs
// 
// Copyright 2015 Xamarin Inc. All rights reserved.

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho
{
	/// <summary>
	/// Skeletal animation resource.
	/// </summary>
	public unsafe partial class Animation : Resource
	{
		public Animation (IntPtr handle) : base (handle)
		{
		}

		protected Animation (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Animation_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (Animation_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Animation_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (Animation_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Animation_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(Animation));
			return new StringHash (Animation_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Animation_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(Animation));
			return Marshal.PtrToStringAnsi (Animation_GetTypeNameStatic ());
		}

		public Animation () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Animation_Animation (IntPtr context);

		public Animation (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(Animation));
			handle = Animation_Animation ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Animation_RegisterObject (IntPtr context);

		/// <summary>
		/// Register object factory.
		/// </summary>
		public static void RegisterObject (Context context)
		{
			Runtime.Validate (typeof(Animation));
			Animation_RegisterObject ((object)context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Animation_BeginLoad (IntPtr handle, IntPtr source);

		/// <summary>
		/// Load resource from stream. May be called from a worker thread. Return true if successful.
		/// </summary>
		public override bool BeginLoad (File source)
		{
			Runtime.ValidateRefCounted (this);
			return Animation_BeginLoad (handle, (object)source == null ? IntPtr.Zero : source.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Animation_Save (IntPtr handle, IntPtr dest);

		/// <summary>
		/// Save resource. Return true if successful.
		/// </summary>
		public override bool Save (File dest)
		{
			Runtime.ValidateRefCounted (this);
			return Animation_Save (handle, (object)dest == null ? IntPtr.Zero : dest.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Animation_SetAnimationName (IntPtr handle, string name);

		/// <summary>
		/// Set animation name.
		/// </summary>
		private void SetAnimationName (string name)
		{
			Runtime.ValidateRefCounted (this);
			Animation_SetAnimationName (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Animation_SetLength (IntPtr handle, float length);

		/// <summary>
		/// Set animation length.
		/// </summary>
		private void SetLength (float length)
		{
			Runtime.ValidateRefCounted (this);
			Animation_SetLength (handle, length);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern AnimationTrack* Animation_CreateTrack (IntPtr handle, string name);

		/// <summary>
		/// Create and return a track by name. If track by same name already exists, returns the existing.
		/// </summary>
		public AnimationTrack* CreateTrack (string name)
		{
			Runtime.ValidateRefCounted (this);
			return Animation_CreateTrack (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Animation_RemoveTrack (IntPtr handle, string name);

		/// <summary>
		/// Remove a track by name. Return true if was found and removed successfully. This is unsafe if the animation is currently used in playback.
		/// </summary>
		public bool RemoveTrack (string name)
		{
			Runtime.ValidateRefCounted (this);
			return Animation_RemoveTrack (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Animation_RemoveAllTracks (IntPtr handle);

		/// <summary>
		/// Remove all tracks. This is unsafe if the animation is currently used in playback.
		/// </summary>
		public void RemoveAllTracks ()
		{
			Runtime.ValidateRefCounted (this);
			Animation_RemoveAllTracks (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Animation_AddTrigger0 (IntPtr handle, float time, bool timeIsNormalized, ref Vector3 data);

		/// <summary>
		/// Add a trigger point.
		/// </summary>
		public void AddTrigger (float time, bool timeIsNormalized, Vector3 data)
		{
			Runtime.ValidateRefCounted (this);
			Animation_AddTrigger0 (handle, time, timeIsNormalized, ref data);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Animation_AddTrigger1 (IntPtr handle, float time, bool timeIsNormalized, ref IntRect data);

		/// <summary>
		/// Add a trigger point.
		/// </summary>
		public void AddTrigger (float time, bool timeIsNormalized, IntRect data)
		{
			Runtime.ValidateRefCounted (this);
			Animation_AddTrigger1 (handle, time, timeIsNormalized, ref data);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Animation_AddTrigger2 (IntPtr handle, float time, bool timeIsNormalized, ref Color data);

		/// <summary>
		/// Add a trigger point.
		/// </summary>
		public void AddTrigger (float time, bool timeIsNormalized, Color data)
		{
			Runtime.ValidateRefCounted (this);
			Animation_AddTrigger2 (handle, time, timeIsNormalized, ref data);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Animation_AddTrigger3 (IntPtr handle, float time, bool timeIsNormalized, ref Vector2 data);

		/// <summary>
		/// Add a trigger point.
		/// </summary>
		public void AddTrigger (float time, bool timeIsNormalized, Vector2 data)
		{
			Runtime.ValidateRefCounted (this);
			Animation_AddTrigger3 (handle, time, timeIsNormalized, ref data);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Animation_AddTrigger4 (IntPtr handle, float time, bool timeIsNormalized, ref Vector4 data);

		/// <summary>
		/// Add a trigger point.
		/// </summary>
		public void AddTrigger (float time, bool timeIsNormalized, Vector4 data)
		{
			Runtime.ValidateRefCounted (this);
			Animation_AddTrigger4 (handle, time, timeIsNormalized, ref data);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Animation_AddTrigger5 (IntPtr handle, float time, bool timeIsNormalized, ref IntVector2 data);

		/// <summary>
		/// Add a trigger point.
		/// </summary>
		public void AddTrigger (float time, bool timeIsNormalized, IntVector2 data)
		{
			Runtime.ValidateRefCounted (this);
			Animation_AddTrigger5 (handle, time, timeIsNormalized, ref data);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Animation_AddTrigger6 (IntPtr handle, float time, bool timeIsNormalized, ref Quaternion data);

		/// <summary>
		/// Add a trigger point.
		/// </summary>
		public void AddTrigger (float time, bool timeIsNormalized, Quaternion data)
		{
			Runtime.ValidateRefCounted (this);
			Animation_AddTrigger6 (handle, time, timeIsNormalized, ref data);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Animation_AddTrigger7 (IntPtr handle, float time, bool timeIsNormalized, ref Matrix4 data);

		/// <summary>
		/// Add a trigger point.
		/// </summary>
		public void AddTrigger (float time, bool timeIsNormalized, Matrix4 data)
		{
			Runtime.ValidateRefCounted (this);
			Animation_AddTrigger7 (handle, time, timeIsNormalized, ref data);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Animation_AddTrigger8 (IntPtr handle, float time, bool timeIsNormalized, ref Matrix3x4 data);

		/// <summary>
		/// Add a trigger point.
		/// </summary>
		public void AddTrigger (float time, bool timeIsNormalized, Matrix3x4 data)
		{
			Runtime.ValidateRefCounted (this);
			Animation_AddTrigger8 (handle, time, timeIsNormalized, ref data);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Animation_AddTrigger9 (IntPtr handle, float time, bool timeIsNormalized, int data);

		/// <summary>
		/// Add a trigger point.
		/// </summary>
		public void AddTrigger (float time, bool timeIsNormalized, int data)
		{
			Runtime.ValidateRefCounted (this);
			Animation_AddTrigger9 (handle, time, timeIsNormalized, data);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Animation_AddTrigger10 (IntPtr handle, float time, bool timeIsNormalized, float data);

		/// <summary>
		/// Add a trigger point.
		/// </summary>
		public void AddTrigger (float time, bool timeIsNormalized, float data)
		{
			Runtime.ValidateRefCounted (this);
			Animation_AddTrigger10 (handle, time, timeIsNormalized, data);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Animation_AddTrigger11 (IntPtr handle, float time, bool timeIsNormalized, string data);

		/// <summary>
		/// Add a trigger point.
		/// </summary>
		public void AddTrigger (float time, bool timeIsNormalized, string data)
		{
			Runtime.ValidateRefCounted (this);
			Animation_AddTrigger11 (handle, time, timeIsNormalized, data);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Animation_RemoveTrigger (IntPtr handle, uint index);

		/// <summary>
		/// Remove a trigger point by index.
		/// </summary>
		public void RemoveTrigger (uint index)
		{
			Runtime.ValidateRefCounted (this);
			Animation_RemoveTrigger (handle, index);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Animation_RemoveAllTriggers (IntPtr handle);

		/// <summary>
		/// Remove all trigger points.
		/// </summary>
		public void RemoveAllTriggers ()
		{
			Runtime.ValidateRefCounted (this);
			Animation_RemoveAllTriggers (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Animation_SetNumTriggers (IntPtr handle, uint num);

		/// <summary>
		/// Resize trigger point vector.
		/// </summary>
		private void SetNumTriggers (uint num)
		{
			Runtime.ValidateRefCounted (this);
			Animation_SetNumTriggers (handle, num);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Animation_Clone (IntPtr handle, string cloneName);

		/// <summary>
		/// Clone the animation.
		/// </summary>
		public Animation Clone (string cloneName)
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupRefCounted<Animation> (Animation_Clone (handle, cloneName));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Animation_GetAnimationName (IntPtr handle);

		/// <summary>
		/// Return animation name.
		/// </summary>
		private string GetAnimationName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (Animation_GetAnimationName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Animation_GetAnimationNameHash (IntPtr handle);

		/// <summary>
		/// Return animation name hash.
		/// </summary>
		private StringHash GetAnimationNameHash ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (Animation_GetAnimationNameHash (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float Animation_GetLength (IntPtr handle);

		/// <summary>
		/// Return animation length.
		/// </summary>
		private float GetLength ()
		{
			Runtime.ValidateRefCounted (this);
			return Animation_GetLength (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint Animation_GetNumTracks (IntPtr handle);

		/// <summary>
		/// Return number of animation tracks.
		/// </summary>
		private uint GetNumTracks ()
		{
			Runtime.ValidateRefCounted (this);
			return Animation_GetNumTracks (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern AnimationTrack* Animation_GetTrack (IntPtr handle, string name);

		/// <summary>
		/// Return animation track by name.
		/// </summary>
		public AnimationTrack* GetTrack (string name)
		{
			Runtime.ValidateRefCounted (this);
			return Animation_GetTrack (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern AnimationTrack* Animation_GetTrack0 (IntPtr handle, int nameHash);

		/// <summary>
		/// Return animation track by name hash.
		/// </summary>
		public AnimationTrack* GetTrack (StringHash nameHash)
		{
			Runtime.ValidateRefCounted (this);
			return Animation_GetTrack0 (handle, nameHash.Code);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint Animation_GetNumTriggers (IntPtr handle);

		/// <summary>
		/// Return number of animation trigger points.
		/// </summary>
		private uint GetNumTriggers ()
		{
			Runtime.ValidateRefCounted (this);
			return Animation_GetNumTriggers (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern AnimationTriggerPoint* Animation_GetTrigger (IntPtr handle, uint index);

		/// <summary>
		/// Return a trigger point by index.
		/// </summary>
		public AnimationTriggerPoint* GetTrigger (uint index)
		{
			Runtime.ValidateRefCounted (this);
			return Animation_GetTrigger (handle, index);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		public new static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public new static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Return animation name.
		/// Or
		/// Set animation name.
		/// </summary>
		public string AnimationName {
			get {
				return GetAnimationName ();
			}
			set {
				SetAnimationName (value);
			}
		}

		/// <summary>
		/// Return animation length.
		/// Or
		/// Set animation length.
		/// </summary>
		public float Length {
			get {
				return GetLength ();
			}
			set {
				SetLength (value);
			}
		}

		/// <summary>
		/// Return number of animation trigger points.
		/// Or
		/// Resize trigger point vector.
		/// </summary>
		public uint NumTriggers {
			get {
				return GetNumTriggers ();
			}
			set {
				SetNumTriggers (value);
			}
		}

		/// <summary>
		/// Return animation name hash.
		/// </summary>
		public StringHash AnimationNameHash {
			get {
				return GetAnimationNameHash ();
			}
		}

		/// <summary>
		/// Return number of animation tracks.
		/// </summary>
		public uint NumTracks {
			get {
				return GetNumTracks ();
			}
		}
	}
}
