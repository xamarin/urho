// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Generated using `sharpie urho`
// 
// Shader.cs
// 
// Copyright 2015 Xamarin Inc. All rights reserved.

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho
{
	/// <summary>
	/// %Shader resource consisting of several shader variations.
	/// </summary>
	public unsafe partial class Shader : Resource
	{
		public Shader (IntPtr handle) : base (handle)
		{
		}

		protected Shader (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Shader_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (Shader_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Shader_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (Shader_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Shader_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(Shader));
			return new StringHash (Shader_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Shader_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(Shader));
			return Marshal.PtrToStringAnsi (Shader_GetTypeNameStatic ());
		}

		public Shader () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Shader_Shader (IntPtr context);

		public Shader (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(Shader));
			handle = Shader_Shader ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Shader_RegisterObject (IntPtr context);

		/// <summary>
		/// Register object factory.
		/// </summary>
		public static void RegisterObject (Context context)
		{
			Runtime.Validate (typeof(Shader));
			Shader_RegisterObject ((object)context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Shader_BeginLoad (IntPtr handle, IntPtr source);

		/// <summary>
		/// Load resource from stream. May be called from a worker thread. Return true if successful.
		/// </summary>
		public override bool BeginLoad (File source)
		{
			Runtime.ValidateRefCounted (this);
			return Shader_BeginLoad (handle, (object)source == null ? IntPtr.Zero : source.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Shader_EndLoad (IntPtr handle);

		/// <summary>
		/// Finish resource loading. Always called from the main thread. Return true if successful.
		/// </summary>
		public override bool EndLoad ()
		{
			Runtime.ValidateRefCounted (this);
			return Shader_EndLoad (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Shader_GetVariation (IntPtr handle, ShaderType type, string defines);

		/// <summary>
		/// Return a variation with defines. Separate multiple defines with spaces.
		/// </summary>
		public ShaderVariation GetVariation (ShaderType type, string defines)
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupRefCounted<ShaderVariation> (Shader_GetVariation (handle, type, defines));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Shader_GetSourceCode (IntPtr handle, ShaderType type);

		/// <summary>
		/// Return either vertex or pixel shader source code.
		/// </summary>
		public string GetSourceCode (ShaderType type)
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (Shader_GetSourceCode (handle, type));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint Shader_GetTimeStamp (IntPtr handle);

		/// <summary>
		/// Return the latest timestamp of the shader code and its includes.
		/// </summary>
		private uint GetTimeStamp ()
		{
			Runtime.ValidateRefCounted (this);
			return Shader_GetTimeStamp (handle);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		public new static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public new static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Return the latest timestamp of the shader code and its includes.
		/// </summary>
		public uint TimeStamp {
			get {
				return GetTimeStamp ();
			}
		}
	}
}
