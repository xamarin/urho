// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Generated using `sharpie urho`
// 
// ConstraintPrismatic2D.cs
// 
// Copyright 2015 Xamarin Inc. All rights reserved.

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho.Urho2D
{
	/// <summary>
	/// 2D prismatic constraint component.
	/// </summary>
	public unsafe partial class ConstraintPrismatic2D : Constraint2D
	{
		public ConstraintPrismatic2D (IntPtr handle) : base (handle)
		{
		}

		protected ConstraintPrismatic2D (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int ConstraintPrismatic2D_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (ConstraintPrismatic2D_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr ConstraintPrismatic2D_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (ConstraintPrismatic2D_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int ConstraintPrismatic2D_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(ConstraintPrismatic2D));
			return new StringHash (ConstraintPrismatic2D_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr ConstraintPrismatic2D_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(ConstraintPrismatic2D));
			return Marshal.PtrToStringAnsi (ConstraintPrismatic2D_GetTypeNameStatic ());
		}

		public ConstraintPrismatic2D () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr ConstraintPrismatic2D_ConstraintPrismatic2D (IntPtr context);

		public ConstraintPrismatic2D (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(ConstraintPrismatic2D));
			handle = ConstraintPrismatic2D_ConstraintPrismatic2D ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ConstraintPrismatic2D_RegisterObject (IntPtr context);

		/// <summary>
		/// Register object factory.
		/// </summary>
		public new static void RegisterObject (Context context)
		{
			Runtime.Validate (typeof(ConstraintPrismatic2D));
			ConstraintPrismatic2D_RegisterObject ((object)context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ConstraintPrismatic2D_SetAnchor (IntPtr handle, ref Urho.Vector2 anchor);

		/// <summary>
		/// Set anchor.
		/// </summary>
		private void SetAnchor (Urho.Vector2 anchor)
		{
			Runtime.ValidateRefCounted (this);
			ConstraintPrismatic2D_SetAnchor (handle, ref anchor);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ConstraintPrismatic2D_SetAxis (IntPtr handle, ref Urho.Vector2 axis);

		/// <summary>
		/// Set axis.
		/// </summary>
		private void SetAxis (Urho.Vector2 axis)
		{
			Runtime.ValidateRefCounted (this);
			ConstraintPrismatic2D_SetAxis (handle, ref axis);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ConstraintPrismatic2D_SetEnableLimit (IntPtr handle, bool enableLimit);

		/// <summary>
		/// Set enable limit.
		/// </summary>
		private void SetEnableLimit (bool enableLimit)
		{
			Runtime.ValidateRefCounted (this);
			ConstraintPrismatic2D_SetEnableLimit (handle, enableLimit);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ConstraintPrismatic2D_SetLowerTranslation (IntPtr handle, float lowerTranslation);

		/// <summary>
		/// Set lower translation.
		/// </summary>
		private void SetLowerTranslation (float lowerTranslation)
		{
			Runtime.ValidateRefCounted (this);
			ConstraintPrismatic2D_SetLowerTranslation (handle, lowerTranslation);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ConstraintPrismatic2D_SetUpperTranslation (IntPtr handle, float upperTranslation);

		/// <summary>
		/// Set upper translation.
		/// </summary>
		private void SetUpperTranslation (float upperTranslation)
		{
			Runtime.ValidateRefCounted (this);
			ConstraintPrismatic2D_SetUpperTranslation (handle, upperTranslation);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ConstraintPrismatic2D_SetEnableMotor (IntPtr handle, bool enableMotor);

		/// <summary>
		/// Set enable motor.
		/// </summary>
		private void SetEnableMotor (bool enableMotor)
		{
			Runtime.ValidateRefCounted (this);
			ConstraintPrismatic2D_SetEnableMotor (handle, enableMotor);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ConstraintPrismatic2D_SetMaxMotorForce (IntPtr handle, float maxMotorForce);

		/// <summary>
		/// Set maxmotor force.
		/// </summary>
		private void SetMaxMotorForce (float maxMotorForce)
		{
			Runtime.ValidateRefCounted (this);
			ConstraintPrismatic2D_SetMaxMotorForce (handle, maxMotorForce);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ConstraintPrismatic2D_SetMotorSpeed (IntPtr handle, float motorSpeed);

		/// <summary>
		/// Set motor speed.
		/// </summary>
		private void SetMotorSpeed (float motorSpeed)
		{
			Runtime.ValidateRefCounted (this);
			ConstraintPrismatic2D_SetMotorSpeed (handle, motorSpeed);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Urho.Vector2 ConstraintPrismatic2D_GetAnchor (IntPtr handle);

		/// <summary>
		/// Return anchor.
		/// </summary>
		private Urho.Vector2 GetAnchor ()
		{
			Runtime.ValidateRefCounted (this);
			return ConstraintPrismatic2D_GetAnchor (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Urho.Vector2 ConstraintPrismatic2D_GetAxis (IntPtr handle);

		/// <summary>
		/// Return axis.
		/// </summary>
		private Urho.Vector2 GetAxis ()
		{
			Runtime.ValidateRefCounted (this);
			return ConstraintPrismatic2D_GetAxis (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ConstraintPrismatic2D_GetEnableLimit (IntPtr handle);

		/// <summary>
		/// Return enable limit.
		/// </summary>
		private bool GetEnableLimit ()
		{
			Runtime.ValidateRefCounted (this);
			return ConstraintPrismatic2D_GetEnableLimit (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float ConstraintPrismatic2D_GetLowerTranslation (IntPtr handle);

		/// <summary>
		/// Return lower translation.
		/// </summary>
		private float GetLowerTranslation ()
		{
			Runtime.ValidateRefCounted (this);
			return ConstraintPrismatic2D_GetLowerTranslation (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float ConstraintPrismatic2D_GetUpperTranslation (IntPtr handle);

		/// <summary>
		/// Return upper translation.
		/// </summary>
		private float GetUpperTranslation ()
		{
			Runtime.ValidateRefCounted (this);
			return ConstraintPrismatic2D_GetUpperTranslation (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ConstraintPrismatic2D_GetEnableMotor (IntPtr handle);

		/// <summary>
		/// Return enable motor.
		/// </summary>
		private bool GetEnableMotor ()
		{
			Runtime.ValidateRefCounted (this);
			return ConstraintPrismatic2D_GetEnableMotor (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float ConstraintPrismatic2D_GetMaxMotorForce (IntPtr handle);

		/// <summary>
		/// Return maxmotor force.
		/// </summary>
		private float GetMaxMotorForce ()
		{
			Runtime.ValidateRefCounted (this);
			return ConstraintPrismatic2D_GetMaxMotorForce (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float ConstraintPrismatic2D_GetMotorSpeed (IntPtr handle);

		/// <summary>
		/// Return motor speed.
		/// </summary>
		private float GetMotorSpeed ()
		{
			Runtime.ValidateRefCounted (this);
			return ConstraintPrismatic2D_GetMotorSpeed (handle);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		public new static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public new static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Return anchor.
		/// Or
		/// Set anchor.
		/// </summary>
		public Urho.Vector2 Anchor {
			get {
				return GetAnchor ();
			}
			set {
				SetAnchor (value);
			}
		}

		/// <summary>
		/// Return axis.
		/// Or
		/// Set axis.
		/// </summary>
		public Urho.Vector2 Axis {
			get {
				return GetAxis ();
			}
			set {
				SetAxis (value);
			}
		}

		/// <summary>
		/// Return enable limit.
		/// Or
		/// Set enable limit.
		/// </summary>
		public bool EnableLimit {
			get {
				return GetEnableLimit ();
			}
			set {
				SetEnableLimit (value);
			}
		}

		/// <summary>
		/// Return lower translation.
		/// Or
		/// Set lower translation.
		/// </summary>
		public float LowerTranslation {
			get {
				return GetLowerTranslation ();
			}
			set {
				SetLowerTranslation (value);
			}
		}

		/// <summary>
		/// Return upper translation.
		/// Or
		/// Set upper translation.
		/// </summary>
		public float UpperTranslation {
			get {
				return GetUpperTranslation ();
			}
			set {
				SetUpperTranslation (value);
			}
		}

		/// <summary>
		/// Return enable motor.
		/// Or
		/// Set enable motor.
		/// </summary>
		public bool EnableMotor {
			get {
				return GetEnableMotor ();
			}
			set {
				SetEnableMotor (value);
			}
		}

		/// <summary>
		/// Return maxmotor force.
		/// Or
		/// Set maxmotor force.
		/// </summary>
		public float MaxMotorForce {
			get {
				return GetMaxMotorForce ();
			}
			set {
				SetMaxMotorForce (value);
			}
		}

		/// <summary>
		/// Return motor speed.
		/// Or
		/// Set motor speed.
		/// </summary>
		public float MotorSpeed {
			get {
				return GetMotorSpeed ();
			}
			set {
				SetMotorSpeed (value);
			}
		}
	}
}
