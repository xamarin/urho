// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Generated using `sharpie urho`
// 
// NetworkPriority.cs
// 
// Copyright 2015 Xamarin Inc. All rights reserved.

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho.Network
{
	/// <summary>
	/// %Network interest management settings component.
	/// </summary>
	public unsafe partial class NetworkPriority : Component
	{
		public NetworkPriority (IntPtr handle) : base (handle)
		{
		}

		protected NetworkPriority (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int NetworkPriority_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (NetworkPriority_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr NetworkPriority_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (NetworkPriority_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int NetworkPriority_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(NetworkPriority));
			return new StringHash (NetworkPriority_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr NetworkPriority_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(NetworkPriority));
			return Marshal.PtrToStringAnsi (NetworkPriority_GetTypeNameStatic ());
		}

		public NetworkPriority () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr NetworkPriority_NetworkPriority (IntPtr context);

		public NetworkPriority (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(NetworkPriority));
			handle = NetworkPriority_NetworkPriority ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void NetworkPriority_RegisterObject (IntPtr context);

		/// <summary>
		/// Register object factory.
		/// </summary>
		public new static void RegisterObject (Context context)
		{
			Runtime.Validate (typeof(NetworkPriority));
			NetworkPriority_RegisterObject ((object)context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void NetworkPriority_SetBasePriority (IntPtr handle, float priority);

		/// <summary>
		/// Set base priority. Default 100 (send updates at full frequency.)
		/// </summary>
		private void SetBasePriority (float priority)
		{
			Runtime.ValidateRefCounted (this);
			NetworkPriority_SetBasePriority (handle, priority);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void NetworkPriority_SetDistanceFactor (IntPtr handle, float factor);

		/// <summary>
		/// Set priority reduction distance factor. Default 0 (no effect.)
		/// </summary>
		private void SetDistanceFactor (float factor)
		{
			Runtime.ValidateRefCounted (this);
			NetworkPriority_SetDistanceFactor (handle, factor);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void NetworkPriority_SetMinPriority (IntPtr handle, float priority);

		/// <summary>
		/// Set minimum priority. Default 0 (no updates when far away enough.)
		/// </summary>
		private void SetMinPriority (float priority)
		{
			Runtime.ValidateRefCounted (this);
			NetworkPriority_SetMinPriority (handle, priority);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void NetworkPriority_SetAlwaysUpdateOwner (IntPtr handle, bool enable);

		/// <summary>
		/// Set whether updates to owner should be sent always at full rate. Default true.
		/// </summary>
		private void SetAlwaysUpdateOwner (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			NetworkPriority_SetAlwaysUpdateOwner (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float NetworkPriority_GetBasePriority (IntPtr handle);

		/// <summary>
		/// Return base priority.
		/// </summary>
		private float GetBasePriority ()
		{
			Runtime.ValidateRefCounted (this);
			return NetworkPriority_GetBasePriority (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float NetworkPriority_GetDistanceFactor (IntPtr handle);

		/// <summary>
		/// Return priority reduction distance factor.
		/// </summary>
		private float GetDistanceFactor ()
		{
			Runtime.ValidateRefCounted (this);
			return NetworkPriority_GetDistanceFactor (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float NetworkPriority_GetMinPriority (IntPtr handle);

		/// <summary>
		/// Return minimum priority.
		/// </summary>
		private float GetMinPriority ()
		{
			Runtime.ValidateRefCounted (this);
			return NetworkPriority_GetMinPriority (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool NetworkPriority_GetAlwaysUpdateOwner (IntPtr handle);

		/// <summary>
		/// Return whether updates to owner should be sent always at full rate.
		/// </summary>
		private bool GetAlwaysUpdateOwner ()
		{
			Runtime.ValidateRefCounted (this);
			return NetworkPriority_GetAlwaysUpdateOwner (handle);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		public new static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public new static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Return base priority.
		/// Or
		/// Set base priority. Default 100 (send updates at full frequency.)
		/// </summary>
		public float BasePriority {
			get {
				return GetBasePriority ();
			}
			set {
				SetBasePriority (value);
			}
		}

		/// <summary>
		/// Return priority reduction distance factor.
		/// Or
		/// Set priority reduction distance factor. Default 0 (no effect.)
		/// </summary>
		public float DistanceFactor {
			get {
				return GetDistanceFactor ();
			}
			set {
				SetDistanceFactor (value);
			}
		}

		/// <summary>
		/// Return minimum priority.
		/// Or
		/// Set minimum priority. Default 0 (no updates when far away enough.)
		/// </summary>
		public float MinPriority {
			get {
				return GetMinPriority ();
			}
			set {
				SetMinPriority (value);
			}
		}

		/// <summary>
		/// Return whether updates to owner should be sent always at full rate.
		/// Or
		/// Set whether updates to owner should be sent always at full rate. Default true.
		/// </summary>
		public bool AlwaysUpdateOwner {
			get {
				return GetAlwaysUpdateOwner ();
			}
			set {
				SetAlwaysUpdateOwner (value);
			}
		}
	}
}
