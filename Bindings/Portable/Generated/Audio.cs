// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Generated using `sharpie urho`
// 
// Audio.cs
// 
// Copyright 2015 Xamarin Inc. All rights reserved.

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho.Audio
{
	/// <summary>
	/// %Audio subsystem.
	/// </summary>
	public unsafe partial class Audio : UrhoObject
	{
		public Audio (IntPtr handle) : base (handle)
		{
		}

		protected Audio (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Audio_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (Audio_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Audio_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (Audio_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Audio_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(Audio));
			return new StringHash (Audio_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Audio_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(Audio));
			return Marshal.PtrToStringAnsi (Audio_GetTypeNameStatic ());
		}

		public Audio () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Audio_Audio (IntPtr context);

		public Audio (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(Audio));
			handle = Audio_Audio ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Audio_SetMode (IntPtr handle, int bufferLengthMSec, int mixRate, bool stereo, bool interpolation);

		/// <summary>
		/// Initialize sound output with specified buffer length and output mode.
		/// </summary>
		public bool SetMode (int bufferLengthMSec, int mixRate, bool stereo, bool interpolation)
		{
			Runtime.ValidateRefCounted (this);
			return Audio_SetMode (handle, bufferLengthMSec, mixRate, stereo, interpolation);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Audio_Update (IntPtr handle, float timeStep);

		/// <summary>
		/// Run update on sound sources. Not required for continued playback, but frees unused sound sources
		/// &
		/// sounds and updates 3D positions.
		/// </summary>
		public void Update (float timeStep)
		{
			Runtime.ValidateRefCounted (this);
			Audio_Update (handle, timeStep);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Audio_Play (IntPtr handle);

		/// <summary>
		/// Restart sound output.
		/// </summary>
		public bool Play ()
		{
			Runtime.ValidateRefCounted (this);
			return Audio_Play (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Audio_Stop (IntPtr handle);

		/// <summary>
		/// Suspend sound output.
		/// </summary>
		public void Stop ()
		{
			Runtime.ValidateRefCounted (this);
			Audio_Stop (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Audio_SetMasterGain (IntPtr handle, string type, float gain);

		/// <summary>
		/// Set master gain on a specific sound type such as sound effects, music or voice.
		/// </summary>
		public void SetMasterGain (string type, float gain)
		{
			Runtime.ValidateRefCounted (this);
			Audio_SetMasterGain (handle, type, gain);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Audio_PauseSoundType (IntPtr handle, string type);

		/// <summary>
		/// Pause playback of specific sound type. This allows to suspend e.g. sound effects or voice when the game is paused. By default all sound types are unpaused.
		/// </summary>
		public void PauseSoundType (string type)
		{
			Runtime.ValidateRefCounted (this);
			Audio_PauseSoundType (handle, type);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Audio_ResumeSoundType (IntPtr handle, string type);

		/// <summary>
		/// Resume playback of specific sound type.
		/// </summary>
		public void ResumeSoundType (string type)
		{
			Runtime.ValidateRefCounted (this);
			Audio_ResumeSoundType (handle, type);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Audio_ResumeAll (IntPtr handle);

		/// <summary>
		/// Resume playback of all sound types.
		/// </summary>
		public void ResumeAll ()
		{
			Runtime.ValidateRefCounted (this);
			Audio_ResumeAll (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Audio_SetListener (IntPtr handle, IntPtr listener);

		/// <summary>
		/// Set active sound listener for 3D sounds.
		/// </summary>
		private void SetListener (SoundListener listener)
		{
			Runtime.ValidateRefCounted (this);
			Audio_SetListener (handle, (object)listener == null ? IntPtr.Zero : listener.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Audio_StopSound (IntPtr handle, IntPtr sound);

		/// <summary>
		/// Stop any sound source playing a certain sound clip.
		/// </summary>
		public void StopSound (Sound sound)
		{
			Runtime.ValidateRefCounted (this);
			Audio_StopSound (handle, (object)sound == null ? IntPtr.Zero : sound.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint Audio_GetSampleSize (IntPtr handle);

		/// <summary>
		/// Return byte size of one sample.
		/// </summary>
		private uint GetSampleSize ()
		{
			Runtime.ValidateRefCounted (this);
			return Audio_GetSampleSize (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Audio_GetMixRate (IntPtr handle);

		/// <summary>
		/// Return mixing rate.
		/// </summary>
		private int GetMixRate ()
		{
			Runtime.ValidateRefCounted (this);
			return Audio_GetMixRate (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Audio_GetInterpolation (IntPtr handle);

		/// <summary>
		/// Return whether output is interpolated.
		/// </summary>
		private bool GetInterpolation ()
		{
			Runtime.ValidateRefCounted (this);
			return Audio_GetInterpolation (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Audio_IsStereo (IntPtr handle);

		/// <summary>
		/// Return whether output is stereo.
		/// </summary>
		private bool IsStereo ()
		{
			Runtime.ValidateRefCounted (this);
			return Audio_IsStereo (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Audio_IsPlaying (IntPtr handle);

		/// <summary>
		/// Return whether audio is being output.
		/// </summary>
		private bool IsPlaying ()
		{
			Runtime.ValidateRefCounted (this);
			return Audio_IsPlaying (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Audio_IsInitialized (IntPtr handle);

		/// <summary>
		/// Return whether an audio stream has been reserved.
		/// </summary>
		private bool IsInitialized ()
		{
			Runtime.ValidateRefCounted (this);
			return Audio_IsInitialized (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float Audio_GetMasterGain (IntPtr handle, string type);

		/// <summary>
		/// Return master gain for a specific sound source type. Unknown sound types will return full gain (1).
		/// </summary>
		public float GetMasterGain (string type)
		{
			Runtime.ValidateRefCounted (this);
			return Audio_GetMasterGain (handle, type);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Audio_IsSoundTypePaused (IntPtr handle, string type);

		/// <summary>
		/// Return whether specific sound type has been paused.
		/// </summary>
		public bool IsSoundTypePaused (string type)
		{
			Runtime.ValidateRefCounted (this);
			return Audio_IsSoundTypePaused (handle, type);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Audio_GetListener (IntPtr handle);

		/// <summary>
		/// Return active sound listener.
		/// </summary>
		private SoundListener GetListener ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<SoundListener> (Audio_GetListener (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Audio_HasMasterGain (IntPtr handle, string type);

		/// <summary>
		/// Return whether the specified master gain has been defined.
		/// </summary>
		public bool HasMasterGain (string type)
		{
			Runtime.ValidateRefCounted (this);
			return Audio_HasMasterGain (handle, type);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Audio_AddSoundSource (IntPtr handle, IntPtr soundSource);

		/// <summary>
		/// Add a sound source to keep track of. Called by SoundSource.
		/// </summary>
		public void AddSoundSource (SoundSource soundSource)
		{
			Runtime.ValidateRefCounted (this);
			Audio_AddSoundSource (handle, (object)soundSource == null ? IntPtr.Zero : soundSource.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Audio_RemoveSoundSource (IntPtr handle, IntPtr soundSource);

		/// <summary>
		/// Remove a sound source. Called by SoundSource.
		/// </summary>
		public void RemoveSoundSource (SoundSource soundSource)
		{
			Runtime.ValidateRefCounted (this);
			Audio_RemoveSoundSource (handle, (object)soundSource == null ? IntPtr.Zero : soundSource.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float Audio_GetSoundSourceMasterGain (IntPtr handle, int typeHash);

		/// <summary>
		/// Return sound type specific gain multiplied by master gain.
		/// </summary>
		public float GetSoundSourceMasterGain (StringHash typeHash)
		{
			Runtime.ValidateRefCounted (this);
			return Audio_GetSoundSourceMasterGain (handle, typeHash.Code);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Audio_MixOutput (IntPtr handle, IntPtr dest, uint samples);

		/// <summary>
		/// Mix sound sources into the buffer.
		/// </summary>
		public void MixOutput (IntPtr dest, uint samples)
		{
			Runtime.ValidateRefCounted (this);
			Audio_MixOutput (handle, dest, samples);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		public static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Return active sound listener.
		/// Or
		/// Set active sound listener for 3D sounds.
		/// </summary>
		public SoundListener Listener {
			get {
				return GetListener ();
			}
			set {
				SetListener (value);
			}
		}

		/// <summary>
		/// Return byte size of one sample.
		/// </summary>
		public uint SampleSize {
			get {
				return GetSampleSize ();
			}
		}

		/// <summary>
		/// Return mixing rate.
		/// </summary>
		public int MixRate {
			get {
				return GetMixRate ();
			}
		}

		/// <summary>
		/// Return whether output is interpolated.
		/// </summary>
		public bool Interpolation {
			get {
				return GetInterpolation ();
			}
		}

		/// <summary>
		/// Return whether output is stereo.
		/// </summary>
		public bool Stereo {
			get {
				return IsStereo ();
			}
		}

		/// <summary>
		/// Return whether audio is being output.
		/// </summary>
		public bool Playing {
			get {
				return IsPlaying ();
			}
		}

		/// <summary>
		/// Return whether an audio stream has been reserved.
		/// </summary>
		public bool Initialized {
			get {
				return IsInitialized ();
			}
		}
	}
}
