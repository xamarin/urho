// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Generated using `sharpie urho`
// 
// UrhoObject.cs
// 
// Copyright 2015 Xamarin Inc. All rights reserved.

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho
{
	/// <summary>
	/// Base class for objects with type identification, subsystem access and event sending/receiving capability.
	/// </summary>
	public unsafe partial class UrhoObject
	{
		public UrhoObject (IntPtr handle) : base (handle)
		{
		}

		protected UrhoObject (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int UrhoObject_GetType (IntPtr handle);

		/// <summary>
		/// Return type hash.
		/// </summary>
		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (UrhoObject_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr UrhoObject_GetTypeName (IntPtr handle);

		/// <summary>
		/// Return type name.
		/// </summary>
		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (UrhoObject_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern TypeInfo* UrhoObject_GetTypeInfo (IntPtr handle);

		/// <summary>
		/// Return type info.
		/// </summary>
		private TypeInfo* GetTypeInfo ()
		{
			Runtime.ValidateRefCounted (this);
			return UrhoObject_GetTypeInfo (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern TypeInfo* UrhoObject_GetTypeInfoStatic ();

		/// <summary>
		/// Return type info static.
		/// </summary>
		private static TypeInfo* GetTypeInfoStatic ()
		{
			Runtime.Validate (typeof(UrhoObject));
			return UrhoObject_GetTypeInfoStatic ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool UrhoObject_IsInstanceOf (IntPtr handle, int type);

		/// <summary>
		/// Check current instance is type of specified type.
		/// </summary>
		public bool IsInstanceOf (StringHash type)
		{
			Runtime.ValidateRefCounted (this);
			return UrhoObject_IsInstanceOf (handle, type.Code);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool UrhoObject_IsInstanceOf0 (IntPtr handle, TypeInfo* typeInfo);

		/// <summary>
		/// Check current instance is type of specified type.
		/// </summary>
		public bool IsInstanceOf (TypeInfo* typeInfo)
		{
			Runtime.ValidateRefCounted (this);
			return UrhoObject_IsInstanceOf0 (handle, typeInfo);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoObject_SubscribeToEvent (IntPtr handle, int eventType, IntPtr handler);

		/// <summary>
		/// Subscribe to an event that can be sent by any sender.
		/// </summary>
		public void SubscribeToEvent (StringHash eventType, IntPtr handler)
		{
			Runtime.ValidateRefCounted (this);
			UrhoObject_SubscribeToEvent (handle, eventType.Code, handler);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoObject_SubscribeToEvent1 (IntPtr handle, IntPtr sender, int eventType, IntPtr handler);

		/// <summary>
		/// Subscribe to a specific sender's event.
		/// </summary>
		public void SubscribeToEvent (Urho.UrhoObject sender, StringHash eventType, IntPtr handler)
		{
			Runtime.ValidateRefCounted (this);
			UrhoObject_SubscribeToEvent1 (handle, (object)sender == null ? IntPtr.Zero : sender.Handle, eventType.Code, handler);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoObject_UnsubscribeFromEvent (IntPtr handle, int eventType);

		/// <summary>
		/// Unsubscribe from an event.
		/// </summary>
		public void UnsubscribeFromEvent (StringHash eventType)
		{
			Runtime.ValidateRefCounted (this);
			UrhoObject_UnsubscribeFromEvent (handle, eventType.Code);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoObject_UnsubscribeFromEvent2 (IntPtr handle, IntPtr sender, int eventType);

		/// <summary>
		/// Unsubscribe from a specific sender's event.
		/// </summary>
		public void UnsubscribeFromEvent (Urho.UrhoObject sender, StringHash eventType)
		{
			Runtime.ValidateRefCounted (this);
			UrhoObject_UnsubscribeFromEvent2 (handle, (object)sender == null ? IntPtr.Zero : sender.Handle, eventType.Code);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoObject_UnsubscribeFromEvents (IntPtr handle, IntPtr sender);

		/// <summary>
		/// Unsubscribe from a specific sender's events.
		/// </summary>
		public void UnsubscribeFromEvents (Urho.UrhoObject sender)
		{
			Runtime.ValidateRefCounted (this);
			UrhoObject_UnsubscribeFromEvents (handle, (object)sender == null ? IntPtr.Zero : sender.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoObject_UnsubscribeFromAllEvents (IntPtr handle);

		/// <summary>
		/// Unsubscribe from all events.
		/// </summary>
		public void UnsubscribeFromAllEvents ()
		{
			Runtime.ValidateRefCounted (this);
			UrhoObject_UnsubscribeFromAllEvents (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoObject_SendEvent (IntPtr handle, int eventType);

		/// <summary>
		/// Send event to all subscribers.
		/// </summary>
		public void SendEvent (StringHash eventType)
		{
			Runtime.ValidateRefCounted (this);
			UrhoObject_SendEvent (handle, eventType.Code);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr UrhoObject_GetContext (IntPtr handle);

		/// <summary>
		/// Return execution context.
		/// </summary>
		private Context GetContext ()
		{
			return Runtime.LookupRefCounted<Context> (UrhoObject_GetContext (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoObject_SetGlobalVar0 (IntPtr handle, int key, ref Vector3 value);

		/// <summary>
		/// Set global variable with the respective key and value
		/// </summary>
		public void SetGlobalVar (StringHash key, Vector3 value)
		{
			Runtime.ValidateRefCounted (this);
			UrhoObject_SetGlobalVar0 (handle, key.Code, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoObject_SetGlobalVar1 (IntPtr handle, int key, ref IntRect value);

		/// <summary>
		/// Set global variable with the respective key and value
		/// </summary>
		public void SetGlobalVar (StringHash key, IntRect value)
		{
			Runtime.ValidateRefCounted (this);
			UrhoObject_SetGlobalVar1 (handle, key.Code, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoObject_SetGlobalVar2 (IntPtr handle, int key, ref Color value);

		/// <summary>
		/// Set global variable with the respective key and value
		/// </summary>
		public void SetGlobalVar (StringHash key, Color value)
		{
			Runtime.ValidateRefCounted (this);
			UrhoObject_SetGlobalVar2 (handle, key.Code, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoObject_SetGlobalVar3 (IntPtr handle, int key, ref Vector2 value);

		/// <summary>
		/// Set global variable with the respective key and value
		/// </summary>
		public void SetGlobalVar (StringHash key, Vector2 value)
		{
			Runtime.ValidateRefCounted (this);
			UrhoObject_SetGlobalVar3 (handle, key.Code, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoObject_SetGlobalVar4 (IntPtr handle, int key, ref Vector4 value);

		/// <summary>
		/// Set global variable with the respective key and value
		/// </summary>
		public void SetGlobalVar (StringHash key, Vector4 value)
		{
			Runtime.ValidateRefCounted (this);
			UrhoObject_SetGlobalVar4 (handle, key.Code, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoObject_SetGlobalVar5 (IntPtr handle, int key, ref IntVector2 value);

		/// <summary>
		/// Set global variable with the respective key and value
		/// </summary>
		public void SetGlobalVar (StringHash key, IntVector2 value)
		{
			Runtime.ValidateRefCounted (this);
			UrhoObject_SetGlobalVar5 (handle, key.Code, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoObject_SetGlobalVar6 (IntPtr handle, int key, ref Quaternion value);

		/// <summary>
		/// Set global variable with the respective key and value
		/// </summary>
		public void SetGlobalVar (StringHash key, Quaternion value)
		{
			Runtime.ValidateRefCounted (this);
			UrhoObject_SetGlobalVar6 (handle, key.Code, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoObject_SetGlobalVar7 (IntPtr handle, int key, ref Matrix4 value);

		/// <summary>
		/// Set global variable with the respective key and value
		/// </summary>
		public void SetGlobalVar (StringHash key, Matrix4 value)
		{
			Runtime.ValidateRefCounted (this);
			UrhoObject_SetGlobalVar7 (handle, key.Code, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoObject_SetGlobalVar8 (IntPtr handle, int key, ref Matrix3x4 value);

		/// <summary>
		/// Set global variable with the respective key and value
		/// </summary>
		public void SetGlobalVar (StringHash key, Matrix3x4 value)
		{
			Runtime.ValidateRefCounted (this);
			UrhoObject_SetGlobalVar8 (handle, key.Code, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoObject_SetGlobalVar9 (IntPtr handle, int key, int value);

		/// <summary>
		/// Set global variable with the respective key and value
		/// </summary>
		public void SetGlobalVar (StringHash key, int value)
		{
			Runtime.ValidateRefCounted (this);
			UrhoObject_SetGlobalVar9 (handle, key.Code, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoObject_SetGlobalVar10 (IntPtr handle, int key, float value);

		/// <summary>
		/// Set global variable with the respective key and value
		/// </summary>
		public void SetGlobalVar (StringHash key, float value)
		{
			Runtime.ValidateRefCounted (this);
			UrhoObject_SetGlobalVar10 (handle, key.Code, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoObject_SetGlobalVar11 (IntPtr handle, int key, string value);

		/// <summary>
		/// Set global variable with the respective key and value
		/// </summary>
		public void SetGlobalVar (StringHash key, string value)
		{
			Runtime.ValidateRefCounted (this);
			UrhoObject_SetGlobalVar11 (handle, key.Code, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr UrhoObject_GetSubsystem (IntPtr handle, int type);

		/// <summary>
		/// Return subsystem by type.
		/// </summary>
		public Urho.UrhoObject GetSubsystem (StringHash type)
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupRefCounted<Urho.UrhoObject> (UrhoObject_GetSubsystem (handle, type.Code));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr UrhoObject_GetEventSender (IntPtr handle);

		/// <summary>
		/// Return active event sender. Null outside event handling.
		/// </summary>
		private Urho.UrhoObject GetEventSender ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupRefCounted<Urho.UrhoObject> (UrhoObject_GetEventSender (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr UrhoObject_GetEventHandler (IntPtr handle);

		/// <summary>
		/// Return active event handler. Null outside event handling.
		/// </summary>
		private IntPtr GetEventHandler ()
		{
			Runtime.ValidateRefCounted (this);
			return UrhoObject_GetEventHandler (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool UrhoObject_HasSubscribedToEvent (IntPtr handle, int eventType);

		/// <summary>
		/// Return whether has subscribed to an event without specific sender.
		/// </summary>
		public bool HasSubscribedToEvent (StringHash eventType)
		{
			Runtime.ValidateRefCounted (this);
			return UrhoObject_HasSubscribedToEvent (handle, eventType.Code);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool UrhoObject_HasSubscribedToEvent3 (IntPtr handle, IntPtr sender, int eventType);

		/// <summary>
		/// Return whether has subscribed to a specific sender's event.
		/// </summary>
		public bool HasSubscribedToEvent (Urho.UrhoObject sender, StringHash eventType)
		{
			Runtime.ValidateRefCounted (this);
			return UrhoObject_HasSubscribedToEvent3 (handle, (object)sender == null ? IntPtr.Zero : sender.Handle, eventType.Code);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool UrhoObject_HasEventHandlers (IntPtr handle);

		/// <summary>
		/// Return whether has subscribed to any event.
		/// </summary>
		public bool HasEventHandlers ()
		{
			Runtime.ValidateRefCounted (this);
			return UrhoObject_HasEventHandlers (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr UrhoObject_GetCategory (IntPtr handle);

		/// <summary>
		/// Return object category. Categories are (optionally) registered along with the object factory. Return an empty string if the object category is not registered.
		/// </summary>
		private string GetCategory ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (UrhoObject_GetCategory (handle));
		}

		/// <summary>
		/// Return type hash.
		/// </summary>
		public virtual StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		/// <summary>
		/// Return type name.
		/// </summary>
		public virtual string TypeName {
			get {
				return GetTypeName ();
			}
		}

		/// <summary>
		/// Return type info.
		/// </summary>
		public TypeInfo* TypeInfo {
			get {
				return GetTypeInfo ();
			}
		}

		/// <summary>
		/// Return type info static.
		/// </summary>
		public static TypeInfo* TypeInfoStatic {
			get {
				return GetTypeInfoStatic ();
			}
		}

		/// <summary>
		/// Return execution context.
		/// </summary>
		public Context Context {
			get {
				return GetContext ();
			}
		}

		/// <summary>
		/// Return active event sender. Null outside event handling.
		/// </summary>
		public Urho.UrhoObject EventSender {
			get {
				return GetEventSender ();
			}
		}

		/// <summary>
		/// Return active event handler. Null outside event handling.
		/// </summary>
		public IntPtr EventHandler {
			get {
				return GetEventHandler ();
			}
		}

		/// <summary>
		/// Return object category. Categories are (optionally) registered along with the object factory. Return an empty string if the object category is not registered.
		/// </summary>
		public string Category {
			get {
				return GetCategory ();
			}
		}
	}
}
