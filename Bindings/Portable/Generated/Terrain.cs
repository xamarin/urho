// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Generated using `sharpie urho`
// 
// Terrain.cs
// 
// Copyright 2015 Xamarin Inc. All rights reserved.

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho
{
	/// <summary>
	/// Heightmap terrain component.
	/// </summary>
	public unsafe partial class Terrain : Component
	{
		public Terrain (IntPtr handle) : base (handle)
		{
		}

		protected Terrain (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Terrain_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (Terrain_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Terrain_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (Terrain_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Terrain_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(Terrain));
			return new StringHash (Terrain_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Terrain_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(Terrain));
			return Marshal.PtrToStringAnsi (Terrain_GetTypeNameStatic ());
		}

		public Terrain () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Terrain_Terrain (IntPtr context);

		public Terrain (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(Terrain));
			handle = Terrain_Terrain ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_RegisterObject (IntPtr context);

		/// <summary>
		/// Register object factory.
		/// </summary>
		public new static void RegisterObject (Context context)
		{
			Runtime.Validate (typeof(Terrain));
			Terrain_RegisterObject ((object)context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_ApplyAttributes (IntPtr handle);

		/// <summary>
		/// Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
		/// </summary>
		public override void ApplyAttributes ()
		{
			Runtime.ValidateRefCounted (this);
			Terrain_ApplyAttributes (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_OnSetEnabled (IntPtr handle);

		/// <summary>
		/// Handle enabled/disabled state change.
		/// </summary>
		public override void OnSetEnabled ()
		{
			Runtime.ValidateRefCounted (this);
			Terrain_OnSetEnabled (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetPatchSize (IntPtr handle, int size);

		/// <summary>
		/// Set patch quads per side. Must be a power of two.
		/// </summary>
		private void SetPatchSize (int size)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetPatchSize (handle, size);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetSpacing (IntPtr handle, ref Urho.Vector3 spacing);

		/// <summary>
		/// Set vertex (XZ) and height (Y) spacing.
		/// </summary>
		private void SetSpacing (Urho.Vector3 spacing)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetSpacing (handle, ref spacing);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetMaxLodLevels (IntPtr handle, uint levels);

		/// <summary>
		/// Set maximum number of LOD levels for terrain patches. This can be between 1-4.
		/// </summary>
		private void SetMaxLodLevels (uint levels)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetMaxLodLevels (handle, levels);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetOcclusionLodLevel (IntPtr handle, uint level);

		/// <summary>
		/// Set LOD level used for terrain patch occlusion. By default (M_MAX_UNSIGNED) the coarsest. Since the LOD level used needs to be fixed, using finer LOD levels may result in false positive occlusion in cases where the actual rendered geometry is coarser, so use with caution.
		/// </summary>
		private void SetOcclusionLodLevel (uint level)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetOcclusionLodLevel (handle, level);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetSmoothing (IntPtr handle, bool enable);

		/// <summary>
		/// Set smoothing of heightmap.
		/// </summary>
		private void SetSmoothing (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetSmoothing (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Terrain_SetHeightMap (IntPtr handle, IntPtr image);

		/// <summary>
		/// Set heightmap image. Dimensions should be a power of two + 1. Uses 8-bit grayscale, or optionally red as MSB and green as LSB for 16-bit accuracy. Return true if successful.
		/// </summary>
		public bool SetHeightMap (Image image)
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_SetHeightMap (handle, (object)image == null ? IntPtr.Zero : image.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetMaterial (IntPtr handle, IntPtr material);

		/// <summary>
		/// Set material.
		/// </summary>
		private void SetMaterial (Material material)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetMaterial (handle, (object)material == null ? IntPtr.Zero : material.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetNorthNeighbor (IntPtr handle, IntPtr north);

		/// <summary>
		/// Set north (positive Z) neighbor terrain for seamless LOD changes across terrains.
		/// </summary>
		private void SetNorthNeighbor (Terrain north)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetNorthNeighbor (handle, (object)north == null ? IntPtr.Zero : north.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetSouthNeighbor (IntPtr handle, IntPtr south);

		/// <summary>
		/// Set south (negative Z) neighbor terrain for seamless LOD changes across terrains.
		/// </summary>
		private void SetSouthNeighbor (Terrain south)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetSouthNeighbor (handle, (object)south == null ? IntPtr.Zero : south.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetWestNeighbor (IntPtr handle, IntPtr west);

		/// <summary>
		/// Set west (negative X) neighbor terrain for seamless LOD changes across terrains.
		/// </summary>
		private void SetWestNeighbor (Terrain west)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetWestNeighbor (handle, (object)west == null ? IntPtr.Zero : west.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetEastNeighbor (IntPtr handle, IntPtr east);

		/// <summary>
		/// Set east (positive X) neighbor terrain for seamless LOD changes across terrains.
		/// </summary>
		private void SetEastNeighbor (Terrain east)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetEastNeighbor (handle, (object)east == null ? IntPtr.Zero : east.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetNeighbors (IntPtr handle, IntPtr north, IntPtr south, IntPtr west, IntPtr east);

		/// <summary>
		/// Set all neighbor terrains at once.
		/// </summary>
		public void SetNeighbors (Terrain north, Terrain south, Terrain west, Terrain east)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetNeighbors (handle, (object)north == null ? IntPtr.Zero : north.Handle, (object)south == null ? IntPtr.Zero : south.Handle, (object)west == null ? IntPtr.Zero : west.Handle, (object)east == null ? IntPtr.Zero : east.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetDrawDistance (IntPtr handle, float distance);

		/// <summary>
		/// Set draw distance for patches.
		/// </summary>
		private void SetDrawDistance (float distance)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetDrawDistance (handle, distance);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetShadowDistance (IntPtr handle, float distance);

		/// <summary>
		/// Set shadow draw distance for patches.
		/// </summary>
		private void SetShadowDistance (float distance)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetShadowDistance (handle, distance);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetLodBias (IntPtr handle, float bias);

		/// <summary>
		/// Set LOD bias for patches. Affects which terrain LOD to display.
		/// </summary>
		private void SetLodBias (float bias)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetLodBias (handle, bias);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetViewMask (IntPtr handle, uint mask);

		/// <summary>
		/// Set view mask for patches. Is and'ed with camera's view mask to see if the object should be rendered.
		/// </summary>
		private void SetViewMask (uint mask)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetViewMask (handle, mask);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetLightMask (IntPtr handle, uint mask);

		/// <summary>
		/// Set light mask for patches. Is and'ed with light's and zone's light mask to see if the object should be lit.
		/// </summary>
		private void SetLightMask (uint mask)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetLightMask (handle, mask);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetShadowMask (IntPtr handle, uint mask);

		/// <summary>
		/// Set shadow mask for patches. Is and'ed with light's light mask and zone's shadow mask to see if the object should be rendered to a shadow map.
		/// </summary>
		private void SetShadowMask (uint mask)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetShadowMask (handle, mask);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetZoneMask (IntPtr handle, uint mask);

		/// <summary>
		/// Set zone mask for patches. Is and'ed with zone's zone mask to see if the object should belong to the zone.
		/// </summary>
		private void SetZoneMask (uint mask)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetZoneMask (handle, mask);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetMaxLights (IntPtr handle, uint num);

		/// <summary>
		/// Set maximum number of per-pixel lights for patches. Default 0 is unlimited.
		/// </summary>
		private void SetMaxLights (uint num)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetMaxLights (handle, num);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetCastShadows (IntPtr handle, bool enable);

		/// <summary>
		/// Set shadowcaster flag for patches.
		/// </summary>
		private void SetCastShadows (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetCastShadows (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetOccluder (IntPtr handle, bool enable);

		/// <summary>
		/// Set occlusion flag for patches. Occlusion uses the coarsest LOD by default.
		/// </summary>
		private void SetOccluder (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetOccluder (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetOccludee (IntPtr handle, bool enable);

		/// <summary>
		/// Set occludee flag for patches.
		/// </summary>
		private void SetOccludee (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetOccludee (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_ApplyHeightMap (IntPtr handle);

		/// <summary>
		/// Apply changes from the heightmap image.
		/// </summary>
		public void ApplyHeightMap ()
		{
			Runtime.ValidateRefCounted (this);
			Terrain_ApplyHeightMap (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Terrain_GetPatchSize (IntPtr handle);

		/// <summary>
		/// Return patch quads per side.
		/// </summary>
		private int GetPatchSize ()
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_GetPatchSize (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Urho.Vector3 Terrain_GetSpacing (IntPtr handle);

		/// <summary>
		/// Return vertex and height spacing.
		/// </summary>
		private Urho.Vector3 GetSpacing ()
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_GetSpacing (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Urho.IntVector2 Terrain_GetNumVertices (IntPtr handle);

		/// <summary>
		/// Return heightmap size in vertices.
		/// </summary>
		private Urho.IntVector2 GetNumVertices ()
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_GetNumVertices (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Urho.IntVector2 Terrain_GetNumPatches (IntPtr handle);

		/// <summary>
		/// Return heightmap size in patches.
		/// </summary>
		private Urho.IntVector2 GetNumPatches ()
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_GetNumPatches (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint Terrain_GetMaxLodLevels (IntPtr handle);

		/// <summary>
		/// Return maximum number of LOD levels for terrain patches. This can be between 1-4.
		/// </summary>
		private uint GetMaxLodLevels ()
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_GetMaxLodLevels (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint Terrain_GetOcclusionLodLevel (IntPtr handle);

		/// <summary>
		/// Return LOD level used for occlusion.
		/// </summary>
		private uint GetOcclusionLodLevel ()
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_GetOcclusionLodLevel (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Terrain_GetSmoothing (IntPtr handle);

		/// <summary>
		/// Return whether smoothing is in use.
		/// </summary>
		private bool GetSmoothing ()
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_GetSmoothing (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Terrain_GetHeightMap (IntPtr handle);

		/// <summary>
		/// Return heightmap image.
		/// </summary>
		private Image GetHeightMap ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<Image> (Terrain_GetHeightMap (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Terrain_GetMaterial (IntPtr handle);

		/// <summary>
		/// Return material.
		/// </summary>
		private Material GetMaterial ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<Material> (Terrain_GetMaterial (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Terrain_GetPatch (IntPtr handle, uint index);

		/// <summary>
		/// Return patch by index.
		/// </summary>
		public TerrainPatch GetPatch (uint index)
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<TerrainPatch> (Terrain_GetPatch (handle, index));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Terrain_GetPatch0 (IntPtr handle, int x, int z);

		/// <summary>
		/// Return patch by patch coordinates.
		/// </summary>
		public TerrainPatch GetPatch (int x, int z)
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<TerrainPatch> (Terrain_GetPatch0 (handle, x, z));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Terrain_GetNeighborPatch (IntPtr handle, int x, int z);

		/// <summary>
		/// Return patch by patch coordinates including neighbor terrains.
		/// </summary>
		public TerrainPatch GetNeighborPatch (int x, int z)
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<TerrainPatch> (Terrain_GetNeighborPatch (handle, x, z));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float Terrain_GetHeight (IntPtr handle, ref Urho.Vector3 worldPosition);

		/// <summary>
		/// Return height at world coordinates.
		/// </summary>
		public float GetHeight (Urho.Vector3 worldPosition)
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_GetHeight (handle, ref worldPosition);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Vector3 Terrain_GetNormal (IntPtr handle, ref Urho.Vector3 worldPosition);

		/// <summary>
		/// Return normal at world coordinates.
		/// </summary>
		public Vector3 GetNormal (Urho.Vector3 worldPosition)
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_GetNormal (handle, ref worldPosition);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntVector2 Terrain_WorldToHeightMap (IntPtr handle, ref Urho.Vector3 worldPosition);

		/// <summary>
		/// Convert world position to heightmap pixel position. Note that the internal height data representation is reversed vertically, but in the heightmap image north is at the top.
		/// </summary>
		public IntVector2 WorldToHeightMap (Urho.Vector3 worldPosition)
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_WorldToHeightMap (handle, ref worldPosition);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Terrain_GetNorthNeighbor (IntPtr handle);

		/// <summary>
		/// Return north neighbor terrain.
		/// </summary>
		private Terrain GetNorthNeighbor ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<Terrain> (Terrain_GetNorthNeighbor (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Terrain_GetSouthNeighbor (IntPtr handle);

		/// <summary>
		/// Return south neighbor terrain.
		/// </summary>
		private Terrain GetSouthNeighbor ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<Terrain> (Terrain_GetSouthNeighbor (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Terrain_GetWestNeighbor (IntPtr handle);

		/// <summary>
		/// Return west neighbor terrain.
		/// </summary>
		private Terrain GetWestNeighbor ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<Terrain> (Terrain_GetWestNeighbor (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Terrain_GetEastNeighbor (IntPtr handle);

		/// <summary>
		/// Return east neighbor terrain.
		/// </summary>
		private Terrain GetEastNeighbor ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<Terrain> (Terrain_GetEastNeighbor (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float Terrain_GetDrawDistance (IntPtr handle);

		/// <summary>
		/// Return draw distance.
		/// </summary>
		private float GetDrawDistance ()
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_GetDrawDistance (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float Terrain_GetShadowDistance (IntPtr handle);

		/// <summary>
		/// Return shadow draw distance.
		/// </summary>
		private float GetShadowDistance ()
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_GetShadowDistance (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float Terrain_GetLodBias (IntPtr handle);

		/// <summary>
		/// Return LOD bias.
		/// </summary>
		private float GetLodBias ()
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_GetLodBias (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint Terrain_GetViewMask (IntPtr handle);

		/// <summary>
		/// Return view mask.
		/// </summary>
		private uint GetViewMask ()
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_GetViewMask (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint Terrain_GetLightMask (IntPtr handle);

		/// <summary>
		/// Return light mask.
		/// </summary>
		private uint GetLightMask ()
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_GetLightMask (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint Terrain_GetShadowMask (IntPtr handle);

		/// <summary>
		/// Return shadow mask.
		/// </summary>
		private uint GetShadowMask ()
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_GetShadowMask (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint Terrain_GetZoneMask (IntPtr handle);

		/// <summary>
		/// Return zone mask.
		/// </summary>
		private uint GetZoneMask ()
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_GetZoneMask (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint Terrain_GetMaxLights (IntPtr handle);

		/// <summary>
		/// Return maximum number of per-pixel lights.
		/// </summary>
		private uint GetMaxLights ()
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_GetMaxLights (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Terrain_IsVisible (IntPtr handle);

		/// <summary>
		/// Return visible flag.
		/// </summary>
		private bool IsVisible ()
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_IsVisible (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Terrain_GetCastShadows (IntPtr handle);

		/// <summary>
		/// Return shadowcaster flag.
		/// </summary>
		private bool GetCastShadows ()
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_GetCastShadows (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Terrain_IsOccluder (IntPtr handle);

		/// <summary>
		/// Return occluder flag.
		/// </summary>
		private bool IsOccluder ()
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_IsOccluder (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Terrain_IsOccludee (IntPtr handle);

		/// <summary>
		/// Return occludee flag.
		/// </summary>
		private bool IsOccludee ()
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_IsOccludee (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_CreatePatchGeometry (IntPtr handle, IntPtr patch);

		/// <summary>
		/// Regenerate patch geometry.
		/// </summary>
		public void CreatePatchGeometry (TerrainPatch patch)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_CreatePatchGeometry (handle, (object)patch == null ? IntPtr.Zero : patch.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_UpdatePatchLod (IntPtr handle, IntPtr patch);

		/// <summary>
		/// Update patch based on LOD and neighbor LOD.
		/// </summary>
		public void UpdatePatchLod (TerrainPatch patch)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_UpdatePatchLod (handle, (object)patch == null ? IntPtr.Zero : patch.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetPatchSizeAttr (IntPtr handle, int value);

		/// <summary>
		/// Set patch size attribute.
		/// </summary>
		public void SetPatchSizeAttr (int value)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetPatchSizeAttr (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetMaxLodLevelsAttr (IntPtr handle, uint value);

		/// <summary>
		/// Set max LOD levels attribute.
		/// </summary>
		public void SetMaxLodLevelsAttr (uint value)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetMaxLodLevelsAttr (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Terrain_SetOcclusionLodLevelAttr (IntPtr handle, uint value);

		/// <summary>
		/// Set occlusion LOD level attribute.
		/// </summary>
		public void SetOcclusionLodLevelAttr (uint value)
		{
			Runtime.ValidateRefCounted (this);
			Terrain_SetOcclusionLodLevelAttr (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern ResourceRef Terrain_GetHeightMapAttr (IntPtr handle);

		/// <summary>
		/// Return heightmap attribute.
		/// </summary>
		private ResourceRef GetHeightMapAttr ()
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_GetHeightMapAttr (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern ResourceRef Terrain_GetMaterialAttr (IntPtr handle);

		/// <summary>
		/// Return material attribute.
		/// </summary>
		private ResourceRef GetMaterialAttr ()
		{
			Runtime.ValidateRefCounted (this);
			return Terrain_GetMaterialAttr (handle);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		public new static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public new static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Return patch quads per side.
		/// Or
		/// Set patch quads per side. Must be a power of two.
		/// </summary>
		public int PatchSize {
			get {
				return GetPatchSize ();
			}
			set {
				SetPatchSize (value);
			}
		}

		/// <summary>
		/// Return vertex and height spacing.
		/// Or
		/// Set vertex (XZ) and height (Y) spacing.
		/// </summary>
		public Urho.Vector3 Spacing {
			get {
				return GetSpacing ();
			}
			set {
				SetSpacing (value);
			}
		}

		/// <summary>
		/// Return maximum number of LOD levels for terrain patches. This can be between 1-4.
		/// Or
		/// Set maximum number of LOD levels for terrain patches. This can be between 1-4.
		/// </summary>
		public uint MaxLodLevels {
			get {
				return GetMaxLodLevels ();
			}
			set {
				SetMaxLodLevels (value);
			}
		}

		/// <summary>
		/// Return LOD level used for occlusion.
		/// Or
		/// Set LOD level used for terrain patch occlusion. By default (M_MAX_UNSIGNED) the coarsest. Since the LOD level used needs to be fixed, using finer LOD levels may result in false positive occlusion in cases where the actual rendered geometry is coarser, so use with caution.
		/// </summary>
		public uint OcclusionLodLevel {
			get {
				return GetOcclusionLodLevel ();
			}
			set {
				SetOcclusionLodLevel (value);
			}
		}

		/// <summary>
		/// Return whether smoothing is in use.
		/// Or
		/// Set smoothing of heightmap.
		/// </summary>
		public bool Smoothing {
			get {
				return GetSmoothing ();
			}
			set {
				SetSmoothing (value);
			}
		}

		/// <summary>
		/// Return material.
		/// Or
		/// Set material.
		/// </summary>
		public Material Material {
			get {
				return GetMaterial ();
			}
			set {
				SetMaterial (value);
			}
		}

		/// <summary>
		/// Return north neighbor terrain.
		/// Or
		/// Set north (positive Z) neighbor terrain for seamless LOD changes across terrains.
		/// </summary>
		public Terrain NorthNeighbor {
			get {
				return GetNorthNeighbor ();
			}
			set {
				SetNorthNeighbor (value);
			}
		}

		/// <summary>
		/// Return south neighbor terrain.
		/// Or
		/// Set south (negative Z) neighbor terrain for seamless LOD changes across terrains.
		/// </summary>
		public Terrain SouthNeighbor {
			get {
				return GetSouthNeighbor ();
			}
			set {
				SetSouthNeighbor (value);
			}
		}

		/// <summary>
		/// Return west neighbor terrain.
		/// Or
		/// Set west (negative X) neighbor terrain for seamless LOD changes across terrains.
		/// </summary>
		public Terrain WestNeighbor {
			get {
				return GetWestNeighbor ();
			}
			set {
				SetWestNeighbor (value);
			}
		}

		/// <summary>
		/// Return east neighbor terrain.
		/// Or
		/// Set east (positive X) neighbor terrain for seamless LOD changes across terrains.
		/// </summary>
		public Terrain EastNeighbor {
			get {
				return GetEastNeighbor ();
			}
			set {
				SetEastNeighbor (value);
			}
		}

		/// <summary>
		/// Return draw distance.
		/// Or
		/// Set draw distance for patches.
		/// </summary>
		public float DrawDistance {
			get {
				return GetDrawDistance ();
			}
			set {
				SetDrawDistance (value);
			}
		}

		/// <summary>
		/// Return shadow draw distance.
		/// Or
		/// Set shadow draw distance for patches.
		/// </summary>
		public float ShadowDistance {
			get {
				return GetShadowDistance ();
			}
			set {
				SetShadowDistance (value);
			}
		}

		/// <summary>
		/// Return LOD bias.
		/// Or
		/// Set LOD bias for patches. Affects which terrain LOD to display.
		/// </summary>
		public float LodBias {
			get {
				return GetLodBias ();
			}
			set {
				SetLodBias (value);
			}
		}

		/// <summary>
		/// Return view mask.
		/// Or
		/// Set view mask for patches. Is and'ed with camera's view mask to see if the object should be rendered.
		/// </summary>
		public uint ViewMask {
			get {
				return GetViewMask ();
			}
			set {
				SetViewMask (value);
			}
		}

		/// <summary>
		/// Return light mask.
		/// Or
		/// Set light mask for patches. Is and'ed with light's and zone's light mask to see if the object should be lit.
		/// </summary>
		public uint LightMask {
			get {
				return GetLightMask ();
			}
			set {
				SetLightMask (value);
			}
		}

		/// <summary>
		/// Return shadow mask.
		/// Or
		/// Set shadow mask for patches. Is and'ed with light's light mask and zone's shadow mask to see if the object should be rendered to a shadow map.
		/// </summary>
		public uint ShadowMask {
			get {
				return GetShadowMask ();
			}
			set {
				SetShadowMask (value);
			}
		}

		/// <summary>
		/// Return zone mask.
		/// Or
		/// Set zone mask for patches. Is and'ed with zone's zone mask to see if the object should belong to the zone.
		/// </summary>
		public uint ZoneMask {
			get {
				return GetZoneMask ();
			}
			set {
				SetZoneMask (value);
			}
		}

		/// <summary>
		/// Return maximum number of per-pixel lights.
		/// Or
		/// Set maximum number of per-pixel lights for patches. Default 0 is unlimited.
		/// </summary>
		public uint MaxLights {
			get {
				return GetMaxLights ();
			}
			set {
				SetMaxLights (value);
			}
		}

		/// <summary>
		/// Return shadowcaster flag.
		/// Or
		/// Set shadowcaster flag for patches.
		/// </summary>
		public bool CastShadows {
			get {
				return GetCastShadows ();
			}
			set {
				SetCastShadows (value);
			}
		}

		/// <summary>
		/// Return occluder flag.
		/// Or
		/// Set occlusion flag for patches. Occlusion uses the coarsest LOD by default.
		/// </summary>
		public bool Occluder {
			get {
				return IsOccluder ();
			}
			set {
				SetOccluder (value);
			}
		}

		/// <summary>
		/// Return occludee flag.
		/// Or
		/// Set occludee flag for patches.
		/// </summary>
		public bool Occludee {
			get {
				return IsOccludee ();
			}
			set {
				SetOccludee (value);
			}
		}

		/// <summary>
		/// Return heightmap size in vertices.
		/// </summary>
		public Urho.IntVector2 NumVertices {
			get {
				return GetNumVertices ();
			}
		}

		/// <summary>
		/// Return heightmap size in patches.
		/// </summary>
		public Urho.IntVector2 NumPatches {
			get {
				return GetNumPatches ();
			}
		}

		/// <summary>
		/// Return heightmap image.
		/// </summary>
		public Image HeightMap {
			get {
				return GetHeightMap ();
			}
		}

		/// <summary>
		/// Return visible flag.
		/// </summary>
		public bool Visible {
			get {
				return IsVisible ();
			}
		}

		/// <summary>
		/// Return heightmap attribute.
		/// </summary>
		public ResourceRef HeightMapAttr {
			get {
				return GetHeightMapAttr ();
			}
		}

		/// <summary>
		/// Return material attribute.
		/// </summary>
		public ResourceRef MaterialAttr {
			get {
				return GetMaterialAttr ();
			}
		}
	}
}
