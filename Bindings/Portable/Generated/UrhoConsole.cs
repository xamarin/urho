// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Generated using `sharpie urho`
// 
// UrhoConsole.cs
// 
// Copyright 2015 Xamarin Inc. All rights reserved.

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho
{
	/// <summary>
	/// %Console window with log history and command line prompt.
	/// </summary>
	public unsafe partial class UrhoConsole : UrhoObject
	{
		public UrhoConsole (IntPtr handle) : base (handle)
		{
		}

		protected UrhoConsole (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int UrhoConsole_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (UrhoConsole_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr UrhoConsole_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (UrhoConsole_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int UrhoConsole_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(UrhoConsole));
			return new StringHash (UrhoConsole_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr UrhoConsole_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(UrhoConsole));
			return Marshal.PtrToStringAnsi (UrhoConsole_GetTypeNameStatic ());
		}

		public UrhoConsole () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr UrhoConsole_Console (IntPtr context);

		public UrhoConsole (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(UrhoConsole));
			handle = UrhoConsole_Console ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoConsole_SetDefaultStyle (IntPtr handle, IntPtr style);

		/// <summary>
		/// Set UI elements' style from an XML file.
		/// </summary>
		private void SetDefaultStyle (Urho.Resources.XmlFile style)
		{
			Runtime.ValidateRefCounted (this);
			UrhoConsole_SetDefaultStyle (handle, (object)style == null ? IntPtr.Zero : style.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoConsole_SetVisible (IntPtr handle, bool enable);

		/// <summary>
		/// Show or hide.
		/// </summary>
		private void SetVisible (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			UrhoConsole_SetVisible (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoConsole_Toggle (IntPtr handle);

		/// <summary>
		/// Toggle visibility.
		/// </summary>
		public void Toggle ()
		{
			Runtime.ValidateRefCounted (this);
			UrhoConsole_Toggle (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoConsole_SetAutoVisibleOnError (IntPtr handle, bool enable);

		/// <summary>
		/// Automatically set console to visible when receiving an error log message.
		/// </summary>
		private void SetAutoVisibleOnError (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			UrhoConsole_SetAutoVisibleOnError (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoConsole_SetCommandInterpreter (IntPtr handle, string interpreter);

		/// <summary>
		/// Set the command interpreter.
		/// </summary>
		private void SetCommandInterpreter (string interpreter)
		{
			Runtime.ValidateRefCounted (this);
			UrhoConsole_SetCommandInterpreter (handle, interpreter);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoConsole_SetNumBufferedRows (IntPtr handle, uint rows);

		/// <summary>
		/// Set number of buffered rows.
		/// </summary>
		private void SetNumBufferedRows (uint rows)
		{
			Runtime.ValidateRefCounted (this);
			UrhoConsole_SetNumBufferedRows (handle, rows);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoConsole_SetNumRows (IntPtr handle, uint rows);

		/// <summary>
		/// Set number of displayed rows.
		/// </summary>
		private void SetNumRows (uint rows)
		{
			Runtime.ValidateRefCounted (this);
			UrhoConsole_SetNumRows (handle, rows);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoConsole_SetNumHistoryRows (IntPtr handle, uint rows);

		/// <summary>
		/// Set command history maximum size, 0 disables history.
		/// </summary>
		private void SetNumHistoryRows (uint rows)
		{
			Runtime.ValidateRefCounted (this);
			UrhoConsole_SetNumHistoryRows (handle, rows);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoConsole_SetFocusOnShow (IntPtr handle, bool enable);

		/// <summary>
		/// Set whether to automatically focus the line edit when showing. Default true on desktops and false on mobile devices, as on mobiles it would pop up the screen keyboard.
		/// </summary>
		private void SetFocusOnShow (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			UrhoConsole_SetFocusOnShow (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoConsole_UpdateElements (IntPtr handle);

		/// <summary>
		/// Update elements to layout properly. Call this after manually adjusting the sub-elements.
		/// </summary>
		public void UpdateElements ()
		{
			Runtime.ValidateRefCounted (this);
			UrhoConsole_UpdateElements (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr UrhoConsole_GetDefaultStyle (IntPtr handle);

		/// <summary>
		/// Return the UI style file.
		/// </summary>
		private Urho.Resources.XmlFile GetDefaultStyle ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<Urho.Resources.XmlFile> (UrhoConsole_GetDefaultStyle (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr UrhoConsole_GetBackground (IntPtr handle);

		/// <summary>
		/// Return the background element.
		/// </summary>
		private BorderImage GetBackground ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<BorderImage> (UrhoConsole_GetBackground (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr UrhoConsole_GetLineEdit (IntPtr handle);

		/// <summary>
		/// Return the line edit element.
		/// </summary>
		private LineEdit GetLineEdit ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<LineEdit> (UrhoConsole_GetLineEdit (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr UrhoConsole_GetCloseButton (IntPtr handle);

		/// <summary>
		/// Return the close butoon element.
		/// </summary>
		private Button GetCloseButton ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<Button> (UrhoConsole_GetCloseButton (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool UrhoConsole_IsVisible (IntPtr handle);

		/// <summary>
		/// Return whether is visible.
		/// </summary>
		private bool IsVisible ()
		{
			Runtime.ValidateRefCounted (this);
			return UrhoConsole_IsVisible (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool UrhoConsole_IsAutoVisibleOnError (IntPtr handle);

		/// <summary>
		/// Return true when console is set to automatically visible when receiving an error log message.
		/// </summary>
		private bool IsAutoVisibleOnError ()
		{
			Runtime.ValidateRefCounted (this);
			return UrhoConsole_IsAutoVisibleOnError (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr UrhoConsole_GetCommandInterpreter (IntPtr handle);

		/// <summary>
		/// Return the last used command interpreter.
		/// </summary>
		private string GetCommandInterpreter ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (UrhoConsole_GetCommandInterpreter (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint UrhoConsole_GetNumBufferedRows (IntPtr handle);

		/// <summary>
		/// Return number of buffered rows.
		/// </summary>
		private uint GetNumBufferedRows ()
		{
			Runtime.ValidateRefCounted (this);
			return UrhoConsole_GetNumBufferedRows (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint UrhoConsole_GetNumRows (IntPtr handle);

		/// <summary>
		/// Return number of displayed rows.
		/// </summary>
		private uint GetNumRows ()
		{
			Runtime.ValidateRefCounted (this);
			return UrhoConsole_GetNumRows (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UrhoConsole_CopySelectedRows (IntPtr handle);

		/// <summary>
		/// Copy selected rows to system clipboard.
		/// </summary>
		public void CopySelectedRows ()
		{
			Runtime.ValidateRefCounted (this);
			UrhoConsole_CopySelectedRows (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint UrhoConsole_GetNumHistoryRows (IntPtr handle);

		/// <summary>
		/// Return history maximum size.
		/// </summary>
		private uint GetNumHistoryRows ()
		{
			Runtime.ValidateRefCounted (this);
			return UrhoConsole_GetNumHistoryRows (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint UrhoConsole_GetHistoryPosition (IntPtr handle);

		/// <summary>
		/// Return current history position.
		/// </summary>
		private uint GetHistoryPosition ()
		{
			Runtime.ValidateRefCounted (this);
			return UrhoConsole_GetHistoryPosition (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr UrhoConsole_GetHistoryRow (IntPtr handle, uint index);

		/// <summary>
		/// Return history row at index.
		/// </summary>
		public string GetHistoryRow (uint index)
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (UrhoConsole_GetHistoryRow (handle, index));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool UrhoConsole_GetFocusOnShow (IntPtr handle);

		/// <summary>
		/// Return whether automatically focuses the line edit when showing.
		/// </summary>
		private bool GetFocusOnShow ()
		{
			Runtime.ValidateRefCounted (this);
			return UrhoConsole_GetFocusOnShow (handle);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		public static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Return the UI style file.
		/// Or
		/// Set UI elements' style from an XML file.
		/// </summary>
		public Urho.Resources.XmlFile DefaultStyle {
			get {
				return GetDefaultStyle ();
			}
			set {
				SetDefaultStyle (value);
			}
		}

		/// <summary>
		/// Return whether is visible.
		/// Or
		/// Show or hide.
		/// </summary>
		public bool Visible {
			get {
				return IsVisible ();
			}
			set {
				SetVisible (value);
			}
		}

		/// <summary>
		/// Return true when console is set to automatically visible when receiving an error log message.
		/// Or
		/// Automatically set console to visible when receiving an error log message.
		/// </summary>
		public bool AutoVisibleOnError {
			get {
				return IsAutoVisibleOnError ();
			}
			set {
				SetAutoVisibleOnError (value);
			}
		}

		/// <summary>
		/// Return the last used command interpreter.
		/// Or
		/// Set the command interpreter.
		/// </summary>
		public string CommandInterpreter {
			get {
				return GetCommandInterpreter ();
			}
			set {
				SetCommandInterpreter (value);
			}
		}

		/// <summary>
		/// Return number of buffered rows.
		/// Or
		/// Set number of buffered rows.
		/// </summary>
		public uint NumBufferedRows {
			get {
				return GetNumBufferedRows ();
			}
			set {
				SetNumBufferedRows (value);
			}
		}

		/// <summary>
		/// Return number of displayed rows.
		/// Or
		/// Set number of displayed rows.
		/// </summary>
		public uint NumRows {
			get {
				return GetNumRows ();
			}
			set {
				SetNumRows (value);
			}
		}

		/// <summary>
		/// Return history maximum size.
		/// Or
		/// Set command history maximum size, 0 disables history.
		/// </summary>
		public uint NumHistoryRows {
			get {
				return GetNumHistoryRows ();
			}
			set {
				SetNumHistoryRows (value);
			}
		}

		/// <summary>
		/// Return whether automatically focuses the line edit when showing.
		/// Or
		/// Set whether to automatically focus the line edit when showing. Default true on desktops and false on mobile devices, as on mobiles it would pop up the screen keyboard.
		/// </summary>
		public bool FocusOnShow {
			get {
				return GetFocusOnShow ();
			}
			set {
				SetFocusOnShow (value);
			}
		}

		/// <summary>
		/// Return the background element.
		/// </summary>
		public BorderImage Background {
			get {
				return GetBackground ();
			}
		}

		/// <summary>
		/// Return the line edit element.
		/// </summary>
		public LineEdit LineEdit {
			get {
				return GetLineEdit ();
			}
		}

		/// <summary>
		/// Return the close butoon element.
		/// </summary>
		public Button CloseButton {
			get {
				return GetCloseButton ();
			}
		}

		/// <summary>
		/// Return current history position.
		/// </summary>
		public uint HistoryPosition {
			get {
				return GetHistoryPosition ();
			}
		}
	}
}
