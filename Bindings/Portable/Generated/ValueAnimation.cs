// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Generated using `sharpie urho`
// 
// ValueAnimation.cs
// 
// Copyright 2015 Xamarin Inc. All rights reserved.

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho
{
	/// <summary>
	/// Value animation class.
	/// </summary>
	public unsafe partial class ValueAnimation : Resource
	{
		public ValueAnimation (IntPtr handle) : base (handle)
		{
		}

		protected ValueAnimation (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int ValueAnimation_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (ValueAnimation_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr ValueAnimation_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (ValueAnimation_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int ValueAnimation_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(ValueAnimation));
			return new StringHash (ValueAnimation_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr ValueAnimation_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(ValueAnimation));
			return Marshal.PtrToStringAnsi (ValueAnimation_GetTypeNameStatic ());
		}

		public ValueAnimation () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr ValueAnimation_ValueAnimation (IntPtr context);

		public ValueAnimation (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(ValueAnimation));
			handle = ValueAnimation_ValueAnimation ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ValueAnimation_RegisterObject (IntPtr context);

		/// <summary>
		/// Register object factory.
		/// </summary>
		public static void RegisterObject (Context context)
		{
			Runtime.Validate (typeof(ValueAnimation));
			ValueAnimation_RegisterObject ((object)context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ValueAnimation_BeginLoad (IntPtr handle, IntPtr source);

		/// <summary>
		/// Load resource from stream. May be called from a worker thread. Return true if successful.
		/// </summary>
		public override bool BeginLoad (File source)
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_BeginLoad (handle, (object)source == null ? IntPtr.Zero : source.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ValueAnimation_Save (IntPtr handle, IntPtr dest);

		/// <summary>
		/// Save resource. Return true if successful.
		/// </summary>
		public override bool Save (File dest)
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_Save (handle, (object)dest == null ? IntPtr.Zero : dest.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ValueAnimation_LoadXML (IntPtr handle, ref Urho.Resources.XmlElement source);

		/// <summary>
		/// Load from XML data. Return true if successful.
		/// </summary>
		public bool LoadXml (Urho.Resources.XmlElement source)
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_LoadXML (handle, ref source);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ValueAnimation_SaveXML (IntPtr handle, ref Urho.Resources.XmlElement dest);

		/// <summary>
		/// Save as XML data. Return true if successful.
		/// </summary>
		public bool SaveXml (Urho.Resources.XmlElement dest)
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_SaveXML (handle, ref dest);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ValueAnimation_SetOwner (IntPtr handle, IntPtr owner);

		/// <summary>
		/// Set owner.
		/// </summary>
		private void SetOwner (IntPtr owner)
		{
			Runtime.ValidateRefCounted (this);
			ValueAnimation_SetOwner (handle, owner);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ValueAnimation_SetInterpolationMethod (IntPtr handle, InterpMethod method);

		/// <summary>
		/// Set interpolation method.
		/// </summary>
		private void SetInterpolationMethod (InterpMethod method)
		{
			Runtime.ValidateRefCounted (this);
			ValueAnimation_SetInterpolationMethod (handle, method);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ValueAnimation_SetSplineTension (IntPtr handle, float tension);

		/// <summary>
		/// Set spline tension, should be between 0.0f and 1.0f, but this is not a must.
		/// </summary>
		private void SetSplineTension (float tension)
		{
			Runtime.ValidateRefCounted (this);
			ValueAnimation_SetSplineTension (handle, tension);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ValueAnimation_SetValueType (IntPtr handle, VariantType valueType);

		/// <summary>
		/// Set value type.
		/// </summary>
		private void SetValueType (VariantType valueType)
		{
			Runtime.ValidateRefCounted (this);
			ValueAnimation_SetValueType (handle, valueType);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ValueAnimation_SetKeyFrame0 (IntPtr handle, float time, ref Vector3 value);

		/// <summary>
		/// Set key frame.
		/// </summary>
		public bool SetKeyFrame (float time, Vector3 value)
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_SetKeyFrame0 (handle, time, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ValueAnimation_SetKeyFrame1 (IntPtr handle, float time, ref IntRect value);

		/// <summary>
		/// Set key frame.
		/// </summary>
		public bool SetKeyFrame (float time, IntRect value)
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_SetKeyFrame1 (handle, time, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ValueAnimation_SetKeyFrame2 (IntPtr handle, float time, ref Color value);

		/// <summary>
		/// Set key frame.
		/// </summary>
		public bool SetKeyFrame (float time, Color value)
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_SetKeyFrame2 (handle, time, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ValueAnimation_SetKeyFrame3 (IntPtr handle, float time, ref Vector2 value);

		/// <summary>
		/// Set key frame.
		/// </summary>
		public bool SetKeyFrame (float time, Vector2 value)
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_SetKeyFrame3 (handle, time, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ValueAnimation_SetKeyFrame4 (IntPtr handle, float time, ref Vector4 value);

		/// <summary>
		/// Set key frame.
		/// </summary>
		public bool SetKeyFrame (float time, Vector4 value)
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_SetKeyFrame4 (handle, time, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ValueAnimation_SetKeyFrame5 (IntPtr handle, float time, ref IntVector2 value);

		/// <summary>
		/// Set key frame.
		/// </summary>
		public bool SetKeyFrame (float time, IntVector2 value)
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_SetKeyFrame5 (handle, time, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ValueAnimation_SetKeyFrame6 (IntPtr handle, float time, ref Quaternion value);

		/// <summary>
		/// Set key frame.
		/// </summary>
		public bool SetKeyFrame (float time, Quaternion value)
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_SetKeyFrame6 (handle, time, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ValueAnimation_SetKeyFrame7 (IntPtr handle, float time, ref Matrix4 value);

		/// <summary>
		/// Set key frame.
		/// </summary>
		public bool SetKeyFrame (float time, Matrix4 value)
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_SetKeyFrame7 (handle, time, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ValueAnimation_SetKeyFrame8 (IntPtr handle, float time, ref Matrix3x4 value);

		/// <summary>
		/// Set key frame.
		/// </summary>
		public bool SetKeyFrame (float time, Matrix3x4 value)
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_SetKeyFrame8 (handle, time, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ValueAnimation_SetKeyFrame9 (IntPtr handle, float time, int value);

		/// <summary>
		/// Set key frame.
		/// </summary>
		public bool SetKeyFrame (float time, int value)
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_SetKeyFrame9 (handle, time, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ValueAnimation_SetKeyFrame10 (IntPtr handle, float time, float value);

		/// <summary>
		/// Set key frame.
		/// </summary>
		public bool SetKeyFrame (float time, float value)
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_SetKeyFrame10 (handle, time, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ValueAnimation_SetKeyFrame11 (IntPtr handle, float time, string value);

		/// <summary>
		/// Set key frame.
		/// </summary>
		public bool SetKeyFrame (float time, string value)
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_SetKeyFrame11 (handle, time, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ValueAnimation_IsValid (IntPtr handle);

		/// <summary>
		/// Return animation is valid.
		/// </summary>
		private bool IsValid ()
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_IsValid (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr ValueAnimation_GetOwner (IntPtr handle);

		/// <summary>
		/// Return owner.
		/// </summary>
		private IntPtr GetOwner ()
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_GetOwner (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern InterpMethod ValueAnimation_GetInterpolationMethod (IntPtr handle);

		/// <summary>
		/// Return interpolation method.
		/// </summary>
		private InterpMethod GetInterpolationMethod ()
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_GetInterpolationMethod (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float ValueAnimation_GetSplineTension (IntPtr handle);

		/// <summary>
		/// Return spline tension.
		/// </summary>
		private float GetSplineTension ()
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_GetSplineTension (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern VariantType ValueAnimation_GetValueType (IntPtr handle);

		/// <summary>
		/// Return value type.
		/// </summary>
		private VariantType GetValueType ()
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_GetValueType (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float ValueAnimation_GetBeginTime (IntPtr handle);

		/// <summary>
		/// Return begin time.
		/// </summary>
		private float GetBeginTime ()
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_GetBeginTime (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float ValueAnimation_GetEndTime (IntPtr handle);

		/// <summary>
		/// Return end time.
		/// </summary>
		private float GetEndTime ()
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_GetEndTime (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Variant ValueAnimation_GetAnimationValue (IntPtr handle, float scaledTime);

		/// <summary>
		/// Return animation value.
		/// </summary>
		public Variant GetAnimationValue (float scaledTime)
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_GetAnimationValue (handle, scaledTime);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ValueAnimation_HasEventFrames (IntPtr handle);

		/// <summary>
		/// Has event frames.
		/// </summary>
		public bool HasEventFrames ()
		{
			Runtime.ValidateRefCounted (this);
			return ValueAnimation_HasEventFrames (handle);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		public new static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public new static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Return owner.
		/// Or
		/// Set owner.
		/// </summary>
		public IntPtr Owner {
			get {
				return GetOwner ();
			}
			set {
				SetOwner (value);
			}
		}

		/// <summary>
		/// Return interpolation method.
		/// Or
		/// Set interpolation method.
		/// </summary>
		public InterpMethod InterpolationMethod {
			get {
				return GetInterpolationMethod ();
			}
			set {
				SetInterpolationMethod (value);
			}
		}

		/// <summary>
		/// Return spline tension.
		/// Or
		/// Set spline tension, should be between 0.0f and 1.0f, but this is not a must.
		/// </summary>
		public float SplineTension {
			get {
				return GetSplineTension ();
			}
			set {
				SetSplineTension (value);
			}
		}

		/// <summary>
		/// Return value type.
		/// Or
		/// Set value type.
		/// </summary>
		public VariantType ValueType {
			get {
				return GetValueType ();
			}
			set {
				SetValueType (value);
			}
		}

		/// <summary>
		/// Return animation is valid.
		/// </summary>
		public bool Valid {
			get {
				return IsValid ();
			}
		}

		/// <summary>
		/// Return begin time.
		/// </summary>
		public float BeginTime {
			get {
				return GetBeginTime ();
			}
		}

		/// <summary>
		/// Return end time.
		/// </summary>
		public float EndTime {
			get {
				return GetEndTime ();
			}
		}
	}
}
