// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Generated using `sharpie urho`
// 
// TerrainPatch.cs
// 
// Copyright 2015 Xamarin Inc. All rights reserved.

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho
{
	/// <summary>
	/// Individually rendered part of a heightmap terrain.
	/// </summary>
	public unsafe partial class TerrainPatch : Drawable
	{
		public TerrainPatch (IntPtr handle) : base (handle)
		{
		}

		protected TerrainPatch (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int TerrainPatch_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (TerrainPatch_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr TerrainPatch_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (TerrainPatch_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int TerrainPatch_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(TerrainPatch));
			return new StringHash (TerrainPatch_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr TerrainPatch_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(TerrainPatch));
			return Marshal.PtrToStringAnsi (TerrainPatch_GetTypeNameStatic ());
		}

		public TerrainPatch () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr TerrainPatch_TerrainPatch (IntPtr context);

		public TerrainPatch (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(TerrainPatch));
			handle = TerrainPatch_TerrainPatch ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void TerrainPatch_RegisterObject (IntPtr context);

		/// <summary>
		/// Register object factory.
		/// </summary>
		public new static void RegisterObject (Context context)
		{
			Runtime.Validate (typeof(TerrainPatch));
			TerrainPatch_RegisterObject ((object)context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern UpdateGeometryType TerrainPatch_GetUpdateGeometryType (IntPtr handle);

		/// <summary>
		/// Return whether a geometry update is necessary, and if it can happen in a worker thread.
		/// </summary>
		private UpdateGeometryType GetUpdateGeometryType ()
		{
			Runtime.ValidateRefCounted (this);
			return TerrainPatch_GetUpdateGeometryType (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr TerrainPatch_GetLodGeometry (IntPtr handle, uint batchIndex, uint level);

		/// <summary>
		/// Return the geometry for a specific LOD level.
		/// </summary>
		public override Geometry GetLodGeometry (uint batchIndex, uint level)
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<Geometry> (TerrainPatch_GetLodGeometry (handle, batchIndex, level));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint TerrainPatch_GetNumOccluderTriangles (IntPtr handle);

		/// <summary>
		/// Return number of occlusion geometry triangles.
		/// </summary>
		private uint GetNumOccluderTriangles ()
		{
			Runtime.ValidateRefCounted (this);
			return TerrainPatch_GetNumOccluderTriangles (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool TerrainPatch_DrawOcclusion (IntPtr handle, IntPtr buffer);

		/// <summary>
		/// Draw to occlusion buffer. Return true if did not run out of triangles.
		/// </summary>
		public override bool DrawOcclusion (OcclusionBuffer buffer)
		{
			Runtime.ValidateRefCounted (this);
			return TerrainPatch_DrawOcclusion (handle, (object)buffer == null ? IntPtr.Zero : buffer.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void TerrainPatch_DrawDebugGeometry (IntPtr handle, IntPtr debug, bool depthTest);

		/// <summary>
		/// Visualize the component as debug geometry.
		/// </summary>
		public override void DrawDebugGeometry (DebugRenderer debug, bool depthTest)
		{
			Runtime.ValidateRefCounted (this);
			TerrainPatch_DrawDebugGeometry (handle, (object)debug == null ? IntPtr.Zero : debug.Handle, depthTest);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void TerrainPatch_SetOwner (IntPtr handle, IntPtr terrain);

		/// <summary>
		/// Set owner terrain.
		/// </summary>
		private void SetOwner (Terrain terrain)
		{
			Runtime.ValidateRefCounted (this);
			TerrainPatch_SetOwner (handle, (object)terrain == null ? IntPtr.Zero : terrain.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void TerrainPatch_SetNeighbors (IntPtr handle, IntPtr north, IntPtr south, IntPtr west, IntPtr east);

		/// <summary>
		/// Set neighbor patches.
		/// </summary>
		public void SetNeighbors (TerrainPatch north, TerrainPatch south, TerrainPatch west, TerrainPatch east)
		{
			Runtime.ValidateRefCounted (this);
			TerrainPatch_SetNeighbors (handle, (object)north == null ? IntPtr.Zero : north.Handle, (object)south == null ? IntPtr.Zero : south.Handle, (object)west == null ? IntPtr.Zero : west.Handle, (object)east == null ? IntPtr.Zero : east.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void TerrainPatch_SetMaterial (IntPtr handle, IntPtr material);

		/// <summary>
		/// Set material.
		/// </summary>
		public void SetMaterial (Material material)
		{
			Runtime.ValidateRefCounted (this);
			TerrainPatch_SetMaterial (handle, (object)material == null ? IntPtr.Zero : material.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void TerrainPatch_SetBoundingBox (IntPtr handle, ref Urho.BoundingBox box);

		/// <summary>
		/// Set local-space bounding box.
		/// </summary>
		public void SetBoundingBox (Urho.BoundingBox box)
		{
			Runtime.ValidateRefCounted (this);
			TerrainPatch_SetBoundingBox (handle, ref box);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void TerrainPatch_SetCoordinates (IntPtr handle, ref Urho.IntVector2 coordinates);

		/// <summary>
		/// Set patch coordinates.
		/// </summary>
		private void SetCoordinates (Urho.IntVector2 coordinates)
		{
			Runtime.ValidateRefCounted (this);
			TerrainPatch_SetCoordinates (handle, ref coordinates);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void TerrainPatch_ResetLod (IntPtr handle);

		/// <summary>
		/// Reset to LOD level 0.
		/// </summary>
		public void ResetLod ()
		{
			Runtime.ValidateRefCounted (this);
			TerrainPatch_ResetLod (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr TerrainPatch_GetGeometry (IntPtr handle);

		/// <summary>
		/// Return visible geometry.
		/// </summary>
		private Geometry GetGeometry ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<Geometry> (TerrainPatch_GetGeometry (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr TerrainPatch_GetMaxLodGeometry (IntPtr handle);

		/// <summary>
		/// Return max LOD geometry. Used for decals.
		/// </summary>
		private Geometry GetMaxLodGeometry ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<Geometry> (TerrainPatch_GetMaxLodGeometry (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr TerrainPatch_GetOcclusionGeometry (IntPtr handle);

		/// <summary>
		/// Return geometry used for occlusion.
		/// </summary>
		private Geometry GetOcclusionGeometry ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<Geometry> (TerrainPatch_GetOcclusionGeometry (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr TerrainPatch_GetVertexBuffer (IntPtr handle);

		/// <summary>
		/// Return vertex buffer.
		/// </summary>
		private VertexBuffer GetVertexBuffer ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<VertexBuffer> (TerrainPatch_GetVertexBuffer (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr TerrainPatch_GetOwner (IntPtr handle);

		/// <summary>
		/// Return owner terrain.
		/// </summary>
		private Terrain GetOwner ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<Terrain> (TerrainPatch_GetOwner (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr TerrainPatch_GetNorthPatch (IntPtr handle);

		/// <summary>
		/// Return north neighbor patch.
		/// </summary>
		private TerrainPatch GetNorthPatch ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<TerrainPatch> (TerrainPatch_GetNorthPatch (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr TerrainPatch_GetSouthPatch (IntPtr handle);

		/// <summary>
		/// Return south neighbor patch.
		/// </summary>
		private TerrainPatch GetSouthPatch ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<TerrainPatch> (TerrainPatch_GetSouthPatch (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr TerrainPatch_GetWestPatch (IntPtr handle);

		/// <summary>
		/// Return west neighbor patch.
		/// </summary>
		private TerrainPatch GetWestPatch ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<TerrainPatch> (TerrainPatch_GetWestPatch (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr TerrainPatch_GetEastPatch (IntPtr handle);

		/// <summary>
		/// Return east neighbor patch.
		/// </summary>
		private TerrainPatch GetEastPatch ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<TerrainPatch> (TerrainPatch_GetEastPatch (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Urho.IntVector2 TerrainPatch_GetCoordinates (IntPtr handle);

		/// <summary>
		/// Return patch coordinates.
		/// </summary>
		private Urho.IntVector2 GetCoordinates ()
		{
			Runtime.ValidateRefCounted (this);
			return TerrainPatch_GetCoordinates (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint TerrainPatch_GetLodLevel (IntPtr handle);

		/// <summary>
		/// Return current LOD level.
		/// </summary>
		private uint GetLodLevel ()
		{
			Runtime.ValidateRefCounted (this);
			return TerrainPatch_GetLodLevel (handle);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		public new static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public new static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Return whether a geometry update is necessary, and if it can happen in a worker thread.
		/// </summary>
		public override UpdateGeometryType UpdateGeometryType {
			get {
				return GetUpdateGeometryType ();
			}
		}

		/// <summary>
		/// Return number of occlusion geometry triangles.
		/// </summary>
		public override uint NumOccluderTriangles {
			get {
				return GetNumOccluderTriangles ();
			}
		}

		/// <summary>
		/// Return owner terrain.
		/// Or
		/// Set owner terrain.
		/// </summary>
		public Terrain Owner {
			get {
				return GetOwner ();
			}
			set {
				SetOwner (value);
			}
		}

		/// <summary>
		/// Return patch coordinates.
		/// Or
		/// Set patch coordinates.
		/// </summary>
		public Urho.IntVector2 Coordinates {
			get {
				return GetCoordinates ();
			}
			set {
				SetCoordinates (value);
			}
		}

		/// <summary>
		/// Return visible geometry.
		/// </summary>
		public Geometry Geometry {
			get {
				return GetGeometry ();
			}
		}

		/// <summary>
		/// Return max LOD geometry. Used for decals.
		/// </summary>
		public Geometry MaxLodGeometry {
			get {
				return GetMaxLodGeometry ();
			}
		}

		/// <summary>
		/// Return geometry used for occlusion.
		/// </summary>
		public Geometry OcclusionGeometry {
			get {
				return GetOcclusionGeometry ();
			}
		}

		/// <summary>
		/// Return vertex buffer.
		/// </summary>
		public VertexBuffer VertexBuffer {
			get {
				return GetVertexBuffer ();
			}
		}

		/// <summary>
		/// Return north neighbor patch.
		/// </summary>
		public TerrainPatch NorthPatch {
			get {
				return GetNorthPatch ();
			}
		}

		/// <summary>
		/// Return south neighbor patch.
		/// </summary>
		public TerrainPatch SouthPatch {
			get {
				return GetSouthPatch ();
			}
		}

		/// <summary>
		/// Return west neighbor patch.
		/// </summary>
		public TerrainPatch WestPatch {
			get {
				return GetWestPatch ();
			}
		}

		/// <summary>
		/// Return east neighbor patch.
		/// </summary>
		public TerrainPatch EastPatch {
			get {
				return GetEastPatch ();
			}
		}

		/// <summary>
		/// Return current LOD level.
		/// </summary>
		public uint LodLevel {
			get {
				return GetLodLevel ();
			}
		}
	}
}
