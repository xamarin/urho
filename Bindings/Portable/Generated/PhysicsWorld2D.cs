// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Generated using `sharpie urho`
// 
// PhysicsWorld2D.cs
// 
// Copyright 2015 Xamarin Inc. All rights reserved.

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho.Urho2D
{
	/// <summary>
	/// 2D physics simulation world component. Should be added only to the root scene node.
	/// </summary>
	public unsafe partial class PhysicsWorld2D : Component
	{
		public PhysicsWorld2D (IntPtr handle) : base (handle)
		{
		}

		protected PhysicsWorld2D (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int PhysicsWorld2D_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (PhysicsWorld2D_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr PhysicsWorld2D_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (PhysicsWorld2D_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int PhysicsWorld2D_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(PhysicsWorld2D));
			return new StringHash (PhysicsWorld2D_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr PhysicsWorld2D_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(PhysicsWorld2D));
			return Marshal.PtrToStringAnsi (PhysicsWorld2D_GetTypeNameStatic ());
		}

		public PhysicsWorld2D () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr PhysicsWorld2D_PhysicsWorld2D (IntPtr context);

		public PhysicsWorld2D (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(PhysicsWorld2D));
			handle = PhysicsWorld2D_PhysicsWorld2D ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void PhysicsWorld2D_RegisterObject (IntPtr context);

		/// <summary>
		/// Register object factory.
		/// </summary>
		public new static void RegisterObject (Context context)
		{
			Runtime.Validate (typeof(PhysicsWorld2D));
			PhysicsWorld2D_RegisterObject ((object)context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void PhysicsWorld2D_DrawDebugGeometry (IntPtr handle, IntPtr debug, bool depthTest);

		/// <summary>
		/// Visualize the component as debug geometry.
		/// </summary>
		public override void DrawDebugGeometry (DebugRenderer debug, bool depthTest)
		{
			Runtime.ValidateRefCounted (this);
			PhysicsWorld2D_DrawDebugGeometry (handle, (object)debug == null ? IntPtr.Zero : debug.Handle, depthTest);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void PhysicsWorld2D_Update (IntPtr handle, float timeStep);

		/// <summary>
		/// Step the simulation forward.
		/// </summary>
		public void Update (float timeStep)
		{
			Runtime.ValidateRefCounted (this);
			PhysicsWorld2D_Update (handle, timeStep);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void PhysicsWorld2D_DrawDebugGeometry0 (IntPtr handle);

		/// <summary>
		/// Add debug geometry to the debug renderer.
		/// </summary>
		public void DrawDebugGeometry ()
		{
			Runtime.ValidateRefCounted (this);
			PhysicsWorld2D_DrawDebugGeometry0 (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void PhysicsWorld2D_SetUpdateEnabled (IntPtr handle, bool enable);

		/// <summary>
		/// Enable or disable automatic physics simulation during scene update. Enabled by default.
		/// </summary>
		private void SetUpdateEnabled (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			PhysicsWorld2D_SetUpdateEnabled (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void PhysicsWorld2D_SetDrawShape (IntPtr handle, bool drawShape);

		/// <summary>
		/// Set draw shape.
		/// </summary>
		private void SetDrawShape (bool drawShape)
		{
			Runtime.ValidateRefCounted (this);
			PhysicsWorld2D_SetDrawShape (handle, drawShape);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void PhysicsWorld2D_SetDrawJoint (IntPtr handle, bool drawJoint);

		/// <summary>
		/// Set draw joint.
		/// </summary>
		private void SetDrawJoint (bool drawJoint)
		{
			Runtime.ValidateRefCounted (this);
			PhysicsWorld2D_SetDrawJoint (handle, drawJoint);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void PhysicsWorld2D_SetDrawAabb (IntPtr handle, bool drawAabb);

		/// <summary>
		/// Set draw aabb.
		/// </summary>
		private void SetDrawAabb (bool drawAabb)
		{
			Runtime.ValidateRefCounted (this);
			PhysicsWorld2D_SetDrawAabb (handle, drawAabb);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void PhysicsWorld2D_SetDrawPair (IntPtr handle, bool drawPair);

		/// <summary>
		/// Set draw pair.
		/// </summary>
		private void SetDrawPair (bool drawPair)
		{
			Runtime.ValidateRefCounted (this);
			PhysicsWorld2D_SetDrawPair (handle, drawPair);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void PhysicsWorld2D_SetDrawCenterOfMass (IntPtr handle, bool drawCenterOfMass);

		/// <summary>
		/// Set draw center of mass.
		/// </summary>
		private void SetDrawCenterOfMass (bool drawCenterOfMass)
		{
			Runtime.ValidateRefCounted (this);
			PhysicsWorld2D_SetDrawCenterOfMass (handle, drawCenterOfMass);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void PhysicsWorld2D_SetAllowSleeping (IntPtr handle, bool enable);

		/// <summary>
		/// Set allow sleeping.
		/// </summary>
		private void SetAllowSleeping (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			PhysicsWorld2D_SetAllowSleeping (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void PhysicsWorld2D_SetWarmStarting (IntPtr handle, bool enable);

		/// <summary>
		/// Set warm starting.
		/// </summary>
		private void SetWarmStarting (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			PhysicsWorld2D_SetWarmStarting (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void PhysicsWorld2D_SetContinuousPhysics (IntPtr handle, bool enable);

		/// <summary>
		/// Set continuous physics.
		/// </summary>
		private void SetContinuousPhysics (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			PhysicsWorld2D_SetContinuousPhysics (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void PhysicsWorld2D_SetSubStepping (IntPtr handle, bool enable);

		/// <summary>
		/// Set sub stepping.
		/// </summary>
		private void SetSubStepping (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			PhysicsWorld2D_SetSubStepping (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void PhysicsWorld2D_SetGravity (IntPtr handle, ref Urho.Vector2 gravity);

		/// <summary>
		/// Set gravity.
		/// </summary>
		private void SetGravity (Urho.Vector2 gravity)
		{
			Runtime.ValidateRefCounted (this);
			PhysicsWorld2D_SetGravity (handle, ref gravity);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void PhysicsWorld2D_SetAutoClearForces (IntPtr handle, bool enable);

		/// <summary>
		/// Set auto clear forces.
		/// </summary>
		private void SetAutoClearForces (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			PhysicsWorld2D_SetAutoClearForces (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void PhysicsWorld2D_SetVelocityIterations (IntPtr handle, int velocityIterations);

		/// <summary>
		/// Set velocity iterations.
		/// </summary>
		private void SetVelocityIterations (int velocityIterations)
		{
			Runtime.ValidateRefCounted (this);
			PhysicsWorld2D_SetVelocityIterations (handle, velocityIterations);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void PhysicsWorld2D_SetPositionIterations (IntPtr handle, int positionIterations);

		/// <summary>
		/// Set position iterations.
		/// </summary>
		private void SetPositionIterations (int positionIterations)
		{
			Runtime.ValidateRefCounted (this);
			PhysicsWorld2D_SetPositionIterations (handle, positionIterations);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void PhysicsWorld2D_AddRigidBody (IntPtr handle, IntPtr rigidBody);

		/// <summary>
		/// Add rigid body.
		/// </summary>
		public void AddRigidBody (RigidBody2D rigidBody)
		{
			Runtime.ValidateRefCounted (this);
			PhysicsWorld2D_AddRigidBody (handle, (object)rigidBody == null ? IntPtr.Zero : rigidBody.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void PhysicsWorld2D_RemoveRigidBody (IntPtr handle, IntPtr rigidBody);

		/// <summary>
		/// Remove rigid body.
		/// </summary>
		public void RemoveRigidBody (RigidBody2D rigidBody)
		{
			Runtime.ValidateRefCounted (this);
			PhysicsWorld2D_RemoveRigidBody (handle, (object)rigidBody == null ? IntPtr.Zero : rigidBody.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr PhysicsWorld2D_GetRigidBody (IntPtr handle, ref Urho.Vector2 point, uint collisionMask);

		/// <summary>
		/// Return rigid body at point.
		/// </summary>
		public RigidBody2D GetRigidBody (Urho.Vector2 point, uint collisionMask)
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<RigidBody2D> (PhysicsWorld2D_GetRigidBody (handle, ref point, collisionMask));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr PhysicsWorld2D_GetRigidBody1 (IntPtr handle, int screenX, int screenY, uint collisionMask);

		/// <summary>
		/// Return rigid body at screen point.
		/// </summary>
		public RigidBody2D GetRigidBody (int screenX, int screenY, uint collisionMask)
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<RigidBody2D> (PhysicsWorld2D_GetRigidBody1 (handle, screenX, screenY, collisionMask));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool PhysicsWorld2D_IsUpdateEnabled (IntPtr handle);

		/// <summary>
		/// Return whether physics world will automatically simulate during scene update.
		/// </summary>
		private bool IsUpdateEnabled ()
		{
			Runtime.ValidateRefCounted (this);
			return PhysicsWorld2D_IsUpdateEnabled (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool PhysicsWorld2D_GetDrawShape (IntPtr handle);

		/// <summary>
		/// Return draw shape.
		/// </summary>
		private bool GetDrawShape ()
		{
			Runtime.ValidateRefCounted (this);
			return PhysicsWorld2D_GetDrawShape (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool PhysicsWorld2D_GetDrawJoint (IntPtr handle);

		/// <summary>
		/// Return draw joint.
		/// </summary>
		private bool GetDrawJoint ()
		{
			Runtime.ValidateRefCounted (this);
			return PhysicsWorld2D_GetDrawJoint (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool PhysicsWorld2D_GetDrawAabb (IntPtr handle);

		/// <summary>
		/// Return draw aabb.
		/// </summary>
		private bool GetDrawAabb ()
		{
			Runtime.ValidateRefCounted (this);
			return PhysicsWorld2D_GetDrawAabb (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool PhysicsWorld2D_GetDrawPair (IntPtr handle);

		/// <summary>
		/// Return draw pair.
		/// </summary>
		private bool GetDrawPair ()
		{
			Runtime.ValidateRefCounted (this);
			return PhysicsWorld2D_GetDrawPair (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool PhysicsWorld2D_GetDrawCenterOfMass (IntPtr handle);

		/// <summary>
		/// Return draw center of mass.
		/// </summary>
		private bool GetDrawCenterOfMass ()
		{
			Runtime.ValidateRefCounted (this);
			return PhysicsWorld2D_GetDrawCenterOfMass (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool PhysicsWorld2D_GetAllowSleeping (IntPtr handle);

		/// <summary>
		/// Return allow sleeping.
		/// </summary>
		private bool GetAllowSleeping ()
		{
			Runtime.ValidateRefCounted (this);
			return PhysicsWorld2D_GetAllowSleeping (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool PhysicsWorld2D_GetWarmStarting (IntPtr handle);

		/// <summary>
		/// Return warm starting.
		/// </summary>
		private bool GetWarmStarting ()
		{
			Runtime.ValidateRefCounted (this);
			return PhysicsWorld2D_GetWarmStarting (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool PhysicsWorld2D_GetContinuousPhysics (IntPtr handle);

		/// <summary>
		/// Return continuous physics.
		/// </summary>
		private bool GetContinuousPhysics ()
		{
			Runtime.ValidateRefCounted (this);
			return PhysicsWorld2D_GetContinuousPhysics (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool PhysicsWorld2D_GetSubStepping (IntPtr handle);

		/// <summary>
		/// Return sub stepping.
		/// </summary>
		private bool GetSubStepping ()
		{
			Runtime.ValidateRefCounted (this);
			return PhysicsWorld2D_GetSubStepping (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool PhysicsWorld2D_GetAutoClearForces (IntPtr handle);

		/// <summary>
		/// Return auto clear forces.
		/// </summary>
		private bool GetAutoClearForces ()
		{
			Runtime.ValidateRefCounted (this);
			return PhysicsWorld2D_GetAutoClearForces (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Urho.Vector2 PhysicsWorld2D_GetGravity (IntPtr handle);

		/// <summary>
		/// Return gravity.
		/// </summary>
		private Urho.Vector2 GetGravity ()
		{
			Runtime.ValidateRefCounted (this);
			return PhysicsWorld2D_GetGravity (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int PhysicsWorld2D_GetVelocityIterations (IntPtr handle);

		/// <summary>
		/// Return velocity iterations.
		/// </summary>
		private int GetVelocityIterations ()
		{
			Runtime.ValidateRefCounted (this);
			return PhysicsWorld2D_GetVelocityIterations (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int PhysicsWorld2D_GetPositionIterations (IntPtr handle);

		/// <summary>
		/// Return position iterations.
		/// </summary>
		private int GetPositionIterations ()
		{
			Runtime.ValidateRefCounted (this);
			return PhysicsWorld2D_GetPositionIterations (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void PhysicsWorld2D_SetApplyingTransforms (IntPtr handle, bool enable);

		/// <summary>
		/// Set node dirtying to be disregarded.
		/// </summary>
		private void SetApplyingTransforms (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			PhysicsWorld2D_SetApplyingTransforms (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool PhysicsWorld2D_IsApplyingTransforms (IntPtr handle);

		/// <summary>
		/// Return whether node dirtying should be disregarded.
		/// </summary>
		private bool IsApplyingTransforms ()
		{
			Runtime.ValidateRefCounted (this);
			return PhysicsWorld2D_IsApplyingTransforms (handle);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		public new static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public new static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Return whether physics world will automatically simulate during scene update.
		/// Or
		/// Enable or disable automatic physics simulation during scene update. Enabled by default.
		/// </summary>
		public bool UpdateEnabled {
			get {
				return IsUpdateEnabled ();
			}
			set {
				SetUpdateEnabled (value);
			}
		}

		/// <summary>
		/// Return draw shape.
		/// Or
		/// Set draw shape.
		/// </summary>
		public bool DrawShape {
			get {
				return GetDrawShape ();
			}
			set {
				SetDrawShape (value);
			}
		}

		/// <summary>
		/// Return draw joint.
		/// Or
		/// Set draw joint.
		/// </summary>
		public bool DrawJoint {
			get {
				return GetDrawJoint ();
			}
			set {
				SetDrawJoint (value);
			}
		}

		/// <summary>
		/// Return draw aabb.
		/// Or
		/// Set draw aabb.
		/// </summary>
		public bool DrawAabb {
			get {
				return GetDrawAabb ();
			}
			set {
				SetDrawAabb (value);
			}
		}

		/// <summary>
		/// Return draw pair.
		/// Or
		/// Set draw pair.
		/// </summary>
		public bool DrawPair {
			get {
				return GetDrawPair ();
			}
			set {
				SetDrawPair (value);
			}
		}

		/// <summary>
		/// Return draw center of mass.
		/// Or
		/// Set draw center of mass.
		/// </summary>
		public bool DrawCenterOfMass {
			get {
				return GetDrawCenterOfMass ();
			}
			set {
				SetDrawCenterOfMass (value);
			}
		}

		/// <summary>
		/// Return allow sleeping.
		/// Or
		/// Set allow sleeping.
		/// </summary>
		public bool AllowSleeping {
			get {
				return GetAllowSleeping ();
			}
			set {
				SetAllowSleeping (value);
			}
		}

		/// <summary>
		/// Return warm starting.
		/// Or
		/// Set warm starting.
		/// </summary>
		public bool WarmStarting {
			get {
				return GetWarmStarting ();
			}
			set {
				SetWarmStarting (value);
			}
		}

		/// <summary>
		/// Return continuous physics.
		/// Or
		/// Set continuous physics.
		/// </summary>
		public bool ContinuousPhysics {
			get {
				return GetContinuousPhysics ();
			}
			set {
				SetContinuousPhysics (value);
			}
		}

		/// <summary>
		/// Return sub stepping.
		/// Or
		/// Set sub stepping.
		/// </summary>
		public bool SubStepping {
			get {
				return GetSubStepping ();
			}
			set {
				SetSubStepping (value);
			}
		}

		/// <summary>
		/// Return gravity.
		/// Or
		/// Set gravity.
		/// </summary>
		public Urho.Vector2 Gravity {
			get {
				return GetGravity ();
			}
			set {
				SetGravity (value);
			}
		}

		/// <summary>
		/// Return auto clear forces.
		/// Or
		/// Set auto clear forces.
		/// </summary>
		public bool AutoClearForces {
			get {
				return GetAutoClearForces ();
			}
			set {
				SetAutoClearForces (value);
			}
		}

		/// <summary>
		/// Return velocity iterations.
		/// Or
		/// Set velocity iterations.
		/// </summary>
		public int VelocityIterations {
			get {
				return GetVelocityIterations ();
			}
			set {
				SetVelocityIterations (value);
			}
		}

		/// <summary>
		/// Return position iterations.
		/// Or
		/// Set position iterations.
		/// </summary>
		public int PositionIterations {
			get {
				return GetPositionIterations ();
			}
			set {
				SetPositionIterations (value);
			}
		}

		/// <summary>
		/// Return whether node dirtying should be disregarded.
		/// Or
		/// Set node dirtying to be disregarded.
		/// </summary>
		public bool ApplyingTransforms {
			get {
				return IsApplyingTransforms ();
			}
			set {
				SetApplyingTransforms (value);
			}
		}
	}
}
