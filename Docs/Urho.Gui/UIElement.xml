<Type Name="UIElement" FullName="Urho.Gui.UIElement">
  <TypeSignature Language="C#" Value="public class UIElement : Urho.Animatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIElement extends Urho.Animatable" />
  <AssemblyInfo>
    <AssemblyName>Urho</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Urho.Animatable</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Base class for UI elements.
            </summary>
    <remarks>
      <para>User interface elements are serializable, so they can be serialized to/from XML using their attributes. There are two distinct use cases for UI definition files: either defining just the UI element style and leaving the actual position and dimensions to be filled in later, or fully defining an UI element layout. The default element style definitions, used for example by the editor and the debug console, are in the file bin/Data/UI/DefaultStyle.xml.</para>
      <para>The method <see cref="M:Urho.Gui.UI.LoadLayout" /> in UI will take an XML file and instantiate the elements defined in it. To be valid XML, there should be one root-level UI element. An optional style XML file can be specified; the idea is to first read the element's style from that file, then fill in the rest from the actual layout XML file. This way the layout file can be relatively simple, as the majority of the data is already defined.</para>
      <para>Note that a style can not be easily applied recursively to the loaded elements afterward. Therefore remember to specify the style file already when loading, or alternatively assign a default style file to the UI root element, which will then be picked up by all loaded layouts. This works because the UI subsystem searches the style file by going up the parental chain starting from target parent UI element. The search stops immediately when a style file is found or when it has reached the root element. Also note that UrhoSharp does not limit the number of style files being used at the same time in an application. You may have different style file set along the UI parental hierarchy, if your application needs that.</para>
      <para>You can also use the Editor application to create UI layouts. The serialization format is similar to scene XML serialization, with three important differences:</para>
      <para>1) The element type to instantiate, and the style to use for it can be set separately. For example the following element definition tells to instantiate a <see cref="T:Urho.Gui.Button" /> element, and that it should use the style "CloseButton" defined in the style XML file.</para>
      <para>2) Internal child elements, for example the scroll bars of a <see cref="T:Urho.Gui.ScrollView" />, need to be marked as such to avoid instantiating them as duplicates. This is done by adding the attribute internal="true" to the XML element, and is required in both layout and style XML files. Furthermore, the elements must be listed in the order they have been added as children of the parent element (if in doubt, see the element's C++ constructor code. Omitting elements in the middle is OK)</para>
      <para>3) The popup element shown by <see cref="T:Urho.Gui.Menu" /> and <see cref="T:Urho.Gui.DropDownList" /> is not an actual child element. In XML serialization, it is nevertheless stored as a child element, but is marked with the attribute popup="trueвЂќ.</para>
      <para>You can associate one or more strings to a UIElement, by using the <see cref="M:Urho.Gui.UIElement.AddTag" /> and the <see cref="M:Urho.Gui.UIElement.RemoveTag" /> methods.</para>
      <para></para>
      <see cref="" />
      <para></para>
      <format type="text/html">
        <h2>UI Element Layout</h2>
      </format>
      <para>By default UI elements operate in a "free" layout mode, where child elements' positions can be specified relative to any of the parent element corners, but they are not automatically positioned or resized.</para>
      <para>To create automatically adjusting layouts, the layout mode can be switched to either "horizontal" or "vertical". Now the child elements will be positioned left to right or top to bottom, based on the order in which they were added. They will be preferably resized to fit the parent element, taking into account their minimum and maximum sizes, but failing to do that, the parent element will be resized.</para>
      <para>Left, top, right and bottom border widths and spacing between elements can also be specified for the layout. A grid layout is not directly supported, but it can be manually created with a horizontal layout inside a vertical layout, or vice versa.</para>
      <para></para>
      <format type="text/html" />
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <para>Constructs a new instance of Urho.Gui.UIElement which is tied to the <see cref="P:Urho.Application.CurrentContext" />.</para>
        </summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIElement (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer to the raw unmanaged Urho object.</param>
        <summary>Constructs a new instance of Urho.Gui.UIElement, given a raw pointer to an unmanaged object</summary>
        <remarks>
          <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
          <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
          <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIElement (Urho.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Urho.Context context) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="Urho.Context" />
      </Parameters>
      <Docs>
        <param name="context">The context that this object will be attached to.</param>
        <summary>
          <para>Constructs a new instance of Urho.Gui.UIElement linked to a specific <see cref="T:Urho.Context" />.</para>
        </summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIElement (Urho.UrhoObjectFlag emptyFlag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype Urho.UrhoObjectFlag emptyFlag) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="emptyFlag" Type="Urho.UrhoObjectFlag" />
      </Parameters>
      <Docs>
        <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
        <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
        <remarks>
          <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
          <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
          <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public void AddChild (Urho.Gui.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddChild(class Urho.Gui.UIElement element) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="Urho.Gui.UIElement" />
      </Parameters>
      <Docs>
        <param name="element">To be added.</param>
        <summary>
            Add a child element.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTag">
      <MemberSignature Language="C#" Value="public void AddTag (string tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddTag(string tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">The string to associate</param>
        <summary>Attaches the specified string as a tag to this UIElement.</summary>
        <remarks>Use the <see cref="M:Urho.Gui.UIElement.RemoveTag" /> to remove this tag, or the <see cref="M:Urho.Gui.UIElement.HasTag" /> method to determine if the element has the specified tag attached.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppliedStyle">
      <MemberSignature Language="C#" Value="public string AppliedStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AppliedStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return applied style name. Return an empty string when the applied style is an 'auto' style (i.e. style derived from instance's type).
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAttributes">
      <MemberSignature Language="C#" Value="public override void ApplyAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ApplyAttributes() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Apply attribute changes that can not be applied immediately.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BringToBackOnFocus">
      <MemberSignature Language="C#" Value="public bool BringToBackOnFocus { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BringToBackOnFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return whether should be put to background when another element is focused.
            Or
            Set whether should be put to background when another element is focused.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BringToFront">
      <MemberSignature Language="C#" Value="public void BringToFront ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringToFront() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Bring UI element to front.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BringToFrontOnFocus">
      <MemberSignature Language="C#" Value="public bool BringToFrontOnFocus { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BringToFrontOnFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return whether should be brought to front when focused.
            Or
            Set whether should be brought to front when focused.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildOffset">
      <MemberSignature Language="C#" Value="public Urho.IntVector2 ChildOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.IntVector2 ChildOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.IntVector2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return child element offset.
            Or
            Set child offset.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Urho.Gui.UIElement&gt; Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class Urho.Gui.UIElement&gt; Children" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Urho.Gui.UIElement&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return immediate child elements.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipBorder">
      <MemberSignature Language="C#" Value="public Urho.IntRect ClipBorder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.IntRect ClipBorder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.IntRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return child element clipping border.
            Or
            Set child element clipping border.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipChildren">
      <MemberSignature Language="C#" Value="public bool ClipChildren { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClipChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return whether should clip child elements.
            Or
            Set whether should clip child elements. Default false.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColorAttr">
      <MemberSignature Language="C#" Value="public Urho.Color ColorAttr { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.Color ColorAttr" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return color attribute. Uses just the top-left color.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CombinedScreenRect">
      <MemberSignature Language="C#" Value="public Urho.IntRect CombinedScreenRect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.IntRect CombinedScreenRect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.IntRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return combined screen coordinate rect of element and its children.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBorderImage">
      <MemberSignature Language="C#" Value="public Urho.Gui.BorderImage CreateBorderImage (string name = &quot;&quot;, uint index = 4294967295);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Gui.BorderImage CreateBorderImage(string name, unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.BorderImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="index">Position in the hierarchy where the button will be created, if none, this adds it as the last element.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateButton">
      <MemberSignature Language="C#" Value="public Urho.Gui.Button CreateButton (string name = &quot;&quot;, uint index = 4294967295);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Gui.Button CreateButton(string name, unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.Button</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="name">Name to assign to the child</param>
        <param name="index">Position in the hierarchy where the button will be created, if none, this adds it as the last element.</param>
        <summary>Creates a <see cref="T:Urho.Gui.Button" />.</summary>
        <returns>
          <para />
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCheckBox">
      <MemberSignature Language="C#" Value="public Urho.Gui.CheckBox CreateCheckBox (string name = &quot;&quot;, uint index = 4294967295);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Gui.CheckBox CreateCheckBox(string name, unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.CheckBox</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="name">Name assign to the created element.   You can lookup the element later with <see cref="M:Urho.Gui.UIElement.GetChild" /> to find this component later.</param>
        <param name="index">Position in the hierarchy where the button will be created, if none, this adds it as the last element.</param>
        <summary>Creates a <see cref="T:Urho.Gui.CheckBox" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateChild">
      <MemberSignature Language="C#" Value="public Urho.Gui.UIElement CreateChild (Urho.StringHash type, string name, uint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Gui.UIElement CreateChild(valuetype Urho.StringHash type, string name, unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.UIElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Urho.StringHash" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="type">StringHash code for the element to create, it must correspond to a <see cref="T:Urho.Gui.UIElement" /> type.</param>
        <param name="name">Name assign to the created element.   You can lookup the element later with <see cref="M:Urho.Gui.UIElement.GetChild" /> to find this component later.</param>
        <param name="index">Position in the hierarchy where the button will be created, if none, this adds it as the last element.</param>
        <summary>
            Create and add a child element and return it.
            </summary>
        <returns>The created UIElement.    If the provided type is not a <see cref="T:Urho.Gui.UIElement" />, the return value is <paramref name="null" />.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateChild&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T CreateChild&lt;T&gt; (Urho.StringHash code, string name = &quot;&quot;, uint index = 4294967295) where T : Urho.Gui.UIElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T CreateChild&lt;(class Urho.Gui.UIElement) T&gt;(valuetype Urho.StringHash code, string name, unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>Urho.UIElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="code" Type="Urho.StringHash" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="code">StringHash code for the element to create, it must correspond to a <see cref="T:Urho.Gui.UIElement" /> type.</param>
        <param name="name">Name assign to the created element.   You can lookup the element later with <see cref="M:Urho.Gui.UIElement.GetChild" /> to find this component later.</param>
        <param name="index">Position in the hierarchy where the button will be created, if none, this adds it as the last element.</param>
        <summary>Create and add a child element and return it.</summary>
        <returns>The created element.    If the provided type is not known, the return value is <paramref name="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCursor">
      <MemberSignature Language="C#" Value="public Urho.Gui.Cursor CreateCursor (string name = &quot;&quot;, uint index = 4294967295);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Gui.Cursor CreateCursor(string name, unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.Cursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="name">Name assign to the created element.   You can lookup the element later with <see cref="M:Urho.Gui.UIElement.GetChild" /> to find this component later.</param>
        <param name="index">Position in the hierarchy where the button will be created, if none, this adds it as the last element.</param>
        <summary>Creates a <see cref="T:Urho.Gui.Cursor" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDropDownList">
      <MemberSignature Language="C#" Value="public Urho.Gui.DropDownList CreateDropDownList (string name = &quot;&quot;, uint index = 4294967295);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Gui.DropDownList CreateDropDownList(string name, unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.DropDownList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="name">Name assign to the created element.   You can lookup the element later with <see cref="M:Urho.Gui.UIElement.GetChild" /> to find this component later.</param>
        <param name="index">Position in the hierarchy where the button will be created, if none, this adds it as the last element.</param>
        <summary>Creates a <see cref="T:Urho.Gui.DropDownList" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLineEdit">
      <MemberSignature Language="C#" Value="public Urho.Gui.LineEdit CreateLineEdit (string name = &quot;&quot;, uint index = 4294967295);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Gui.LineEdit CreateLineEdit(string name, unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.LineEdit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="name">Name assign to the created element.   You can lookup the element later with <see cref="M:Urho.Gui.UIElement.GetChild" /> to find this component later.</param>
        <param name="index">Position in the hierarchy where the button will be created, if none, this adds it as the last element.</param>
        <summary>Creates a <see cref="T:Urho.Gui.LineEdit" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateListView">
      <MemberSignature Language="C#" Value="public Urho.Gui.ListView CreateListView (string name = &quot;&quot;, uint index = 4294967295);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Gui.ListView CreateListView(string name, unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.ListView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="name">Name assign to the created element.   You can lookup the element later with <see cref="M:Urho.Gui.UIElement.GetChild" /> to find this component later.</param>
        <param name="index">Position in the hierarchy where the button will be created, if none, this adds it as the last element.</param>
        <summary>Creates a <see cref="T:Urho.Gui.ListView" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMenu">
      <MemberSignature Language="C#" Value="public Urho.Gui.Menu CreateMenu (string name = &quot;&quot;, uint index = 4294967295);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Gui.Menu CreateMenu(string name, unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.Menu</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="name">Name assign to the created element.   You can lookup the element later with <see cref="M:Urho.Gui.UIElement.GetChild" /> to find this component later.</param>
        <param name="index">Position in the hierarchy where the button will be created, if none, this adds it as the last element.</param>
        <summary>Creates a <see cref="T:Urho.Gui.Menu" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateScrollBar">
      <MemberSignature Language="C#" Value="public Urho.Gui.ScrollBar CreateScrollBar (string name = &quot;&quot;, uint index = 4294967295);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Gui.ScrollBar CreateScrollBar(string name, unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.ScrollBar</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="name">Name assign to the created element.   You can lookup the element later with <see cref="M:Urho.Gui.UIElement.GetChild" /> to find this component later.</param>
        <param name="index">Position in the hierarchy where the button will be created, if none, this adds it as the last element.</param>
        <summary>Creates a <see cref="T:Urho.Gui.ScrollBar" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateScrollView">
      <MemberSignature Language="C#" Value="public Urho.Gui.ScrollView CreateScrollView (string name = &quot;&quot;, uint index = 4294967295);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Gui.ScrollView CreateScrollView(string name, unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.ScrollView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="name">Name assign to the created element.   You can lookup the element later with <see cref="M:Urho.Gui.UIElement.GetChild" /> to find this component later.</param>
        <param name="index">Position in the hierarchy where the button will be created, if none, this adds it as the last element.</param>
        <summary>Creates a <see cref="T:Urho.Gui.ScrollView" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSlider">
      <MemberSignature Language="C#" Value="public Urho.Gui.Slider CreateSlider (string name = &quot;&quot;, uint index = 4294967295);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Gui.Slider CreateSlider(string name, unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.Slider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="name">Name assign to the created element.   You can lookup the element later with <see cref="M:Urho.Gui.UIElement.GetChild" /> to find this component later.</param>
        <param name="index">Position in the hierarchy where the button will be created, if none, this adds it as the last element.</param>
        <summary>Creates a <see cref="T:Urho.Gui.Slider" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSprite">
      <MemberSignature Language="C#" Value="public Urho.Gui.Sprite CreateSprite (string name = &quot;&quot;, uint index = 4294967295);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Gui.Sprite CreateSprite(string name, unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.Sprite</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="name">Name assign to the created element.   You can lookup the element later with <see cref="M:Urho.Gui.UIElement.GetChild" /> to find this component later.</param>
        <param name="index">Position in the hierarchy where the button will be created, if none, this adds it as the last element.</param>
        <summary>Creates a <see cref="T:Urho.Gui.Sprite" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateText">
      <MemberSignature Language="C#" Value="public Urho.Gui.Text CreateText (string name = &quot;&quot;, uint index = 4294967295);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Gui.Text CreateText(string name, unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.Text</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="name">Name assign to the created element.   You can lookup the element later with <see cref="M:Urho.Gui.UIElement.GetChild" /> to find this component later.</param>
        <param name="index">Position in the hierarchy where the button will be created, if none, this adds it as the last element.</param>
        <summary>Creates a <see cref="T:Urho.Gui.Text" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateToolTip">
      <MemberSignature Language="C#" Value="public Urho.Gui.ToolTip CreateToolTip (string name = &quot;&quot;, uint index = 4294967295);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Gui.ToolTip CreateToolTip(string name, unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.ToolTip</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="name">Name assign to the created element.   You can lookup the element later with <see cref="M:Urho.Gui.UIElement.GetChild" /> to find this component later.</param>
        <param name="index">Position in the hierarchy where the button will be created, if none, this adds it as the last element.</param>
        <summary>
          <para />
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateView3D">
      <MemberSignature Language="C#" Value="public Urho.Gui.View3D CreateView3D (string name = &quot;&quot;, uint index = 4294967295);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Gui.View3D CreateView3D(string name, unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.View3D</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="name">Name assign to the created element.   You can lookup the element later with <see cref="M:Urho.Gui.UIElement.GetChild" /> to find this component later.</param>
        <param name="index">Position in the hierarchy where the button will be created, if none, this adds it as the last element.</param>
        <summary>Creates a <see cref="T:Urho.Gui.View3D" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWindow">
      <MemberSignature Language="C#" Value="public Urho.Gui.Window CreateWindow (string name = &quot;&quot;, uint index = 4294967295);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Gui.Window CreateWindow(string name, unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.Window</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="name">Name assign to the created element.   You can lookup the element later with <see cref="M:Urho.Gui.UIElement.GetChild" /> to find this component later.</param>
        <param name="index">Position in the hierarchy where the button will be created, if none, this adds it as the last element.</param>
        <summary>Creates a <see cref="T:Urho.Gui.Window" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Defocused">
      <MemberSignature Language="C#" Value="public event Action&lt;Urho.Gui.DefocusedEventArgs&gt; Defocused;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Action`1&lt;valuetype Urho.Gui.DefocusedEventArgs&gt; Defocused" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;Urho.Gui.DefocusedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Handle being defocused.</summary>
        <remarks>
          <para>The event can register multiple callbacks and invoke all of them.   If this is not desired, and you only need a single shot callback, you can use the <see cref="M:Urho.SubscribeToDefocused" /> method.   That one will force that callback and will ignore any previously set events here.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DerivedColor">
      <MemberSignature Language="C#" Value="public Urho.Color DerivedColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.Color DerivedColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return derived color. Only valid when no gradient.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DerivedOpacity">
      <MemberSignature Language="C#" Value="public float DerivedOpacity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DerivedOpacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return derived opacity (affected by parent elements.) If UseDerivedOpacity is false, returns same as element's own opacity.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableLayoutUpdate">
      <MemberSignature Language="C#" Value="public void DisableLayoutUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DisableLayoutUpdate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Disable automatic layout update. Should only be used if there are performance problems.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragBegin">
      <MemberSignature Language="C#" Value="public event Action&lt;Urho.Gui.DragBeginEventArgs&gt; DragBegin;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Action`1&lt;valuetype Urho.Gui.DragBeginEventArgs&gt; DragBegin" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;Urho.Gui.DragBeginEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>React to mouse drag begin.</summary>
        <remarks>
          <para>The event can register multiple callbacks and invoke all of them.   If this is not desired, and you only need a single shot callback, you can use the <see cref="M:Urho.SubscribeToDragBegin" /> method.   That one will force that callback and will ignore any previously set events here.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragButtonCombo">
      <MemberSignature Language="C#" Value="public int DragButtonCombo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DragButtonCombo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return the drag button combo if this element is being dragged.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragButtonCount">
      <MemberSignature Language="C#" Value="public uint DragButtonCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 DragButtonCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return the number of buttons dragging this element.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragCancel">
      <MemberSignature Language="C#" Value="public event Action&lt;Urho.Gui.DragCancelEventArgs&gt; DragCancel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Action`1&lt;valuetype Urho.Gui.DragCancelEventArgs&gt; DragCancel" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;Urho.Gui.DragCancelEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>React to a mouse drag cancel event (ie, when an extra button is pressed).</summary>
        <remarks>
          <para>The event can register multiple callbacks and invoke all of them.   If this is not desired, and you only need a single shot callback, you can use the <see cref="M:Urho.SubscribeToDragCancel" /> method.   That one will force that callback and will ignore any previously set events here.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragDropFinish">
      <MemberSignature Language="C#" Value="public event Action&lt;Urho.Gui.DragDropFinishEventArgs&gt; DragDropFinish;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Action`1&lt;valuetype Urho.Gui.DragDropFinishEventArgs&gt; DragDropFinish" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;Urho.Gui.DragDropFinishEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>React to drag and drop finish. Return true to signal that the drop was accepted.</summary>
        <remarks>
          <para>The event can register multiple callbacks and invoke all of them.   If this is not desired, and you only need a single shot callback, you can use the <see cref="M:Urho.SubscribeToDragDropFinish" /> method.   That one will force that callback and will ignore any previously set events here.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragDropMode">
      <MemberSignature Language="C#" Value="public uint DragDropMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 DragDropMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return drag and drop flags.
            Or
            Set drag and drop flags.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragDropTest">
      <MemberSignature Language="C#" Value="public event Action&lt;Urho.Gui.DragDropTestEventArgs&gt; DragDropTest;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Action`1&lt;valuetype Urho.Gui.DragDropTestEventArgs&gt; DragDropTest" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;Urho.Gui.DragDropTestEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>React to drag and drop test. Return true to signal that the drop is acceptable.</summary>
        <remarks>
          <para>The event can register multiple callbacks and invoke all of them.   If this is not desired, and you only need a single shot callback, you can use the <see cref="M:Urho.SubscribeToDragDropTest" /> method.   That one will force that callback and will ignore any previously set events here.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragEnd">
      <MemberSignature Language="C#" Value="public event Action&lt;Urho.Gui.DragEndEventArgs&gt; DragEnd;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Action`1&lt;valuetype Urho.Gui.DragEndEventArgs&gt; DragEnd" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;Urho.Gui.DragEndEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>React to mouse drag end.</summary>
        <remarks>
          <para>The event can register multiple callbacks and invoke all of them.   If this is not desired, and you only need a single shot callback, you can use the <see cref="M:Urho.SubscribeToDragEnd" /> method.   That one will force that callback and will ignore any previously set events here.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragMove">
      <MemberSignature Language="C#" Value="public event Action&lt;Urho.Gui.DragMoveEventArgs&gt; DragMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Action`1&lt;valuetype Urho.Gui.DragMoveEventArgs&gt; DragMove" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;Urho.Gui.DragMoveEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>React to mouse drag motion.</summary>
        <remarks>
          <para>The event can register multiple callbacks and invoke all of them.   If this is not desired, and you only need a single shot callback, you can use the <see cref="M:Urho.SubscribeToDragMove" /> method.   That one will force that callback and will ignore any previously set events here.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Editable">
      <MemberSignature Language="C#" Value="public bool Editable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Editable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Controls whether value is editable through input.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EffectiveMinSize">
      <MemberSignature Language="C#" Value="public Urho.IntVector2 EffectiveMinSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.IntVector2 EffectiveMinSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.IntVector2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return effective color, multiplied by brightness and affected by temperature when "use physical values" is enabled. Alpha is always 1 so that can compare against the default black color to detect a light with no effect.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementAdded">
      <MemberSignature Language="C#" Value="public event Action&lt;Urho.Gui.ElementAddedEventArgs&gt; ElementAdded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Action`1&lt;valuetype Urho.Gui.ElementAddedEventArgs&gt; ElementAdded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;Urho.Gui.ElementAddedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A child element has been added to an element. Sent by the UI root element, or element-event-sender if set.</summary>
        <remarks>
          <para>The event can register multiple callbacks and invoke all of them.   If this is not desired, and you only need a single shot callback, you can use the <see cref="M:Urho.SubscribeToElementAdded" /> method.   That one will force that callback and will ignore any previously set events here.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementEventSender">
      <MemberSignature Language="C#" Value="public Urho.Gui.UIElement ElementEventSender { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Urho.Gui.UIElement ElementEventSender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.UIElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get element which should send child added / removed events.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementRemoved">
      <MemberSignature Language="C#" Value="public event Action&lt;Urho.Gui.ElementRemovedEventArgs&gt; ElementRemoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Action`1&lt;valuetype Urho.Gui.ElementRemovedEventArgs&gt; ElementRemoved" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;Urho.Gui.ElementRemovedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A child element is about to be removed from an element. Sent by the UI root element, or element-event-sender if set.</summary>
        <remarks>
          <para>The event can register multiple callbacks and invoke all of them.   If this is not desired, and you only need a single shot callback, you can use the <see cref="M:Urho.SubscribeToElementRemoved" /> method.   That one will force that callback and will ignore any previously set events here.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementToScreen">
      <MemberSignature Language="C#" Value="public virtual Urho.IntVector2 ElementToScreen (Urho.IntVector2 position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Urho.IntVector2 ElementToScreen(valuetype Urho.IntVector2 position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.IntVector2</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="Urho.IntVector2" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <summary>
            Convert element coordinates to screen coordinates.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableAnchor">
      <MemberSignature Language="C#" Value="public bool EnableAnchor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableAnchor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enable automatic positioning &amp; sizing of the element relative to its parent using min/max anchor and min/max offset. Default false.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Controls whether the element reacts to input.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnabledSelf">
      <MemberSignature Language="C#" Value="public bool EnabledSelf { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnabledSelf" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the element's last own enabled state. May be different than the value returned by IsEnabled when SetDeepEnabled has been used.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableLayoutUpdate">
      <MemberSignature Language="C#" Value="public void EnableLayoutUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnableLayoutUpdate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Enable automatic layout update.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterAttributes">
      <MemberSignature Language="C#" Value="public bool FilterAttributes (Urho.Resources.XmlElement dest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool FilterAttributes(class Urho.Resources.XmlElement dest) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="Urho.Resources.XmlElement" />
      </Parameters>
      <Docs>
        <param name="dest">To be added.</param>
        <summary>Filter attributes in serialization process.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindChild">
      <MemberSignature Language="C#" Value="public uint FindChild (Urho.Gui.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int32 FindChild(class Urho.Gui.UIElement element) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="Urho.Gui.UIElement" />
      </Parameters>
      <Docs>
        <param name="element">To be added.</param>
        <summary>
            Find child index. Return M_MAX_UNSIGNED if not found.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FixedHeight">
      <MemberSignature Language="C#" Value="public bool FixedHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FixedHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return true if height is fixed.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FixedSize">
      <MemberSignature Language="C#" Value="public bool FixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return true if size is fixed.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FixedWidth">
      <MemberSignature Language="C#" Value="public bool FixedWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FixedWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return true if width is fixed.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focused">
      <MemberSignature Language="C#" Value="public event Action&lt;Urho.Gui.FocusedEventArgs&gt; Focused;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Action`1&lt;valuetype Urho.Gui.FocusedEventArgs&gt; Focused" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;Urho.Gui.FocusedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Handle being focused.</summary>
        <remarks>
          <para>The event can register multiple callbacks and invoke all of them.   If this is not desired, and you only need a single shot callback, you can use the <see cref="M:Urho.SubscribeToFocused" /> method.   That one will force that callback and will ignore any previously set events here.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusMode">
      <MemberSignature Language="C#" Value="public Urho.Gui.FocusMode FocusMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.Gui.FocusMode FocusMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.FocusMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return focus mode.
            Or
            Set focus mode.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChild">
      <MemberSignature Language="C#" Value="public Urho.Gui.UIElement GetChild (uint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Gui.UIElement GetChild(unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.UIElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>
            Return child element by index.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChild">
      <MemberSignature Language="C#" Value="public Urho.Gui.UIElement GetChild (string name, bool recursive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Gui.UIElement GetChild(string name, bool recursive) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.UIElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="recursive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">This is the name that was used when one of the Create methods was invoked.</param>
        <param name="recursive">If <paramref name="true" />, this searches on nested elements for the <see cref="T:Urho.Gui.UIElement" /> with the given <paramref name="name" />.</param>
        <summary>
            Return child element by name.
            </summary>
        <returns>The child with the associated <paramref name="name" />, if found, <paramref name="null" /> otherwise.</returns>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetColor">
      <MemberSignature Language="C#" Value="public Urho.Color GetColor (Urho.Gui.Corner corner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Urho.Color GetColor(valuetype Urho.Gui.Corner corner) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Color</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="corner" Type="Urho.Gui.Corner" />
      </Parameters>
      <Docs>
        <param name="corner">To be added.</param>
        <summary>
            Return corner color.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultStyle">
      <MemberSignature Language="C#" Value="public Urho.Resources.XmlFile GetDefaultStyle (bool recursiveUp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Resources.XmlFile GetDefaultStyle(bool recursiveUp) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Resources.XmlFile</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recursiveUp" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="recursiveUp">To be added.</param>
        <summary>Return default style.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumChildren">
      <MemberSignature Language="C#" Value="public uint GetNumChildren (bool recursive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int32 GetNumChildren(bool recursive) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recursive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="recursive">To be added.</param>
        <summary>
            Return number of child elements.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasColorGradient">
      <MemberSignature Language="C#" Value="public bool HasColorGradient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasColorGradient() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Return whether has different color in at least one corner.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasFocus">
      <MemberSignature Language="C#" Value="public bool HasFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasFocus() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Return whether has focus.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTag">
      <MemberSignature Language="C#" Value="public bool HasTag (string tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasTag(string tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">Tag string to probe.</param>
        <summary>Determines if the UIElement has the associated tag attached to it.</summary>
        <returns>True if the specified tag has been associated with this UIElement.</returns>
        <remarks>Use the <see cref="M:Urho.Gui.UIElement.AddTag" /> to add a tag to a UIElement, and <see cref="M:Urho.Gui.UIElement.RemoveTag" /> to remove this tag.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return height.
            Or
            Set height only.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignment">
      <MemberSignature Language="C#" Value="public Urho.Gui.HorizontalAlignment HorizontalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.Gui.HorizontalAlignment HorizontalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return horizontal alignment.
            Or
            Set horizontal alignment.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HoverBegin">
      <MemberSignature Language="C#" Value="public event Action&lt;Urho.Gui.HoverBeginEventArgs&gt; HoverBegin;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Action`1&lt;valuetype Urho.Gui.HoverBeginEventArgs&gt; HoverBegin" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;Urho.Gui.HoverBeginEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Hovering on an UI element has started</summary>
        <remarks>
          <para>The event can register multiple callbacks and invoke all of them.   If this is not desired, and you only need a single shot callback, you can use the <see cref="M:Urho.SubscribeToHoverBegin" /> method.   That one will force that callback and will ignore any previously set events here.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HoverEnd">
      <MemberSignature Language="C#" Value="public event Action&lt;Urho.Gui.HoverEndEventArgs&gt; HoverEnd;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Action`1&lt;valuetype Urho.Gui.HoverEndEventArgs&gt; HoverEnd" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;Urho.Gui.HoverEndEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Hovering on an UI element has ended</summary>
        <remarks>
          <para>The event can register multiple callbacks and invoke all of them.   If this is not desired, and you only need a single shot callback, you can use the <see cref="M:Urho.SubscribeToHoverEnd" /> method.   That one will force that callback and will ignore any previously set events here.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hovering">
      <MemberSignature Language="C#" Value="public bool Hovering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Hovering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return whether the cursor is hovering on this element.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public int Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return horizontal indentation.
            Or
            Set horizontal indentation.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndentSpacing">
      <MemberSignature Language="C#" Value="public int IndentSpacing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IndentSpacing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return indent spacing (number of pixels per indentation level).
            Or
            Set indent spacing (number of pixels per indentation level).
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndentWidth">
      <MemberSignature Language="C#" Value="public int IndentWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IndentWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return indent width in pixels.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertChild">
      <MemberSignature Language="C#" Value="public void InsertChild (uint index, Urho.Gui.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertChild(unsigned int32 index, class Urho.Gui.UIElement element) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.UInt32" />
        <Parameter Name="element" Type="Urho.Gui.UIElement" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="element">To be added.</param>
        <summary>
            Insert a child element into a specific position in the child list.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Internal">
      <MemberSignature Language="C#" Value="public bool Internal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Internal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Flag that determines whether is internally created.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsElementEventSender">
      <MemberSignature Language="C#" Value="public bool IsElementEventSender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsElementEventSender() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Return whether element should send child added / removed events by itself. If false, defers to parent element.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInside">
      <MemberSignature Language="C#" Value="public bool IsInside (Urho.IntVector2 position, bool isScreen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInside(valuetype Urho.IntVector2 position, bool isScreen) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="Urho.IntVector2" />
        <Parameter Name="isScreen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <param name="isScreen">To be added.</param>
        <summary>
            Return whether a point (either in element or screen coordinates) is inside the element.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInsideCombined">
      <MemberSignature Language="C#" Value="public bool IsInsideCombined (Urho.IntVector2 position, bool isScreen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInsideCombined(valuetype Urho.IntVector2 position, bool isScreen) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="Urho.IntVector2" />
        <Parameter Name="isScreen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <param name="isScreen">To be added.</param>
        <summary>
            Return whether a point (either in element or screen coordinates) is inside the combined rect of the element and its children.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWithinScissor">
      <MemberSignature Language="C#" Value="public virtual bool IsWithinScissor (Urho.IntRect currentScissor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsWithinScissor(valuetype Urho.IntRect currentScissor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentScissor" Type="Urho.IntRect" />
      </Parameters>
      <Docs>
        <param name="currentScissor">To be added.</param>
        <summary>
            Return whether is visible and inside a scissor rectangle and should be rendered.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutBorder">
      <MemberSignature Language="C#" Value="public Urho.IntRect LayoutBorder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.IntRect LayoutBorder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.IntRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return layout border.
            Or
            Set layout border.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutElementMaxSize">
      <MemberSignature Language="C#" Value="public int LayoutElementMaxSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LayoutElementMaxSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return maximum layout element size in the layout direction. Only valid after layout has been calculated. Used internally by UI for optimizations.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutFlexScale">
      <MemberSignature Language="C#" Value="public Urho.Vector2 LayoutFlexScale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.Vector2 LayoutFlexScale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Vector2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return layout flex scale.
            Or
            Set layout flex scale.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutMode">
      <MemberSignature Language="C#" Value="public Urho.Gui.LayoutMode LayoutMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.Gui.LayoutMode LayoutMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.LayoutMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return layout mode.
            Or
            Set layout mode only.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutSpacing">
      <MemberSignature Language="C#" Value="public int LayoutSpacing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LayoutSpacing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return layout spacing.
            Or
            Set layout spacing.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutUpdated">
      <MemberSignature Language="C#" Value="public event Action&lt;Urho.Gui.LayoutUpdatedEventArgs&gt; LayoutUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Action`1&lt;valuetype Urho.Gui.LayoutUpdatedEventArgs&gt; LayoutUpdated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;Urho.Gui.LayoutUpdatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>UI element layout updated.</summary>
        <remarks>
          <para>The event can register multiple callbacks and invoke all of them.   If this is not desired, and you only need a single shot callback, you can use the <see cref="M:Urho.SubscribeToLayoutUpdated" /> method.   That one will force that callback and will ignore any previously set events here.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadChildXml">
      <MemberSignature Language="C#" Value="public Urho.Gui.UIElement LoadChildXml (Urho.Resources.XmlElement childElem, Urho.Resources.XmlFile styleFile, bool setInstanceDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Gui.UIElement LoadChildXml(class Urho.Resources.XmlElement childElem, class Urho.Resources.XmlFile styleFile, bool setInstanceDefault) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.UIElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childElem" Type="Urho.Resources.XmlElement" />
        <Parameter Name="styleFile" Type="Urho.Resources.XmlFile" />
        <Parameter Name="setInstanceDefault" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="childElem">To be added.</param>
        <param name="styleFile">To be added.</param>
        <param name="setInstanceDefault">To be added.</param>
        <summary>Create a child by loading from XML data with style. Returns the child element if successful, null if otherwise.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadXml">
      <MemberSignature Language="C#" Value="public bool LoadXml (Urho.IO.File source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool LoadXml(class Urho.IO.File source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Urho.IO.File" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <summary>Load from XML data. Return true if successful.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadXml">
      <MemberSignature Language="C#" Value="public override bool LoadXml (Urho.Resources.XmlElement source, bool setInstanceDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool LoadXml(class Urho.Resources.XmlElement source, bool setInstanceDefault) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Urho.Resources.XmlElement" />
        <Parameter Name="setInstanceDefault" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="setInstanceDefault">To be added.</param>
        <summary>Load from XML data. Return true if successful.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadXml">
      <MemberSignature Language="C#" Value="public virtual bool LoadXml (Urho.Resources.XmlElement source, Urho.Resources.XmlFile styleFile, bool setInstanceDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool LoadXml(class Urho.Resources.XmlElement source, class Urho.Resources.XmlFile styleFile, bool setInstanceDefault) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Urho.Resources.XmlElement" />
        <Parameter Name="styleFile" Type="Urho.Resources.XmlFile" />
        <Parameter Name="setInstanceDefault" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="styleFile">To be added.</param>
        <param name="setInstanceDefault">To be added.</param>
        <summary>Create a child by loading from XML data with style. Returns the child element if successful, null if otherwise.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxAnchor">
      <MemberSignature Language="C#" Value="public Urho.Vector2 MaxAnchor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.Vector2 MaxAnchor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Vector2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Set maximum (bottom right) anchor in relation to the parent element (from 0 to 1.) No effect when anchor is not enabled.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeight">
      <MemberSignature Language="C#" Value="public int MaxHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return minimum height.
            Or
            Set maximum height.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxOffset">
      <MemberSignature Language="C#" Value="public Urho.IntVector2 MaxOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.IntVector2 MaxOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.IntVector2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return maximum offset. Or Set offset of element's bottom right from the maximum anchor in pixels. No effect when anchor is not enabled.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxSize">
      <MemberSignature Language="C#" Value="public Urho.IntVector2 MaxSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.IntVector2 MaxSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.IntVector2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return maximum size.
            Or
            Set maximum size.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidth">
      <MemberSignature Language="C#" Value="public int MaxWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return minimum width.
            Or
            Set maximum width.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinAnchor">
      <MemberSignature Language="C#" Value="public Urho.Vector2 MinAnchor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.Vector2 MinAnchor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Vector2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return minimum anchor. Or Set minimum (top left) anchor in relation to the parent element (from 0 to 1.) No effect when anchor is not enabled.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinHeight">
      <MemberSignature Language="C#" Value="public int MinHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return minimum height.
            Or
            Set minimum height.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinOffset">
      <MemberSignature Language="C#" Value="public Urho.IntVector2 MinOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.IntVector2 MinOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.IntVector2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return minimum offset. Or Set offset of element's top left from the minimum anchor in pixels. No effect when anchor is not enabled.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinSize">
      <MemberSignature Language="C#" Value="public Urho.IntVector2 MinSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.IntVector2 MinSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.IntVector2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return minimum size.
            Or
            Set minimum size.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidth">
      <MemberSignature Language="C#" Value="public int MinWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return minimum width.
            Or
            Set minimum width.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return name.
            Or
            Set name.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NameChanged">
      <MemberSignature Language="C#" Value="public event Action&lt;Urho.Gui.NameChangedEventArgs&gt; NameChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Action`1&lt;valuetype Urho.Gui.NameChangedEventArgs&gt; NameChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;Urho.Gui.NameChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>UI element name changed.</summary>
        <remarks>
          <para>The event can register multiple callbacks and invoke all of them.   If this is not desired, and you only need a single shot callback, you can use the <see cref="M:Urho.SubscribeToNameChanged" /> method.   That one will force that callback and will ignore any previously set events here.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClickBegin">
      <MemberSignature Language="C#" Value="public virtual void OnClickBegin (Urho.IntVector2 position, Urho.IntVector2 screenPosition, int button, int buttons, int qualifiers, Urho.Gui.Cursor cursor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnClickBegin(valuetype Urho.IntVector2 position, valuetype Urho.IntVector2 screenPosition, int32 button, int32 buttons, int32 qualifiers, class Urho.Gui.Cursor cursor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="Urho.IntVector2" />
        <Parameter Name="screenPosition" Type="Urho.IntVector2" />
        <Parameter Name="button" Type="System.Int32" />
        <Parameter Name="buttons" Type="System.Int32" />
        <Parameter Name="qualifiers" Type="System.Int32" />
        <Parameter Name="cursor" Type="Urho.Gui.Cursor" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <param name="screenPosition">To be added.</param>
        <param name="button">To be added.</param>
        <param name="buttons">To be added.</param>
        <param name="qualifiers">To be added.</param>
        <param name="cursor">To be added.</param>
        <summary>
            React to mouse click begin.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClickEnd">
      <MemberSignature Language="C#" Value="public virtual void OnClickEnd (Urho.IntVector2 position, Urho.IntVector2 screenPosition, int button, int buttons, int qualifiers, Urho.Gui.Cursor cursor, Urho.Gui.UIElement beginElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnClickEnd(valuetype Urho.IntVector2 position, valuetype Urho.IntVector2 screenPosition, int32 button, int32 buttons, int32 qualifiers, class Urho.Gui.Cursor cursor, class Urho.Gui.UIElement beginElement) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="Urho.IntVector2" />
        <Parameter Name="screenPosition" Type="Urho.IntVector2" />
        <Parameter Name="button" Type="System.Int32" />
        <Parameter Name="buttons" Type="System.Int32" />
        <Parameter Name="qualifiers" Type="System.Int32" />
        <Parameter Name="cursor" Type="Urho.Gui.Cursor" />
        <Parameter Name="beginElement" Type="Urho.Gui.UIElement" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <param name="screenPosition">To be added.</param>
        <param name="button">To be added.</param>
        <param name="buttons">To be added.</param>
        <param name="qualifiers">To be added.</param>
        <param name="cursor">To be added.</param>
        <param name="beginElement">To be added.</param>
        <summary>
            React to mouse click end.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDoubleClick">
      <MemberSignature Language="C#" Value="public virtual void OnDoubleClick (Urho.IntVector2 position, Urho.IntVector2 screenPosition, int button, int buttons, int qualifiers, Urho.Gui.Cursor cursor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDoubleClick(valuetype Urho.IntVector2 position, valuetype Urho.IntVector2 screenPosition, int32 button, int32 buttons, int32 qualifiers, class Urho.Gui.Cursor cursor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="Urho.IntVector2" />
        <Parameter Name="screenPosition" Type="Urho.IntVector2" />
        <Parameter Name="button" Type="System.Int32" />
        <Parameter Name="buttons" Type="System.Int32" />
        <Parameter Name="qualifiers" Type="System.Int32" />
        <Parameter Name="cursor" Type="Urho.Gui.Cursor" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <param name="screenPosition">To be added.</param>
        <param name="button">To be added.</param>
        <param name="buttons">To be added.</param>
        <param name="qualifiers">To be added.</param>
        <param name="cursor">To be added.</param>
        <summary>
            React to double mouse click.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHover">
      <MemberSignature Language="C#" Value="public virtual void OnHover (Urho.IntVector2 position, Urho.IntVector2 screenPosition, int buttons, int qualifiers, Urho.Gui.Cursor cursor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnHover(valuetype Urho.IntVector2 position, valuetype Urho.IntVector2 screenPosition, int32 buttons, int32 qualifiers, class Urho.Gui.Cursor cursor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="Urho.IntVector2" />
        <Parameter Name="screenPosition" Type="Urho.IntVector2" />
        <Parameter Name="buttons" Type="System.Int32" />
        <Parameter Name="qualifiers" Type="System.Int32" />
        <Parameter Name="cursor" Type="Urho.Gui.Cursor" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <param name="screenPosition">To be added.</param>
        <param name="buttons">To be added.</param>
        <param name="qualifiers">To be added.</param>
        <param name="cursor">To be added.</param>
        <summary>
            React to mouse hover.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIndentSet">
      <MemberSignature Language="C#" Value="public virtual void OnIndentSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnIndentSet() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            React to indent change.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKey">
      <MemberSignature Language="C#" Value="public virtual void OnKey (int key, int buttons, int qualifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnKey(int32 key, int32 buttons, int32 qualifiers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Int32" />
        <Parameter Name="buttons" Type="System.Int32" />
        <Parameter Name="qualifiers" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="buttons">To be added.</param>
        <param name="qualifiers">To be added.</param>
        <summary>
            React to a key press.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPositionSet">
      <MemberSignature Language="C#" Value="public virtual void OnPositionSet (Urho.IntVector2 newPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPositionSet(valuetype Urho.IntVector2 newPosition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newPosition" Type="Urho.IntVector2" />
      </Parameters>
      <Docs>
        <param name="newPosition">To be added.</param>
        <summary>React to position change.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="public virtual void OnResize (Urho.IntVector2 newSize, Urho.IntVector2 delta);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnResize(valuetype Urho.IntVector2 newSize, valuetype Urho.IntVector2 delta) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newSize" Type="Urho.IntVector2" />
        <Parameter Name="delta" Type="Urho.IntVector2" />
      </Parameters>
      <Docs>
        <param name="newSize">To be added.</param>
        <param name="delta">To be added.</param>
        <summary>React to resze.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSetEditable">
      <MemberSignature Language="C#" Value="public virtual void OnSetEditable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnSetEditable() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            React to editable status change.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="public virtual void OnTextInput (string text, int buttons, int qualifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnTextInput(string text, int32 buttons, int32 qualifiers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="buttons" Type="System.Int32" />
        <Parameter Name="qualifiers" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="buttons">To be added.</param>
        <param name="qualifiers">To be added.</param>
        <summary>
            React to text input event.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnWheel">
      <MemberSignature Language="C#" Value="public virtual void OnWheel (int delta, int buttons, int qualifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnWheel(int32 delta, int32 buttons, int32 qualifiers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delta" Type="System.Int32" />
        <Parameter Name="buttons" Type="System.Int32" />
        <Parameter Name="qualifiers" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="delta">To be added.</param>
        <param name="buttons">To be added.</param>
        <param name="qualifiers">To be added.</param>
        <summary>
            React to mouse wheel.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public float Opacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Opacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return opacity.
            Or
            Set opacity.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public Urho.Gui.UIElement Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Urho.Gui.UIElement Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.UIElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return parent element.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pivot">
      <MemberSignature Language="C#" Value="public Urho.Vector2 Pivot { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.Vector2 Pivot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Vector2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return pivot. Or Set pivot relative to element's size (from 0 to 1, where 0.5 is center.) Overrides horizontal &amp; vertical alignment.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public Urho.IntVector2 Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.IntVector2 Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.IntVector2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return position.
            Or
            Set position.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Positioned">
      <MemberSignature Language="C#" Value="public event Action&lt;Urho.Gui.PositionedEventArgs&gt; Positioned;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Action`1&lt;valuetype Urho.Gui.PositionedEventArgs&gt; Positioned" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;Urho.Gui.PositionedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>React to position change.</summary>
        <remarks>
          <para>The event can register multiple callbacks and invoke all of them.   If this is not desired, and you only need a single shot callback, you can use the <see cref="M:Urho.SubscribeToPositioned" /> method.   That one will force that callback and will ignore any previously set events here.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return priority.
            Or
            Set priority.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterObject">
      <MemberSignature Language="C#" Value="public static void RegisterObject (Urho.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterObject(class Urho.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Urho.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>
            Register object factory.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Remove from the parent element. If no other shared pointer references exist, causes immediate deletion.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllChildren">
      <MemberSignature Language="C#" Value="public void RemoveAllChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAllChildren() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Remove all child elements.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllTags">
      <MemberSignature Language="C#" Value="public void RemoveAllTags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAllTags() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Remove all tags.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveChild">
      <MemberSignature Language="C#" Value="public void RemoveChild (Urho.Gui.UIElement element, uint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveChild(class Urho.Gui.UIElement element, unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="Urho.Gui.UIElement" />
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="element">To be added.</param>
        <param name="index">To be added.</param>
        <summary>
            Remove a child element. Starting search at specified index if provided.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveChildAtIndex">
      <MemberSignature Language="C#" Value="public void RemoveChildAtIndex (uint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveChildAtIndex(unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>
            Remove a child element at index.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTag">
      <MemberSignature Language="C#" Value="public bool RemoveTag (string tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveTag(string tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">Tag to remove</param>
        <summary>Removes the specified tag from the UIElement.</summary>
        <returns>
          <see langword="true" /> if the tag existed, <see langword="false" /> otherwise.</returns>
        <remarks>Use the <see cref="M:Urho.Gui.UIElement.AddTag" /> to add a tag to a UIElement, and <see cref="M:Urho.Gui.UIElement.HasTag" /> to determine if an element has the specified tag attached.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetDeepEnabled">
      <MemberSignature Language="C#" Value="public void ResetDeepEnabled ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetDeepEnabled() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Reset enabled state to the element's remembered state prior to calling SetDeepEnabled.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resized">
      <MemberSignature Language="C#" Value="public event Action&lt;Urho.Gui.ResizedEventArgs&gt; Resized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Action`1&lt;valuetype Urho.Gui.ResizedEventArgs&gt; Resized" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;Urho.Gui.ResizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>React to resize.</summary>
        <remarks>
          <para>The event can register multiple callbacks and invoke all of them.   If this is not desired, and you only need a single shot callback, you can use the <see cref="M:Urho.SubscribeToResized" /> method.   That one will force that callback and will ignore any previously set events here.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Root">
      <MemberSignature Language="C#" Value="public Urho.Gui.UIElement Root { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Urho.Gui.UIElement Root" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.UIElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return root element.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveXml">
      <MemberSignature Language="C#" Value="public override bool SaveXml (Urho.Resources.XmlElement dest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool SaveXml(class Urho.Resources.XmlElement dest) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="Urho.Resources.XmlElement" />
      </Parameters>
      <Docs>
        <param name="dest">To be added.</param>
        <summary>Save as XML data. Return true if successful.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveXml">
      <MemberSignature Language="C#" Value="public bool SaveXml (Urho.IO.File dest, string indentation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SaveXml(class Urho.IO.File dest, string indentation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="Urho.IO.File" />
        <Parameter Name="indentation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dest">To be added.</param>
        <param name="indentation">To be added.</param>
        <summary>Save as XML data. Return true if successful.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScreenPosition">
      <MemberSignature Language="C#" Value="public virtual Urho.IntVector2 ScreenPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.IntVector2 ScreenPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.IntVector2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Update and return screen position.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScreenToElement">
      <MemberSignature Language="C#" Value="public virtual Urho.IntVector2 ScreenToElement (Urho.IntVector2 screenPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Urho.IntVector2 ScreenToElement(valuetype Urho.IntVector2 screenPosition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.IntVector2</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="screenPosition" Type="Urho.IntVector2" />
      </Parameters>
      <Docs>
        <param name="screenPosition">To be added.</param>
        <summary>
            Convert screen coordinates to element coordinates.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public bool Selected { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Selected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return whether is selected. Actual meaning is element dependent.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAlignment">
      <MemberSignature Language="C#" Value="public void SetAlignment (Urho.Gui.HorizontalAlignment hAlign, Urho.Gui.VerticalAlignment vAlign);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAlignment(valuetype Urho.Gui.HorizontalAlignment hAlign, valuetype Urho.Gui.VerticalAlignment vAlign) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hAlign" Type="Urho.Gui.HorizontalAlignment" />
        <Parameter Name="vAlign" Type="Urho.Gui.VerticalAlignment" />
      </Parameters>
      <Docs>
        <param name="hAlign">To be added.</param>
        <param name="vAlign">To be added.</param>
        <summary>
            Set horizontal and vertical alignment.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColor">
      <MemberSignature Language="C#" Value="public void SetColor (Urho.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColor(valuetype Urho.Color color) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="Urho.Color" />
      </Parameters>
      <Docs>
        <param name="color">To be added.</param>
        <summary>
            Set color on all corners.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColor">
      <MemberSignature Language="C#" Value="public void SetColor (Urho.Gui.Corner corner, Urho.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColor(valuetype Urho.Gui.Corner corner, valuetype Urho.Color color) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="corner" Type="Urho.Gui.Corner" />
        <Parameter Name="color" Type="Urho.Color" />
      </Parameters>
      <Docs>
        <param name="corner">To be added.</param>
        <param name="color">To be added.</param>
        <summary>
            Set color on one corner.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDeepEnabled">
      <MemberSignature Language="C#" Value="public void SetDeepEnabled (bool enable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDeepEnabled(bool enable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enable">To be added.</param>
        <summary>
            Set enabled state on self and child elements. Elements' own enabled state is remembered (IsEnabledSelf) and can be restored.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDefaultStyle">
      <MemberSignature Language="C#" Value="public void SetDefaultStyle (Urho.Resources.XmlFile style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDefaultStyle(class Urho.Resources.XmlFile style) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="Urho.Resources.XmlFile" />
      </Parameters>
      <Docs>
        <param name="style">To be added.</param>
        <summary>Set default style file for later use by children elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetElementEventSender">
      <MemberSignature Language="C#" Value="public void SetElementEventSender (bool flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetElementEventSender(bool flag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="flag">To be added.</param>
        <summary>
            Set element event sender flag. When child element is added or deleted, the event would be sent using UIElement found in the parental chain having this flag set. If not set, the event is sent using UI's root as per normal.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEnabledRecursive">
      <MemberSignature Language="C#" Value="public void SetEnabledRecursive (bool enable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetEnabledRecursive(bool enable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enable">To be added.</param>
        <summary>
            Set enabled state on self and child elements. Unlike SetDeepEnabled this does not remember the elements' own enabled state, but overwrites it.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFixedHeight">
      <MemberSignature Language="C#" Value="public void SetFixedHeight (int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFixedHeight(int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="height">To be added.</param>
        <summary>
            Set fixed height.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFixedSize">
      <MemberSignature Language="C#" Value="public void SetFixedSize (Urho.IntVector2 size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFixedSize(valuetype Urho.IntVector2 size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="Urho.IntVector2" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <summary>
            Set fixed size.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFixedSize">
      <MemberSignature Language="C#" Value="public void SetFixedSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFixedSize(int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <summary>
            Set fixed size.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFixedWidth">
      <MemberSignature Language="C#" Value="public void SetFixedWidth (int width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFixedWidth(int32 width) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">To be added.</param>
        <summary>
            Set fixed width.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus (bool enable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFocus(bool enable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enable">To be added.</param>
        <summary>
            Set whether is focused. Only one element can be focused at a time.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLayout">
      <MemberSignature Language="C#" Value="public void SetLayout (Urho.Gui.LayoutMode mode, int spacing, Urho.IntRect border);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLayout(valuetype Urho.Gui.LayoutMode mode, int32 spacing, valuetype Urho.IntRect border) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Urho.Gui.LayoutMode" />
        <Parameter Name="spacing" Type="System.Int32" />
        <Parameter Name="border" Type="Urho.IntRect" />
      </Parameters>
      <Docs>
        <param name="mode">To be added.</param>
        <param name="spacing">To be added.</param>
        <param name="border">To be added.</param>
        <summary>
            Set layout.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMaxAnchor">
      <MemberSignature Language="C#" Value="public void SetMaxAnchor (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetMaxAnchor(float32 x, float32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>Set maximum (bottom right) anchor in relation to the parent element (from 0 to 1.) No effect when anchor is not enabled.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMaxSize">
      <MemberSignature Language="C#" Value="public void SetMaxSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetMaxSize(int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <summary>
            Set maximum size.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMinAnchor">
      <MemberSignature Language="C#" Value="public void SetMinAnchor (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetMinAnchor(float32 x, float32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>Set minimum (top left) anchor in relation to the parent element (from 0 to 1.) No effect when anchor is not enabled.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMinSize">
      <MemberSignature Language="C#" Value="public void SetMinSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetMinSize(int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <summary>
            Set minimum size.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetParent">
      <MemberSignature Language="C#" Value="public void SetParent (Urho.Gui.UIElement parent, uint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetParent(class Urho.Gui.UIElement parent, unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="Urho.Gui.UIElement" />
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="parent">To be added.</param>
        <param name="index">To be added.</param>
        <summary>
            Set parent element. Same as parent-&gt;InsertChild(index, this).
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPivot">
      <MemberSignature Language="C#" Value="public void SetPivot (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPivot(float32 x, float32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>Set pivot relative to element's size (from 0 to 1, where 0.5 is center.) Overrides horizontal &amp; vertical alignment.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPosition">
      <MemberSignature Language="C#" Value="public void SetPosition (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPosition(int32 x, int32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>
            Set position.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSize">
      <MemberSignature Language="C#" Value="public void SetSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSize(int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <summary>
            Set size.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStyle">
      <MemberSignature Language="C#" Value="public bool SetStyle (Urho.Resources.XmlElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SetStyle(class Urho.Resources.XmlElement element) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="Urho.Resources.XmlElement" />
      </Parameters>
      <Docs>
        <param name="element">To be added.</param>
        <summary>Set style from an XML element. Return true if the style is applied successfully.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStyle">
      <MemberSignature Language="C#" Value="public bool SetStyle (string styleName, Urho.Resources.XmlFile file);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SetStyle(string styleName, class Urho.Resources.XmlFile file) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleName" Type="System.String" />
        <Parameter Name="file" Type="Urho.Resources.XmlFile" />
      </Parameters>
      <Docs>
        <param name="styleName">To be added.</param>
        <param name="file">To be added.</param>
        <summary>Set style from an XML file. Find the style element by name. If the style file is not explicitly provided, use the default style from parental chain. Return true if the style is applied successfully.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStyleAuto">
      <MemberSignature Language="C#" Value="public bool SetStyleAuto (Urho.Resources.XmlFile file);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SetStyleAuto(class Urho.Resources.XmlFile file) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="Urho.Resources.XmlFile" />
      </Parameters>
      <Docs>
        <param name="file">To be added.</param>
        <summary>Set style from an XML file. Find the style element automatically by using the element's typename. If the style file is not explicitly provided, use the default style from parental chain. Return true if the style is applied successfully.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVar">
      <MemberSignature Language="C#" Value="public void SetVar (Urho.StringHash key, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetVar(valuetype Urho.StringHash key, int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Urho.StringHash" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Set a user variable.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVar">
      <MemberSignature Language="C#" Value="public void SetVar (Urho.StringHash key, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetVar(valuetype Urho.StringHash key, float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Urho.StringHash" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Set a user variable.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVar">
      <MemberSignature Language="C#" Value="public void SetVar (Urho.StringHash key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetVar(valuetype Urho.StringHash key, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Urho.StringHash" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Set a user variable.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVar">
      <MemberSignature Language="C#" Value="public void SetVar (Urho.StringHash key, Urho.Color value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetVar(valuetype Urho.StringHash key, valuetype Urho.Color value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Urho.StringHash" />
        <Parameter Name="value" Type="Urho.Color" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Set a user variable.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVar">
      <MemberSignature Language="C#" Value="public void SetVar (Urho.StringHash key, Urho.IntRect value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetVar(valuetype Urho.StringHash key, valuetype Urho.IntRect value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Urho.StringHash" />
        <Parameter Name="value" Type="Urho.IntRect" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Set a user variable.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVar">
      <MemberSignature Language="C#" Value="public void SetVar (Urho.StringHash key, Urho.IntVector2 value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetVar(valuetype Urho.StringHash key, valuetype Urho.IntVector2 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Urho.StringHash" />
        <Parameter Name="value" Type="Urho.IntVector2" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Set a user variable.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVar">
      <MemberSignature Language="C#" Value="public void SetVar (Urho.StringHash key, Urho.Matrix3x4 value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetVar(valuetype Urho.StringHash key, valuetype Urho.Matrix3x4 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Urho.StringHash" />
        <Parameter Name="value" Type="Urho.Matrix3x4" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>Set a user variable.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVar">
      <MemberSignature Language="C#" Value="public void SetVar (Urho.StringHash key, Urho.Matrix4 value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetVar(valuetype Urho.StringHash key, valuetype Urho.Matrix4 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Urho.StringHash" />
        <Parameter Name="value" Type="Urho.Matrix4" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>Set a user variable.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVar">
      <MemberSignature Language="C#" Value="public void SetVar (Urho.StringHash key, Urho.Quaternion value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetVar(valuetype Urho.StringHash key, valuetype Urho.Quaternion value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Urho.StringHash" />
        <Parameter Name="value" Type="Urho.Quaternion" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Set a user variable.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVar">
      <MemberSignature Language="C#" Value="public void SetVar (Urho.StringHash key, Urho.Vector2 value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetVar(valuetype Urho.StringHash key, valuetype Urho.Vector2 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Urho.StringHash" />
        <Parameter Name="value" Type="Urho.Vector2" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Set a user variable.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVar">
      <MemberSignature Language="C#" Value="public void SetVar (Urho.StringHash key, Urho.Vector3 value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetVar(valuetype Urho.StringHash key, valuetype Urho.Vector3 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Urho.StringHash" />
        <Parameter Name="value" Type="Urho.Vector3" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Set a user variable.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVar">
      <MemberSignature Language="C#" Value="public void SetVar (Urho.StringHash key, Urho.Vector4 value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetVar(valuetype Urho.StringHash key, valuetype Urho.Vector4 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Urho.StringHash" />
        <Parameter Name="value" Type="Urho.Vector4" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Set a user variable.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSortChildren">
      <MemberSignature Language="C#" Value="public bool ShouldSortChildren { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldSortChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return whether should sort child elements according to priority.
            Or
            Set whether should sort child elements according to priority. Default true.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public Urho.IntVector2 Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.IntVector2 Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.IntVector2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return size.
            Or
            Set size.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SortChildren">
      <MemberSignature Language="C#" Value="public void SortChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SortChildren() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Sort child elements if sorting enabled and order dirty. Called by UI.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToDefocused">
      <MemberSignature Language="C#" Value="public Urho.Subscription SubscribeToDefocused (Action&lt;Urho.Gui.DefocusedEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Subscription SubscribeToDefocused(class System.Action`1&lt;valuetype Urho.Gui.DefocusedEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Subscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;Urho.Gui.DefocusedEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">The handler to invoke when this event is raised.</param>
        <summary>Subscribes to the Defocused event raised by the UIElement.</summary>
        <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
        <remarks>
          <para>This method will override any prior subscription, including those assigned to on event handlers.</para>
          <para>This has the advantage that it does a straight connection and returns a handle that is easy to unsubscribe from.</para>
          <para>For a more event-like approach, use the <see cref="E:Urho.Gui.UIElement.Defocused" /> event.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToDragBegin">
      <MemberSignature Language="C#" Value="public Urho.Subscription SubscribeToDragBegin (Action&lt;Urho.Gui.DragBeginEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Subscription SubscribeToDragBegin(class System.Action`1&lt;valuetype Urho.Gui.DragBeginEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Subscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;Urho.Gui.DragBeginEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">The handler to invoke when this event is raised.</param>
        <summary>Subscribes to the DragBegin event raised by the UIElement.</summary>
        <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
        <remarks>
          <para>This method will override any prior subscription, including those assigned to on event handlers.</para>
          <para>This has the advantage that it does a straight connection and returns a handle that is easy to unsubscribe from.</para>
          <para>For a more event-like approach, use the <see cref="E:Urho.Gui.UIElement.DragBegin" /> event.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToDragCancel">
      <MemberSignature Language="C#" Value="public Urho.Subscription SubscribeToDragCancel (Action&lt;Urho.Gui.DragCancelEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Subscription SubscribeToDragCancel(class System.Action`1&lt;valuetype Urho.Gui.DragCancelEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Subscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;Urho.Gui.DragCancelEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">The handler to invoke when this event is raised.</param>
        <summary>Subscribes to the DragCancel event raised by the UIElement.</summary>
        <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
        <remarks>
          <para>This method will override any prior subscription, including those assigned to on event handlers.</para>
          <para>This has the advantage that it does a straight connection and returns a handle that is easy to unsubscribe from.</para>
          <para>For a more event-like approach, use the <see cref="E:Urho.Gui.UIElement.DragCancel" /> event.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToDragDropFinish">
      <MemberSignature Language="C#" Value="public Urho.Subscription SubscribeToDragDropFinish (Action&lt;Urho.Gui.DragDropFinishEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Subscription SubscribeToDragDropFinish(class System.Action`1&lt;valuetype Urho.Gui.DragDropFinishEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Subscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;Urho.Gui.DragDropFinishEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">The handler to invoke when this event is raised.</param>
        <summary>Subscribes to the DragDropFinish event raised by the UIElement.</summary>
        <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
        <remarks>
          <para>This method will override any prior subscription, including those assigned to on event handlers.</para>
          <para>This has the advantage that it does a straight connection and returns a handle that is easy to unsubscribe from.</para>
          <para>For a more event-like approach, use the <see cref="E:Urho.Gui.UIElement.DragDropFinish" /> event.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToDragDropTest">
      <MemberSignature Language="C#" Value="public Urho.Subscription SubscribeToDragDropTest (Action&lt;Urho.Gui.DragDropTestEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Subscription SubscribeToDragDropTest(class System.Action`1&lt;valuetype Urho.Gui.DragDropTestEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Subscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;Urho.Gui.DragDropTestEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">The handler to invoke when this event is raised.</param>
        <summary>Subscribes to the DragDropTest event raised by the UIElement.</summary>
        <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
        <remarks>
          <para>This method will override any prior subscription, including those assigned to on event handlers.</para>
          <para>This has the advantage that it does a straight connection and returns a handle that is easy to unsubscribe from.</para>
          <para>For a more event-like approach, use the <see cref="E:Urho.Gui.UIElement.DragDropTest" /> event.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToDragEnd">
      <MemberSignature Language="C#" Value="public Urho.Subscription SubscribeToDragEnd (Action&lt;Urho.Gui.DragEndEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Subscription SubscribeToDragEnd(class System.Action`1&lt;valuetype Urho.Gui.DragEndEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Subscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;Urho.Gui.DragEndEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">The handler to invoke when this event is raised.</param>
        <summary>Subscribes to the DragEnd event raised by the UIElement.</summary>
        <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
        <remarks>
          <para>This method will override any prior subscription, including those assigned to on event handlers.</para>
          <para>This has the advantage that it does a straight connection and returns a handle that is easy to unsubscribe from.</para>
          <para>For a more event-like approach, use the <see cref="E:Urho.Gui.UIElement.DragEnd" /> event.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToDragMove">
      <MemberSignature Language="C#" Value="public Urho.Subscription SubscribeToDragMove (Action&lt;Urho.Gui.DragMoveEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Subscription SubscribeToDragMove(class System.Action`1&lt;valuetype Urho.Gui.DragMoveEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Subscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;Urho.Gui.DragMoveEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">The handler to invoke when this event is raised.</param>
        <summary>Subscribes to the DragMove event raised by the UIElement.</summary>
        <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
        <remarks>
          <para>This method will override any prior subscription, including those assigned to on event handlers.</para>
          <para>This has the advantage that it does a straight connection and returns a handle that is easy to unsubscribe from.</para>
          <para>For a more event-like approach, use the <see cref="E:Urho.Gui.UIElement.DragMove" /> event.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToElementAdded">
      <MemberSignature Language="C#" Value="public Urho.Subscription SubscribeToElementAdded (Action&lt;Urho.Gui.ElementAddedEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Subscription SubscribeToElementAdded(class System.Action`1&lt;valuetype Urho.Gui.ElementAddedEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Subscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;Urho.Gui.ElementAddedEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">The handler to invoke when this event is raised.</param>
        <summary>Subscribes to the ElementAdded event raised by the UIElement.</summary>
        <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
        <remarks>
          <para>This method will override any prior subscription, including those assigned to on event handlers.</para>
          <para>This has the advantage that it does a straight connection and returns a handle that is easy to unsubscribe from.</para>
          <para>For a more event-like approach, use the <see cref="E:Urho.Gui.UIElement.ElementAdded" /> event.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToElementRemoved">
      <MemberSignature Language="C#" Value="public Urho.Subscription SubscribeToElementRemoved (Action&lt;Urho.Gui.ElementRemovedEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Subscription SubscribeToElementRemoved(class System.Action`1&lt;valuetype Urho.Gui.ElementRemovedEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Subscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;Urho.Gui.ElementRemovedEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">The handler to invoke when this event is raised.</param>
        <summary>Subscribes to the ElementRemoved event raised by the UIElement.</summary>
        <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
        <remarks>
          <para>This method will override any prior subscription, including those assigned to on event handlers.</para>
          <para>This has the advantage that it does a straight connection and returns a handle that is easy to unsubscribe from.</para>
          <para>For a more event-like approach, use the <see cref="E:Urho.Gui.UIElement.ElementRemoved" /> event.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToFocused">
      <MemberSignature Language="C#" Value="public Urho.Subscription SubscribeToFocused (Action&lt;Urho.Gui.FocusedEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Subscription SubscribeToFocused(class System.Action`1&lt;valuetype Urho.Gui.FocusedEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Subscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;Urho.Gui.FocusedEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">The handler to invoke when this event is raised.</param>
        <summary>Subscribes to the Focused event raised by the UIElement.</summary>
        <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
        <remarks>
          <para>This method will override any prior subscription, including those assigned to on event handlers.</para>
          <para>This has the advantage that it does a straight connection and returns a handle that is easy to unsubscribe from.</para>
          <para>For a more event-like approach, use the <see cref="E:Urho.Gui.UIElement.Focused" /> event.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToHoverBegin">
      <MemberSignature Language="C#" Value="public Urho.Subscription SubscribeToHoverBegin (Action&lt;Urho.Gui.HoverBeginEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Subscription SubscribeToHoverBegin(class System.Action`1&lt;valuetype Urho.Gui.HoverBeginEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Subscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;Urho.Gui.HoverBeginEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">The handler to invoke when this event is raised.</param>
        <summary>Subscribes to the HoverBegin event raised by the UIElement.</summary>
        <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
        <remarks>
          <para>This method will override any prior subscription, including those assigned to on event handlers.</para>
          <para>This has the advantage that it does a straight connection and returns a handle that is easy to unsubscribe from.</para>
          <para>For a more event-like approach, use the <see cref="E:Urho.Gui.UIElement.HoverBegin" /> event.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToHoverEnd">
      <MemberSignature Language="C#" Value="public Urho.Subscription SubscribeToHoverEnd (Action&lt;Urho.Gui.HoverEndEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Subscription SubscribeToHoverEnd(class System.Action`1&lt;valuetype Urho.Gui.HoverEndEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Subscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;Urho.Gui.HoverEndEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">The handler to invoke when this event is raised.</param>
        <summary>Subscribes to the HoverEnd event raised by the UIElement.</summary>
        <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
        <remarks>
          <para>This method will override any prior subscription, including those assigned to on event handlers.</para>
          <para>This has the advantage that it does a straight connection and returns a handle that is easy to unsubscribe from.</para>
          <para>For a more event-like approach, use the <see cref="E:Urho.Gui.UIElement.HoverEnd" /> event.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToLayoutUpdated">
      <MemberSignature Language="C#" Value="public Urho.Subscription SubscribeToLayoutUpdated (Action&lt;Urho.Gui.LayoutUpdatedEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Subscription SubscribeToLayoutUpdated(class System.Action`1&lt;valuetype Urho.Gui.LayoutUpdatedEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Subscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;Urho.Gui.LayoutUpdatedEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">The handler to invoke when this event is raised.</param>
        <summary>Subscribes to the LayoutUpdated event raised by the UIElement.</summary>
        <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
        <remarks>
          <para>This method will override any prior subscription, including those assigned to on event handlers.</para>
          <para>This has the advantage that it does a straight connection and returns a handle that is easy to unsubscribe from.</para>
          <para>For a more event-like approach, use the <see cref="E:Urho.Gui.UIElement.LayoutUpdated" /> event.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToNameChanged">
      <MemberSignature Language="C#" Value="public Urho.Subscription SubscribeToNameChanged (Action&lt;Urho.Gui.NameChangedEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Subscription SubscribeToNameChanged(class System.Action`1&lt;valuetype Urho.Gui.NameChangedEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Subscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;Urho.Gui.NameChangedEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">The handler to invoke when this event is raised.</param>
        <summary>Subscribes to the NameChanged event raised by the UIElement.</summary>
        <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
        <remarks>
          <para>This method will override any prior subscription, including those assigned to on event handlers.</para>
          <para>This has the advantage that it does a straight connection and returns a handle that is easy to unsubscribe from.</para>
          <para>For a more event-like approach, use the <see cref="E:Urho.Gui.UIElement.NameChanged" /> event.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToPositioned">
      <MemberSignature Language="C#" Value="public Urho.Subscription SubscribeToPositioned (Action&lt;Urho.Gui.PositionedEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Subscription SubscribeToPositioned(class System.Action`1&lt;valuetype Urho.Gui.PositionedEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Subscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;Urho.Gui.PositionedEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">The handler to invoke when this event is raised.</param>
        <summary>Subscribes to the Positioned event raised by the UIElement.</summary>
        <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
        <remarks>
          <para>This method will override any prior subscription, including those assigned to on event handlers.</para>
          <para>This has the advantage that it does a straight connection and returns a handle that is easy to unsubscribe from.</para>
          <para>For a more event-like approach, use the <see cref="E:Urho.Gui.UIElement.Positioned" /> event.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToResized">
      <MemberSignature Language="C#" Value="public Urho.Subscription SubscribeToResized (Action&lt;Urho.Gui.ResizedEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Subscription SubscribeToResized(class System.Action`1&lt;valuetype Urho.Gui.ResizedEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Subscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;Urho.Gui.ResizedEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">The handler to invoke when this event is raised.</param>
        <summary>Subscribes to the Resized event raised by the UIElement.</summary>
        <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
        <remarks>
          <para>This method will override any prior subscription, including those assigned to on event handlers.</para>
          <para>This has the advantage that it does a straight connection and returns a handle that is easy to unsubscribe from.</para>
          <para>For a more event-like approach, use the <see cref="E:Urho.Gui.UIElement.Resized" /> event.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToVisibleChanged">
      <MemberSignature Language="C#" Value="public Urho.Subscription SubscribeToVisibleChanged (Action&lt;Urho.Gui.VisibleChangedEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Subscription SubscribeToVisibleChanged(class System.Action`1&lt;valuetype Urho.Gui.VisibleChangedEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Subscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;Urho.Gui.VisibleChangedEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">The handler to invoke when this event is raised.</param>
        <summary>Subscribes to the VisibleChanged event raised by the UIElement.</summary>
        <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
        <remarks>
          <para>This method will override any prior subscription, including those assigned to on event handlers.</para>
          <para>This has the advantage that it does a straight connection and returns a handle that is easy to unsubscribe from.</para>
          <para>For a more event-like approach, use the <see cref="E:Urho.Gui.UIElement.VisibleChanged" /> event.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraversalMode">
      <MemberSignature Language="C#" Value="public Urho.Gui.TraversalMode TraversalMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.Gui.TraversalMode TraversalMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.TraversalMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return traversal mode for rendering.
            Or
            Set traversal mode for rendering. The default traversal mode is TM_BREADTH_FIRST for non-root element. Root element should be set to TM_DEPTH_FIRST to avoid artifacts during rendering.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public override Urho.StringHash Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.StringHash Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.StringHash</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Urho's type system type.</summary>
        <value>StringHash representing the type for this C# type.</value>
        <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public override string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Urho's low-level type name.</summary>
        <value>Stringified low-level type name.</value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeNameStatic">
      <MemberSignature Language="C#" Value="public static string TypeNameStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string TypeNameStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Urho's low-level type name, accessible as a static method.</summary>
        <value>Stringified low-level type name.</value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeStatic">
      <MemberSignature Language="C#" Value="public static Urho.StringHash TypeStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Urho.StringHash TypeStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.StringHash</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Urho's low-level type, accessible as a static method.</summary>
        <value>This returns the Urho's type and is surface for the low-level Urho code.</value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual void Update (float timeStep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Update(float32 timeStep) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeStep" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="timeStep">To be added.</param>
        <summary>
            Perform UI element update.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateLayout">
      <MemberSignature Language="C#" Value="public void UpdateLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateLayout() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Manually update layout. Should not be necessary in most cases, but is provided for completeness.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseDerivedOpacity">
      <MemberSignature Language="C#" Value="public bool UseDerivedOpacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDerivedOpacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return whether parent elements' opacity affects opacity.
            Or
            Set whether parent elements' opacity affects opacity. Default true.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignment">
      <MemberSignature Language="C#" Value="public Urho.Gui.VerticalAlignment VerticalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.Gui.VerticalAlignment VerticalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Gui.VerticalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return vertical alignment.
            Or
            Set vertical alignment.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determines whether element itself should be visible. Elements can be also hidden due to the parent being not visible, use VisibleEffective to check.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisibleChanged">
      <MemberSignature Language="C#" Value="public event Action&lt;Urho.Gui.VisibleChangedEventArgs&gt; VisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Action`1&lt;valuetype Urho.Gui.VisibleChangedEventArgs&gt; VisibleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;Urho.Gui.VisibleChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>React to visibility change.</summary>
        <remarks>
          <para>The event can register multiple callbacks and invoke all of them.   If this is not desired, and you only need a single shot callback, you can use the <see cref="M:Urho.SubscribeToVisibleChanged" /> method.   That one will force that callback and will ignore any previously set events here.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisibleEffective">
      <MemberSignature Language="C#" Value="public bool VisibleEffective { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool VisibleEffective" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return whether element is effectively visible (parent element chain is visible.)</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public int Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return width.
            Or
            Set width only.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
