<Type Name="HoloApplication" FullName="Urho.HoloLens.HoloApplication">
  <TypeSignature Language="C#" Value="public class HoloApplication : Urho.Application" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HoloApplication extends Urho.Application" />
  <AssemblyInfo>
    <AssemblyName>Urho</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Urho.Application</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Base class for creating holographics applications for HoloLens.</summary>
    <remarks>This is the bas class that your holographics application should subclass and provide an implementation for the Application.Start. It is important to not that your implementation should start with base.Start() that creates a basic scene for you. The minimal holographics application looks like the following:
	  <example><code lang="C#"><![CDATA[using System;
using Urho;
using Urho.HoloLens;

public class MyApplication : HoloApplication
{
    public MyApplication(string assets) : base(assets) { }

    protected override void Start()
    {
        base.Start();

        var boxNode = Scene.CreateChild();
        boxNode.Position = new Vector3(0, 0, 1);
        boxNode.SetScale(0.2f);

        boxNode.CreateComponent<Urho.Shapes.Box>();
    }
}
]]></code></example></remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HoloApplication (string assetsDirectory);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string assetsDirectory) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assetsDirectory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assetsDirectory">Relative path to a directory with assets.</param>
        <summary>Default constructor for HoloLens based applications.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CameraLight">
      <MemberSignature Language="C#" Value="public Urho.Light CameraLight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Urho.Light CameraLight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Light</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:Urho.Light" /> component attached to user's <see cref="T:Urho.Camera" /></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateModelFromVertexData">
      <MemberSignature Language="C#" Value="protected Urho.Model CreateModelFromVertexData (Urho.HoloLens.SpatialVertex[] vertexData, short[] indexData, Urho.Quaternion rotation = null);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class Urho.Model CreateModelFromVertexData(valuetype Urho.HoloLens.SpatialVertex[] vertexData, int16[] indexData, valuetype Urho.Quaternion rotation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Model</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vertexData" Type="Urho.HoloLens.SpatialVertex[]" />
        <Parameter Name="indexData" Type="System.Int16[]" />
        <Parameter Name="rotation" Type="Urho.Quaternion" />
      </Parameters>
      <Docs>
        <param name="vertexData">To be added.</param>
        <param name="indexData">To be added.</param>
        <param name="rotation">To be added.</param>
        <summary>Creates <see cref="T:Urho.Model" /> from spatial geometry using <see cref="T:Urho.Geometry" /> with <see cref="T:Urho.IndexBuffer" /> and <see cref="T:Urho.VertexBuffer" />.</summary>
        <returns>Instance of <see cref="T:Urho.Model" /> object that can be used in <see cref="T:Urho.StaticModel" /> or <see cref="T:Urho.Physics.CollisionShape" /> components.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultRenderPath">
      <MemberSignature Language="C#" Value="protected virtual Urho.Resources.XmlFile DefaultRenderPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Urho.Resources.XmlFile DefaultRenderPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Resources.XmlFile</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectionalLight">
      <MemberSignature Language="C#" Value="public Urho.Light DirectionalLight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Urho.Light DirectionalLight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Light</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Default directional <see cref="T:Urho.Light" /> in the basic scene.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DistanceBetweenEyes">
      <MemberSignature Language="C#" Value="public float DistanceBetweenEyes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DistanceBetweenEyes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Distance between eyes.</summary>
        <value>To be added.</value>
        <remarks>HoloApplication doesn't set any offset between cameras, instead of doing that it applies View and Projection matrices from HoloLens API for both eyes. With the given data we can calculate the real distance between eyes used by the system. This distance depends on system calibration. For an average person it would be 63mm or <see cref="T:Urho.Vector3" />(0.063, 0, 0) in Urho.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Emulator">
      <MemberSignature Language="C#" Value="public bool Emulator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Emulator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Emulator mode</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableGestureHold">
      <MemberSignature Language="C#" Value="public bool EnableGestureHold { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableGestureHold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enables or disables Hold gesture.</summary>
        <value>To be added.</value>
        <remarks>See https://developer.microsoft.com/en-us/windows/holographic/gestures for details</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableGestureManipulation">
      <MemberSignature Language="C#" Value="public bool EnableGestureManipulation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableGestureManipulation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enables or disables Manipulation gesture.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableGestureTapped">
      <MemberSignature Language="C#" Value="public bool EnableGestureTapped { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableGestureTapped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enables or disables Tapped and Double Tapped gestures.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusWorldPoint">
      <MemberSignature Language="C#" Value="public virtual Urho.Vector3 FocusWorldPoint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.Vector3 FocusWorldPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Vector3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Focus point in World coordinates.</summary>
        <value>To be added.</value>
        <remarks>Informs the system about a specific point in your scene to prioritize for image stabilization. You should set the focus point near the content that the user is looking at.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateModelFromSpatialSurface">
      <MemberSignature Language="C#" Value="public virtual Urho.Model GenerateModelFromSpatialSurface (Urho.HoloLens.SpatialMeshInfo surface);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Urho.Model GenerateModelFromSpatialSurface(valuetype Urho.HoloLens.SpatialMeshInfo surface) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Model</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="surface" Type="Urho.HoloLens.SpatialMeshInfo" />
      </Parameters>
      <Docs>
        <param name="surface">Creates Model from spatial surfaces.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>Can be overriden but most likely will be called in a background thread. The default implementation uses <see href="M:Urho.HoloLens.HoloApplication.CreateModelFromVertexData" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HeadPosition">
      <MemberSignature Language="C#" Value="public Urho.Vector3 HeadPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.Vector3 HeadPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Vector3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>User's current position.</summary>
        <value>To be added.</value>
        <remarks>The exact position will be between the cameras representing user's eyes.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HoloTransparentColor">
      <MemberSignature Language="C#" Value="public Urho.Color HoloTransparentColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.Color HoloTransparentColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This color can be used as a occluder for game objects, but in a real world it is fully transparent.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftCamera">
      <MemberSignature Language="C#" Value="public Urho.Camera LeftCamera { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Urho.Camera LeftCamera" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Camera</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:Urho.Camera" /> component that represents user's left eye.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Octree">
      <MemberSignature Language="C#" Value="public Urho.Octree Octree { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Urho.Octree Octree" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Octree</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Fast access to <see cref="T:Urho.Octree" /> added to the basic scene.</summary>
        <value>To be added.</value>
        <remarks>Can be used for ray casting.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGestureDoubleTapped">
      <MemberSignature Language="C#" Value="public virtual void OnGestureDoubleTapped ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnGestureDoubleTapped() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invokes when user uses double tap gesture. Requires enabled EnableGestureTapped property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGestureHoldCanceled">
      <MemberSignature Language="C#" Value="public virtual void OnGestureHoldCanceled ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnGestureHoldCanceled() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invokes when user cancels Hold gesture. Requires enabled EnableGestureHold property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGestureHoldCompleted">
      <MemberSignature Language="C#" Value="public virtual void OnGestureHoldCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnGestureHoldCompleted() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invokes when user completes Hold gesture. Requires enabled EnableGestureHold property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGestureHoldStarted">
      <MemberSignature Language="C#" Value="public virtual void OnGestureHoldStarted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnGestureHoldStarted() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invokes when user starts Hold gesture. Requires enabled EnableGestureHold property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGestureManipulationCanceled">
      <MemberSignature Language="C#" Value="public virtual void OnGestureManipulationCanceled ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnGestureManipulationCanceled() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invokes when user cancels Manipulation gesture. Requires enabled EnableGestureManipulation property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGestureManipulationCompleted">
      <MemberSignature Language="C#" Value="public virtual void OnGestureManipulationCompleted (Urho.Vector3 relativeHandPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnGestureManipulationCompleted(valuetype Urho.Vector3 relativeHandPosition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeHandPosition" Type="Urho.Vector3" />
      </Parameters>
      <Docs>
        <param name="relativeHandPosition">To be added.</param>
        <summary>Invokes when user completes Manipulation gesture. Requires enabled EnableGestureManipulation property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGestureManipulationStarted">
      <MemberSignature Language="C#" Value="public virtual void OnGestureManipulationStarted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnGestureManipulationStarted() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invokes when user starts Manipulation gesture. Requires enabled EnableGestureManipulation property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGestureManipulationUpdated">
      <MemberSignature Language="C#" Value="public virtual void OnGestureManipulationUpdated (Urho.Vector3 relativeHandPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnGestureManipulationUpdated(valuetype Urho.Vector3 relativeHandPosition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeHandPosition" Type="Urho.Vector3" />
      </Parameters>
      <Docs>
        <param name="relativeHandPosition">To be added.</param>
        <summary>Invokes when user uses Manipulation gesture. Requires enabled EnableGestureManipulation property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGestureTapped">
      <MemberSignature Language="C#" Value="public virtual void OnGestureTapped ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnGestureTapped() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSurfaceAddedOrUpdated">
      <MemberSignature Language="C#" Value="public virtual void OnSurfaceAddedOrUpdated (Urho.HoloLens.SpatialMeshInfo surface, Urho.Model generatedModel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnSurfaceAddedOrUpdated(valuetype Urho.HoloLens.SpatialMeshInfo surface, class Urho.Model generatedModel) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="surface" Type="Urho.HoloLens.SpatialMeshInfo" />
        <Parameter Name="generatedModel" Type="Urho.Model" />
      </Parameters>
      <Docs>
        <param name="surface">To be added.</param>
        <param name="generatedModel">Model created by <see href="M:Urho.HoloLens.HoloApplication.GenerateModelFromSpatialSurface" />.</param>
        <summary>Invokes when HoloLens recognizes a new spatial surface or updates any existing..</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUpdate">
      <MemberSignature Language="C#" Value="protected override void OnUpdate (float timeStep);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnUpdate(float32 timeStep) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeStep" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="timeStep">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterCortanaCommands">
      <MemberSignature Language="C#" Value="protected System.Threading.Tasks.Task&lt;bool&gt; RegisterCortanaCommands (System.Collections.Generic.Dictionary&lt;string,Action&gt; commands);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; RegisterCortanaCommands(class System.Collections.Generic.Dictionary`2&lt;string, class System.Action&gt; commands) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commands" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Action&gt;" />
      </Parameters>
      <Docs>
        <param name="commands">Set of voice commands.</param>
        <summary>Registers set of voice commands with handlers.</summary>
        <returns>Returns false if 'Microphone' device capability was not enabled in the AppManifest.</returns>
        <remarks>You should enable 'Microphone' device capability in the AppManifest.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightCamera">
      <MemberSignature Language="C#" Value="public Urho.Camera RightCamera { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Urho.Camera RightCamera" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Camera</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:Urho.Camera" /> component that represents user's right eye.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scene">
      <MemberSignature Language="C#" Value="public Urho.Scene Scene { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Urho.Scene Scene" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Scene</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Root node of the simple scene created in Start metod.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="protected override void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Start() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Urho.HoloLens.HoloApplication/&lt;Start&gt;c__async0))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartSpatialMapping">
      <MemberSignature Language="C#" Value="protected System.Threading.Tasks.Task&lt;bool&gt; StartSpatialMapping (Urho.Vector3 extents, int trianglesPerCubicMeter = 1000, Urho.Color color = null, bool onlyAdd = false, bool convertToLeftHanded = true);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; StartSpatialMapping(valuetype Urho.Vector3 extents, int32 trianglesPerCubicMeter, valuetype Urho.Color color, bool onlyAdd, bool convertToLeftHanded) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extents" Type="Urho.Vector3" />
        <Parameter Name="trianglesPerCubicMeter" Type="System.Int32" />
        <Parameter Name="color" Type="Urho.Color" />
        <Parameter Name="onlyAdd" Type="System.Boolean" />
        <Parameter Name="convertToLeftHanded" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extents">Bounding volume to observe. Vector3(20, 10, 5) means a box that is 20x10x5 meters.</param>
        <param name="trianglesPerCubicMeter">Desired accuracy.</param>
        <param name="color">To be added.</param>
        <param name="onlyAdd">To be added.</param>
        <param name="convertToLeftHanded">To be added.</param>
        <summary>Starts spatial mapping procedure. </summary>
        <returns>Returns 'false' if spatialMapping device capability is not defined in the app's manifest. See <see cref="https://developer.microsoft.com/en-us/windows/holographic/spatial_mapping_in_directx" /> for more details.</returns>
        <remarks>Make sure 'spatialMapping' device capability is enabled. See <see cref="https://developer.microsoft.com/en-us/windows/holographic/spatial_mapping_in_directx" /> and <see cref="https://developer.microsoft.com/en-us/windows/holographic/spatial_mapping" /> for more details.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopSpatialMapping">
      <MemberSignature Language="C#" Value="protected void StopSpatialMapping ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void StopSpatialMapping() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops spatial mapping process. You will stop receiving OnSurfaceAddedOrUpdated events.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextToSpeech">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task TextToSpeech (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task TextToSpeech(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
