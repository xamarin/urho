<Type Name="CustomGeometry" FullName="Urho.CustomGeometry">
  <TypeSignature Language="C#" Value="public class CustomGeometry : Urho.Drawable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CustomGeometry extends Urho.Drawable" />
  <AssemblyInfo>
    <AssemblyName>Urho</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Urho.Drawable</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Custom geometry component. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomGeometry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <para>Constructs a new instance of Urho.CustomGeometry which is tied to the <see cref="P:Urho.Application.CurrentContext" />.</para>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomGeometry (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer to the raw unmanaged Urho object.</param>
        <summary>Constructs a new instance of Urho.CustomGeometry, given a raw pointer to an unmanaged object</summary>
        <remarks>
          <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
          <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
          <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomGeometry (Urho.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Urho.Context context) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="Urho.Context" />
      </Parameters>
      <Docs>
        <param name="context">The context that this object will be attached to.</param>
        <summary>
          <para>Constructs a new instance of Urho.CustomGeometry linked to a specific <see cref="T:Urho.Context" />.</para>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CustomGeometry (Urho.UrhoObjectFlag emptyFlag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype Urho.UrhoObjectFlag emptyFlag) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="emptyFlag" Type="Urho.UrhoObjectFlag" />
      </Parameters>
      <Docs>
        <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
        <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
        <remarks>
          <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
          <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
          <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginGeometry">
      <MemberSignature Language="C#" Value="public void BeginGeometry (uint index, Urho.PrimitiveType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginGeometry(unsigned int32 index, valuetype Urho.PrimitiveType type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.UInt32" />
        <Parameter Name="type" Type="Urho.PrimitiveType" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="type">To be added.</param>
        <summary>
            Begin defining a geometry. Clears existing vertices in that index.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Clear all geometries.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Update vertex buffer and calculate the bounding box. Call after finishing defining geometry.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineColor">
      <MemberSignature Language="C#" Value="public void DefineColor (Urho.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineColor(valuetype Urho.Color color) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="Urho.Color" />
      </Parameters>
      <Docs>
        <param name="color">To be added.</param>
        <summary>
            Define a vertex color.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineGeometry">
      <MemberSignature Language="C#" Value="public void DefineGeometry (uint index, Urho.PrimitiveType type, uint numVertices, bool hasNormals, bool hasColors, bool hasTexCoords, bool hasTangents);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineGeometry(unsigned int32 index, valuetype Urho.PrimitiveType type, unsigned int32 numVertices, bool hasNormals, bool hasColors, bool hasTexCoords, bool hasTangents) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.UInt32" />
        <Parameter Name="type" Type="Urho.PrimitiveType" />
        <Parameter Name="numVertices" Type="System.UInt32" />
        <Parameter Name="hasNormals" Type="System.Boolean" />
        <Parameter Name="hasColors" Type="System.Boolean" />
        <Parameter Name="hasTexCoords" Type="System.Boolean" />
        <Parameter Name="hasTangents" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="type">To be added.</param>
        <param name="numVertices">To be added.</param>
        <param name="hasNormals">To be added.</param>
        <param name="hasColors">To be added.</param>
        <param name="hasTexCoords">To be added.</param>
        <param name="hasTangents">To be added.</param>
        <summary>
            Set the primitive type, number of vertices and elements in a geometry, after which the vertices can be edited with GetVertex(). An alternative to BeginGeometry() / DefineVertex().
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineNormal">
      <MemberSignature Language="C#" Value="public void DefineNormal (Urho.Vector3 normal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineNormal(valuetype Urho.Vector3 normal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normal" Type="Urho.Vector3" />
      </Parameters>
      <Docs>
        <param name="normal">To be added.</param>
        <summary>
            Define a vertex normal.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineTangent">
      <MemberSignature Language="C#" Value="public void DefineTangent (Urho.Vector4 tangent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineTangent(valuetype Urho.Vector4 tangent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tangent" Type="Urho.Vector4" />
      </Parameters>
      <Docs>
        <param name="tangent">To be added.</param>
        <summary>
            Define a vertex tangent.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineTexCoord">
      <MemberSignature Language="C#" Value="public void DefineTexCoord (Urho.Vector2 texCoord);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineTexCoord(valuetype Urho.Vector2 texCoord) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="texCoord" Type="Urho.Vector2" />
      </Parameters>
      <Docs>
        <param name="texCoord">To be added.</param>
        <summary>
            Define a vertex UV coordinate.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineVertex">
      <MemberSignature Language="C#" Value="public void DefineVertex (Urho.Vector3 position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineVertex(valuetype Urho.Vector3 position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="Urho.Vector3" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <summary>
            Define a vertex position. This begins a new vertex.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawOcclusion">
      <MemberSignature Language="C#" Value="public override bool DrawOcclusion (Urho.OcclusionBuffer buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool DrawOcclusion(class Urho.OcclusionBuffer buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="Urho.OcclusionBuffer" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>
            Draw to occlusion buffer. Return true if did not run out of triangles.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public bool Dynamic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Dynamic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determines whether vertex buffer dynamic mode is enabled.</summary>
        <value>To be added.</value>
        <remarks>When setting the vertex buffer dynamic mode. A dynamic buffer should be faster to update frequently. Effective at the next Commit() call.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLodGeometry">
      <MemberSignature Language="C#" Value="public override Urho.Geometry GetLodGeometry (uint batchIndex, uint level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Urho.Geometry GetLodGeometry(unsigned int32 batchIndex, unsigned int32 level) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="batchIndex" Type="System.UInt32" />
        <Parameter Name="level" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="batchIndex">To be added.</param>
        <param name="level">To be added.</param>
        <summary>
            Return the geometry for a specific LOD level.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMaterial">
      <MemberSignature Language="C#" Value="public Urho.Material GetMaterial (uint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Material GetMaterial(unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Material</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>
            Return material by geometry index.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumVertices">
      <MemberSignature Language="C#" Value="public uint GetNumVertices (uint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int32 GetNumVertices(unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>
            Return number of vertices in a geometry.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVertex">
      <MemberSignature Language="C#" Value="public Urho.CustomGeometryVertex* GetVertex (uint geometryIndex, uint vertexNum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Urho.CustomGeometryVertex* GetVertex(unsigned int32 geometryIndex, unsigned int32 vertexNum) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.CustomGeometryVertex*</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryIndex" Type="System.UInt32" />
        <Parameter Name="vertexNum" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="geometryIndex">To be added.</param>
        <param name="vertexNum">To be added.</param>
        <summary>
            Return a vertex in a geometry for editing, or null if out of bounds. After the edits are finished, calling Commit() updates  the vertex buffer.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumGeometries">
      <MemberSignature Language="C#" Value="public uint NumGeometries { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 NumGeometries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return number of geometries.
            Or
            Set number of geometries.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumOccluderTriangles">
      <MemberSignature Language="C#" Value="public override uint NumOccluderTriangles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 NumOccluderTriangles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return number of occlusion geometry triangles.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterObject">
      <MemberSignature Language="C#" Value="public static void RegisterObject (Urho.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterObject(class Urho.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Urho.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>
            Register object factory. Drawable must be registered first.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMaterial">
      <MemberSignature Language="C#" Value="public void SetMaterial (Urho.Material material);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetMaterial(class Urho.Material material) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="material" Type="Urho.Material" />
      </Parameters>
      <Docs>
        <param name="material">To be added.</param>
        <summary>
            Set material on all geometries.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMaterial">
      <MemberSignature Language="C#" Value="public bool SetMaterial (uint index, Urho.Material material);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SetMaterial(unsigned int32 index, class Urho.Material material) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.UInt32" />
        <Parameter Name="material" Type="Urho.Material" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="material">To be added.</param>
        <summary>
            Set material on one geometry. Return true if successful.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public override Urho.StringHash Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.StringHash Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.StringHash</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Urho's type system type.</summary>
        <value>StringHash representing the type for this C# type.</value>
        <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public override string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Urho's low-level type name.</summary>
        <value>Stringified low-level type name.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeNameStatic">
      <MemberSignature Language="C#" Value="public static string TypeNameStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string TypeNameStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Urho's low-level type name, accessible as a static method.</summary>
        <value>Stringified low-level type name.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeStatic">
      <MemberSignature Language="C#" Value="public static Urho.StringHash TypeStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Urho.StringHash TypeStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.StringHash</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Urho's low-level type, accessible as a static method.</summary>
        <value>This returns the Urho's type and is surface for the low-level Urho code.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
