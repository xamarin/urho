<Type Name="RenderSurface" FullName="Urho.RenderSurface">
  <TypeSignature Language="C#" Value="public class RenderSurface : Urho.RefCounted" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RenderSurface extends Urho.RefCounted" />
  <AssemblyInfo>
    <AssemblyName>Urho</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Urho.RefCounted</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Color or depth-stencil surface that can be rendered into. </summary>
    <remarks>
      <format type="text/html">
        <h2>Auxiliary Views</h2>
      </format>
      <para></para>
      <para>Auxiliary views are viewports assigned to a <see cref="T:Urho.RenderSurface" /> by calling its <see cref="T:Urho.RenderSurfacc.SetViewport" /> method. By default these will be rendered on each frame that the texture containing the surface is visible, and can be typically used to implement for example camera displays or reflections. The texture in question must have been created in rendertarget mode, see <see cref="T:Urho.Texture.SetSize" /> method.</para>
      <para></para>
      <para>The viewport is not assigned directly to the texture because of cube map support: a renderable cube map has 6 render surfaces, and done this way, a different camera could be assigned to each.</para>
      <para>A "backup texture" can be assigned to the rendertarget texture: because it is illegal to sample a texture that is also being simultaneously rendered to (in cases where the texture becomes "recursively" visible in the auxiliary view), the backup texture can be used to specify which texture should be used in place instead.</para>
      <para>Rendering detailed auxiliary views can easily have a large performance impact. Some things you can do for optimization with the auxiliary view camera:</para>
      <list type="bullet">
        <item>
          <term>Set the far clip distance as small as possible.</term>
        </item>
        <item>
          <term>Use viewmasks on the camera and the scene objects to only render some of the objects in the auxiliary view.</term>
        </item>
        <item>
          <term>Use the cameraвЂ™s <see cref="T:Urho.Camera.ViewOverrideFlags" /> property to disable shadows, to disable occlusion, or force the lowest material quality.</term>
        </item>
      </list>
      <para>The surface can also be configured to always update its viewports, or to only update when manually requested. See <see cref="P:Urho.RenderSurface.UpdatedMode" />. For example an editor widget showing a rendered texture might use either of those modes. Call <see cref="M:Urho.RenderSurface.QueueUpdate" /> to request a manual update of the surface on the current frame.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RenderSurface (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer to the raw unmanaged Urho object.</param>
        <summary>Constructs a new instance of Urho.RenderSurface, given a raw pointer to an unmanaged object</summary>
        <remarks>
          <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
          <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
          <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RenderSurface (Urho.Texture parentTexture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Urho.Texture parentTexture) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parentTexture" Type="Urho.Texture" />
      </Parameters>
      <Docs>
        <param name="parentTexture">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RenderSurface (Urho.UrhoObjectFlag emptyFlag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype Urho.UrhoObjectFlag emptyFlag) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="emptyFlag" Type="Urho.UrhoObjectFlag" />
      </Parameters>
      <Docs>
        <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
        <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
        <remarks>
          <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
          <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
          <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoResolve">
      <MemberSignature Language="C#" Value="public bool AutoResolve { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoResolve" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return multisampling autoresolve mode.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewport">
      <MemberSignature Language="C#" Value="public Urho.Viewport GetViewport (uint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Viewport GetViewport(unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Viewport</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>
            Return viewport by index.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return height.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkedDepthStencil">
      <MemberSignature Language="C#" Value="public Urho.RenderSurface LinkedDepthStencil { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Urho.RenderSurface LinkedDepthStencil" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.RenderSurface</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return linked depth buffer.
            Or
            Set linked depth-stencil surface.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkedRenderTarget">
      <MemberSignature Language="C#" Value="public Urho.RenderSurface LinkedRenderTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Urho.RenderSurface LinkedRenderTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.RenderSurface</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return linked color buffer.
            Or
            Set linked color rendertarget.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiSample">
      <MemberSignature Language="C#" Value="public int MultiSample { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MultiSample" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return multisampling level.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumViewports">
      <MemberSignature Language="C#" Value="public uint NumViewports { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 NumViewports" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return number of viewports.
            Or
            Set number of viewports.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentTexture">
      <MemberSignature Language="C#" Value="public Urho.Texture ParentTexture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Urho.Texture ParentTexture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Texture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return parent texture.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueUpdate">
      <MemberSignature Language="C#" Value="public void QueueUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueUpdate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Queue manual update of the viewport(s).
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnlyView">
      <MemberSignature Language="C#" Value="public IntPtr ReadOnlyView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ReadOnlyView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>eturn Direct3D11 read-only depth-stencil view. May be null if not applicable. Not valid on OpenGL.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Release() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Release renderbuffer if any.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTargetView">
      <MemberSignature Language="C#" Value="public IntPtr RenderTargetView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int RenderTargetView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return Direct3D11 rendertarget or depth-stencil view. Not valid on OpenGL.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetUpdateQueued">
      <MemberSignature Language="C#" Value="public void ResetUpdateQueued ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetUpdateQueued() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reset update queued flag. Called internally.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveDirty">
      <MemberSignature Language="C#" Value="public bool ResolveDirty { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResolveDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get or Set or clear the need resolve flag. Called internally by Graphics.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetViewport">
      <MemberSignature Language="C#" Value="public void SetViewport (uint index, Urho.Viewport viewport);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetViewport(unsigned int32 index, class Urho.Viewport viewport) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.UInt32" />
        <Parameter Name="viewport" Type="Urho.Viewport" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="viewport">To be added.</param>
        <summary>
            Set viewport.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Surface">
      <MemberSignature Language="C#" Value="public IntPtr Surface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Surface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return Direct3D9 surface.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateMode">
      <MemberSignature Language="C#" Value="public Urho.RenderSurfaceUpdateMode UpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.RenderSurfaceUpdateMode UpdateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.RenderSurfaceUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return viewport update mode.
            Or
            Set viewport update mode. Default is to update when visible.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateQueued">
      <MemberSignature Language="C#" Value="public bool UpdateQueued { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UpdateQueued" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return viewport update mode.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Usage">
      <MemberSignature Language="C#" Value="public Urho.TextureUsage Usage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.TextureUsage Usage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.TextureUsage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return usage.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public int Width { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return width.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
