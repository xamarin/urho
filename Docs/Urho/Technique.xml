<Type Name="Technique" FullName="Urho.Technique">
  <TypeSignature Language="C#" Value="public class Technique : Urho.Resources.Resource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Technique extends Urho.Resources.Resource" />
  <AssemblyInfo>
    <AssemblyName>Urho</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Urho.Resources.Resource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Material technique. Consists of several passes.</summary>
    <remarks>
      <para>A technique definition looks like this:</para>
      <code lang="XML"><![CDATA[<technique vs="VertexShaderName" ps="PixelShaderName" vsdefines="DEFINE1 DEFINE2" psdefines="DEFINE3 DEFINE4" desktop="false|true" >
    <pass name="base|litbase|light|alpha|litalpha|postopaque|refract|postalpha|prepass|material|deferred|depth|shadow" desktop="false|true" >
        vs="VertexShaderName" ps="PixelShaderName" vsdefines="DEFINE1 DEFINE2" psdefines="DEFINE3 DEFINE4"
        lighting="unlit|pervertex|perpixel"
        blend="replace|add|multiply|alpha|addalpha|premulalpha|invdestalpha|subtract|subtractalpha"
        depthtest="always|equal|less|lessequal|greater|greaterequal"
        depthwrite="true|false" 
        alphamask="true|false" />
    <pass ... />
    <pass ... />
</technique>
]]></code>
      <para>

	  The "desktop" attribute in either technique or pass allows
	  to specify it requires desktop graphics hardware (exclude
	  mobile devices.) Omitting it is the same as specifying
	  false.
	</para>
      <para>

	  Shaders are referred to by giving the name of a shader
	  without path and file extension. For example "Basic" or
	  "LitSolid". The engine will add the correct path and file
	  extension (Shaders/HLSL/LitSolid.hlsl for Direct3D, and
	  Shaders/GLSL/LitSolid.glsl for OpenGL) automatically. The
	  same shader source file contains both the vertex and pixel
	  shader. In addition, compilation defines can be specified,
	  which are passed to the shader compiler. For example the
	  define "DIFFMAP" typically enables diffuse mapping in the
	  pixel shader.
	</para>
      <para>

	  Shaders and their compilation defines can be specified on
	  both the technique and pass level. If a pass does not
	  override the default shaders specified on the technique
	  level, it still can specify additional compilation defines
	  to be used. However, if a pass overrides the shaders, then
	  the technique-level defines are not used.

	</para>
      <para>
	  
	  The technique definition does not need to enumerate shaders
	  used for different geometry types (non-skinned, skinned,
	  instanced, billboard) and different per-vertex and per-pixel
	  light combinations. Instead the engine will add certain
	  hardcoded compilation defines for these. See <see cref="T:Urho.Shader" /> for
	  details.

	</para>
      <para>
	  The purposes of the different passes are:
	</para>
      <list type="bullet">
        <item>
          <term>
	      base: Renders ambient light, per-vertex lights and fog for an opaque object.
	    </term>
        </item>
        <item>
          <term>litbase: Renders the first per-pixel light, ambient light and fog for an opaque object. This is an optional pass for optimization.
	    </term>
        </item>
        <item>
          <term>light: Renders one per-pixel light's contribution additively for an opaque object.

	    </term>
        </item>
        <item>
          <term>alpha: Renders ambient light, per-vertex lights and fog for a transparent object.

	    </term>
        </item>
        <item>
          <term>litalpha: Renders one per-pixel light's contribution additively for a transparent object

	    </term>
        </item>
        <item>
          <term>postopaque: Custom rendering pass after opaque geometry. Can be used to render the skybox.

	    </term>
        </item>
        <item>
          <term>refract: Custom rendering pass after postopaque pass. Can sample the viewport texture from the environment texture unit to render refractive objects.

	    </term>
        </item>
        <item>
          <term>postalpha: Custom rendering pass after transparent geometry.

	    </term>
        </item>
        <item>
          <term>prepass: Light pre-pass only - renders normals, specular power and depth to the G-buffer.

	    </term>
        </item>
        <item>
          <term>material: Light pre-pass only - renders opaque geometry final color by combining ambient light, per-vertex lights and per-pixel light accumulation.

	    </term>
        </item>
        <item>
          <term>deferred: Deferred rendering only - renders ambient light and per-vertex lights to the output rendertarget, and diffuse albedo, normals, specular intensity + power and depth to the G-buffer.

	    </term>
        </item>
        <item>
          <term>depth: Renders linear depth to a rendertarget for post-processing effects.

	    </term>
        </item>
        <item>
          <term>shadow: Renders to a hardware shadow map (depth only) for shadow map generation.

	    </term>
        </item>
      </list>
      <para>

	  More custom passes can be defined and referred to in the
	  render path definition. For the built-in passes listed
	  above, the lighting shader permutations to load (unlit,
	  per-vertex or per-pixel) are recognized automatically, but
	  for custom passes they need to be explicitly specified. The
	  default is unlit.
	</para>
      <para>

	  The optional "litbase" pass reduces draw call count by
	  combining ambient lighting with the first per-pixel light
	  affecting an object. However, it has intentional limitations
	  to not require too many shader permutations: there must be
	  no vertex lights affecting the object, and the ambient
	  lighting can not have a gradient. In case of excessive
	  overdraw, it is possibly better not to define it, but
	  instead allow the base pass (which is computationally very
	  lightweight) to run first, initializing the Z buffer for
	  later passes.
	</para>
      <para>

	  "Alphamask" is not an actual rendering state, but a hint
	  which tells that the pixel shader will use discard based on
	  alpha. Because this may interfere with the early-Z culling,
	  materials without the alpha masking hint will be drawn
	  first.
	</para>
      <para>

	  The refract pass requires pingponging the scene rendertarget
	  to a texture, but this will not be performed if there is no
	  refractive geometry to render, so there is no unnecessary
	  cost to it.

	</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Technique ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <para>Constructs a new instance of Urho.Technique which is tied to the <see cref="P:Urho.Application.CurrentContext" />.</para>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Technique (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer to the raw unmanaged Urho object.</param>
        <summary>Constructs a new instance of Urho.Technique, given a raw pointer to an unmanaged object</summary>
        <remarks>
          <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
          <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
          <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Technique (Urho.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Urho.Context context) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="Urho.Context" />
      </Parameters>
      <Docs>
        <param name="context">The context that this object will be attached to.</param>
        <summary>
          <para>Constructs a new instance of Urho.Technique linked to a specific <see cref="T:Urho.Context" />.</para>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Technique (Urho.UrhoObjectFlag emptyFlag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype Urho.UrhoObjectFlag emptyFlag) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="emptyFlag" Type="Urho.UrhoObjectFlag" />
      </Parameters>
      <Docs>
        <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
        <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
        <remarks>
          <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
          <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
          <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoad">
      <MemberSignature Language="C#" Value="public override bool BeginLoad (Urho.IO.File source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool BeginLoad(class Urho.IO.File source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Urho.IO.File" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public Urho.Technique Clone (string cloneName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Technique Clone(string cloneName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Technique</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cloneName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cloneName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneWithDefines">
      <MemberSignature Language="C#" Value="public Urho.Technique CloneWithDefines (string vsDefines, string psDefines);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Technique CloneWithDefines(string vsDefines, string psDefines) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Technique</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vsDefines" Type="System.String" />
        <Parameter Name="psDefines" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="vsDefines">To be added.</param>
        <param name="psDefines">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePass">
      <MemberSignature Language="C#" Value="public Urho.Pass CreatePass (string passName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Pass CreatePass(string passName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Pass</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="passName">To be added.</param>
        <summary>
            Create a new pass.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Desktop">
      <MemberSignature Language="C#" Value="public bool Desktop { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Desktop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether requires desktop level hardware.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPass">
      <MemberSignature Language="C#" Value="public Urho.Pass GetPass (string passName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Pass GetPass(string passName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Pass</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="passName">To be added.</param>
        <summary>
            Return a pass by name, or null if not found. This overload should not be called in time-critical rendering loops; use a pre-acquired pass index instead.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPass">
      <MemberSignature Language="C#" Value="public Urho.Pass GetPass (uint passIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Pass GetPass(unsigned int32 passIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Pass</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passIndex" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="passIndex">To be added.</param>
        <summary>
            Return a pass, or null if not found.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPassIndex">
      <MemberSignature Language="C#" Value="public static uint GetPassIndex (string passName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 GetPassIndex(string passName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="passName">To be added.</param>
        <summary>
            Return a pass type index by name. Allocate new if not used yet.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedPass">
      <MemberSignature Language="C#" Value="public Urho.Pass GetSupportedPass (string passName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Pass GetSupportedPass(string passName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Pass</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="passName">To be added.</param>
        <summary>
            Return a supported pass by name. This overload should not be called in time-critical rendering loops; use a pre-acquired pass index instead.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedPass">
      <MemberSignature Language="C#" Value="public Urho.Pass GetSupportedPass (uint passIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Urho.Pass GetSupportedPass(unsigned int32 passIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Pass</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passIndex" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="passIndex">To be added.</param>
        <summary>
            Return a pass that is supported for rendering, or null if not found.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPass">
      <MemberSignature Language="C#" Value="public bool HasPass (string passName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasPass(string passName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="passName">To be added.</param>
        <summary>
            Return whether has a pass by name. This overload should not be called in time-critical rendering loops; use a pre-acquired pass index instead.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPass">
      <MemberSignature Language="C#" Value="public bool HasPass (uint passIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasPass(unsigned int32 passIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passIndex" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="passIndex">To be added.</param>
        <summary>
            Return whether has a pass.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumPasses">
      <MemberSignature Language="C#" Value="public uint NumPasses { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 NumPasses" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return number of passes.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterObject">
      <MemberSignature Language="C#" Value="public static void RegisterObject (Urho.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterObject(class Urho.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Urho.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>
            Register object factory.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseShaders">
      <MemberSignature Language="C#" Value="public void ReleaseShaders ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseShaders() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Reset shader pointers in all passes.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePass">
      <MemberSignature Language="C#" Value="public void RemovePass (string passName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemovePass(string passName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="passName">To be added.</param>
        <summary>
            Remove a pass.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsDesktop">
      <MemberSignature Language="C#" Value="public void SetIsDesktop (bool enable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetIsDesktop(bool enable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enable">To be added.</param>
        <summary>
            Set whether requires desktop level hardware.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Supported">
      <MemberSignature Language="C#" Value="public bool Supported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Supported" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether technique is supported by the current hardware.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public override Urho.StringHash Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.StringHash Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.StringHash</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Urho's type system type.</summary>
        <value>StringHash representing the type for this C# type.</value>
        <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public override string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Urho's low-level type name.</summary>
        <value>Stringified low-level type name.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeNameStatic">
      <MemberSignature Language="C#" Value="public static string TypeNameStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string TypeNameStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Urho's low-level type name, accessible as a static method.</summary>
        <value>Stringified low-level type name.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeStatic">
      <MemberSignature Language="C#" Value="public static Urho.StringHash TypeStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Urho.StringHash TypeStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.StringHash</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Urho's low-level type, accessible as a static method.</summary>
        <value>This returns the Urho's type and is surface for the low-level Urho code.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
